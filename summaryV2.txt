Résumé du projet : C:\Users\kessa\Documents\GitHub\BigSolo-Site
================================================================

Dossier : BigSolo-Site/

    Fichier : .gitignore
    --------------------
      /.wrangler
      /node_modules
      summary.txt
      .dev.vars
    --------------------


    Fichier : 404.html
    ------------------
      <!DOCTYPE html>
      <html lang="en">
      
          <head>
              <style>
                  :root {
                      --bg: #15171a;
                      --text: #ffffff;
                      --accent: #0095AD;
                  }
      
                  html {
                      scroll-behavior: smooth;
                  }
      
                  * {
                      box-sizing: border-box;
                  }
      
                  body {
                      margin: 0;
                      padding: .5rem;
                      background-color: var(--bg);
                      color: var(--text);
                      font-size: 18px;
                      display: flex;
                      justify-content: center;
                      flex-direction: column;
                      align-items: center;
                      min-height: 100vh;
                      min-height: 100dvh;
                      font-family: "Urbanist", system-ui, sans-serif;
                      text-align: center;
                  }
      
                  h1 {
                      margin: 0;
                  }
      
                  img {
                      height: 1em;
                      vertical-align: text-top;
                  }
      
                  a {
                      background: var(--accent);
                      color: var(--text);
                      text-decoration: none;
                      padding: .7rem 1.5rem;
                      border-radius: 8px;
                      font-weight: 600;
                      transition: opacity 0.3s ease, box-shadow 0.3s ease;
                  }
      
                  a:hover {
                      opacity: 0.8;
                      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                  }
              </style>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <meta http-equiv="refresh" content="5; url=/">
              <link rel="preconnect" href="https://fonts.googleapis.com" />
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
              <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet" />
              <link rel="icon" type="image/png" href="/img/icon.png" />
              <title>Erreur 404 - BigSolo</title>
          </head>
      
          <body>
              <h1>Erreur 404 <img src="/img/emojis/shrug.png" alt=""></h1>
              <p>La page que vous recherchez n'est pas ou plus disponible. Vous allez être redirigé vers la page d'accueil dans <span id="sec">5</span> secondes.</p>
              <a href="/">Si vous n'êtes pas redirigé, appuyez ici.</a>
              <script>
                // Compte à rebours dynamique pour la redirection
                let sec = 5;
                const secSpan = document.getElementById('sec');
                const interval = setInterval(() => {
                  sec--;
                  if (secSpan) secSpan.textContent = sec;
                  if (sec <= 0) {
                    clearInterval(interval);
                    window.location.href = "/";
                  }
                }, 1000);
              </script>
          </body>
      
      </html>
    ------------------


    Fichier : CNAME
    ---------------
      bigsolo.org
    ---------------


    Fichier : README.md
    -------------------
      # BigSolo - Site
      
      Le site super de Big_Herooooo pour les sorties de Big_Herooooo
    -------------------


    Fichier : _redirects
    --------------------
      # redirection legacy
      /series-detail/* /:splat
      
      # rediriger les url /episode vers /episodes
      /:series/episode/:episode /:series/episodes/:episode
    --------------------


    Fichier : admins.html
    ---------------------
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Administration - Connexion</title>
          <style>
            body {
              font-family: system-ui, sans-serif;
              display: flex;
              justify-content: center;
              align-items: center;
              height: 100vh;
              margin: 0;
              background-color: #f0f2f5;
            }
            .login-container {
              background: white;
              padding: 2rem;
              border-radius: 8px;
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
              width: 100%;
              max-width: 400px;
            }
            h1 {
              margin-top: 0;
              text-align: center;
            }
            .form-group {
              margin-bottom: 1.5rem;
            }
            label {
              display: block;
              margin-bottom: 0.5rem;
              font-weight: 600;
            }
            input {
              width: 100%;
              padding: 0.75rem;
              border: 1px solid #ccc;
              border-radius: 4px;
              box-sizing: border-box;
            }
            button {
              width: 100%;
              padding: 0.75rem;
              border: none;
              border-radius: 4px;
              background-color: #007bff;
              color: white;
              font-size: 1rem;
              cursor: pointer;
            }
            button:hover {
              background-color: #0056b3;
            }
            .error-message {
              color: #dc3545;
              text-align: center;
              margin-top: 1rem;
              display: none;
            }
          </style>
        </head>
        <body>
          <div class="login-container">
            <h1>Connexion Admin</h1>
            <form id="login-form">
              <div class="form-group">
                <label for="username">Nom d'utilisateur</label>
                <input type="text" id="username" required />
              </div>
              <div class="form-group">
                <label for="password">Mot de passe</label>
                <input type="password" id="password" required />
              </div>
              <button type="submit">Se connecter</button>
            </form>
            <p id="error-message" class="error-message"></p>
          </div>
      
          <script>
            document
              .getElementById("login-form")
              .addEventListener("submit", async (e) => {
                e.preventDefault();
                const username = document.getElementById("username").value;
                const password = document.getElementById("password").value;
                const errorMessage = document.getElementById("error-message");
                errorMessage.style.display = "none";
      
                try {
                  const response = await fetch("/api/admin/login", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ username, password }),
                  });
      
                  const result = await response.json();
      
                  if (response.ok && result.success) {
                    sessionStorage.setItem("admin_token", result.token);
                    // --- MODIFICATION PRINCIPALE ---
                    // Redirige vers le nouveau dashboard unifié
                    window.location.href = "/dashboard.html";
                  } else {
                    errorMessage.textContent =
                      result.message || "Une erreur est survenue.";
                    errorMessage.style.display = "block";
                  }
                } catch (error) {
                  errorMessage.textContent = "Erreur de connexion au serveur.";
                  errorMessage.style.display = "block";
                }
              });
          </script>
        </body>
      </html>
    ---------------------


    Fichier : cache-management.html
    -------------------------------
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Administration - Gestion du Cache</title>
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
          />
          <style>
            body {
              font-family: system-ui, sans-serif;
              margin: 0;
              background-color: #f8f9fa;
              color: #333;
            }
            .container {
              max-width: 1200px;
              margin: 2rem auto;
              padding: 0 1rem;
            }
            header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 2rem;
            }
            h1 {
              margin: 0;
            }
            .header-actions a,
            .header-actions button {
              text-decoration: none;
              background: #6c757d;
              color: white;
              border: none;
              padding: 0.5rem 1rem;
              border-radius: 4px;
              cursor: pointer;
              font-size: 0.9rem;
              margin-left: 1rem;
            }
            .header-actions a:hover,
            .header-actions button:hover {
              background: #5a6268;
            }
            #status {
              text-align: center;
              font-size: 1.2rem;
              padding: 2rem;
            }
            .series-group {
              margin-bottom: 2rem;
              background: white;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }
            .series-header {
              padding: 1rem 1.5rem;
              background-color: #f1f3f5;
              border-bottom: 1px solid #dee2e6;
              font-size: 1.2rem;
              font-weight: 600;
              border-top-left-radius: 8px;
              border-top-right-radius: 8px;
            }
            .chapters-list {
              list-style: none;
              padding: 0;
              margin: 0;
            }
            .chapter-item {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 0.75rem 1.5rem;
              border-bottom: 1px solid #e9ecef;
            }
            .chapter-item:last-child {
              border-bottom: none;
            }
            .chapter-info {
              font-weight: 500;
            }
            .chapter-info .chapter-title {
              color: #6c757d;
              font-size: 0.9em;
              margin-left: 0.5em;
            }
            .purge-btn {
              background: #17a2b8;
              color: white;
              border: none;
              padding: 0.4rem 0.8rem;
              border-radius: 4px;
              cursor: pointer;
              font-size: 0.8rem;
            }
            .purge-btn:hover {
              background: #138496;
            }
            .purge-btn:disabled {
              background: #6c757d;
              cursor: not-allowed;
            }
          </style>
        </head>
        <body id="cache-management-page">
          <div class="container">
            <header>
              <h1>Gestion du Cache des Chapitres</h1>
              <div class="header-actions">
                <a href="/moderation.html">Modération Commentaires</a>
                <button id="logout-btn">Déconnexion</button>
              </div>
            </header>
            <p id="status">Chargement de la liste des séries et chapitres...</p>
            <div id="cache-list-container">
              <!-- La liste des chapitres sera injectée ici par le JS -->
            </div>
          </div>
          <script src="/js/index.js" type="module"></script>
        </body>
      </html>
    -------------------------------


    Fichier : dashboard.html
    ------------------------
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Administration - Tableau de Bord</title>
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
          />
          <style>
            body {
              font-family: system-ui, sans-serif;
              margin: 0;
              background-color: #f8f9fa;
              color: #333;
            }
            .container {
              max-width: 1200px;
              margin: 2rem auto;
              padding: 0 1rem;
            }
            header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 2rem;
            }
            nav {
              display: flex;
              align-items: center;
              gap: 0.5rem;
              background-color: #e9ecef;
              padding: 0.5rem;
              border-radius: 8px;
            }
            .nav-btn {
              background: transparent;
              color: #495057;
              border: none;
              padding: 0.5rem 1rem;
              border-radius: 6px;
              cursor: pointer;
              font-weight: 600;
              font-size: 0.9rem;
              transition: background-color 0.2s, color 0.2s;
            }
            .nav-btn.active {
              background-color: #fff;
              color: #007bff;
              box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            }
            .nav-btn:not(.active):hover {
              background-color: #dee2e6;
            }
            #logout-btn {
              background: #6c757d;
              color: white;
              border: none;
              padding: 0.5rem 1rem;
              border-radius: 4px;
              cursor: pointer;
              font-size: 0.9rem;
            }
            #logout-btn:hover {
              background: #5a6268;
            }
            #admin-content {
              min-height: 60vh;
            }
            #status {
              text-align: center;
              font-size: 1.2rem;
              padding: 2rem;
            }
      
            /* Styles partagés pour les vues (copiés depuis les anciens fichiers) */
            table {
              width: 100%;
              border-collapse: collapse;
              background: white;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }
            th,
            td {
              padding: 12px 15px;
              text-align: left;
              border-bottom: 1px solid #dee2e6;
            }
            th {
              background-color: #f1f3f5;
            }
            .series-group {
              margin-bottom: 2rem;
              background: white;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }
            .series-header {
              padding: 1rem 1.5rem;
              background-color: #f1f3f5;
              border-bottom: 1px solid #dee2e6;
              font-size: 1.2rem;
              font-weight: 600;
              border-top-left-radius: 8px;
              border-top-right-radius: 8px;
            }
            .chapters-list {
              list-style: none;
              padding: 0;
              margin: 0;
            }
            .chapter-item {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 0.75rem 1.5rem;
              border-bottom: 1px solid #e9ecef;
            }
            .chapter-item:last-child {
              border-bottom: none;
            }
            .purge-btn {
              background: #17a2b8;
              color: white;
              border: none;
              padding: 0.4rem 0.8rem;
              border-radius: 4px;
              cursor: pointer;
              font-size: 0.8rem;
            }
            .purge-btn:hover {
              background: #138496;
            }
            .action-btn {
              background: none;
              border: none;
              font-size: 1.2rem;
              cursor: pointer;
              padding: 5px;
            }
            .delete-btn {
              color: #dc3545;
            }
            .undo-btn {
              color: #ffc107;
            }
            .marked-for-deletion {
              opacity: 0.4;
              background-color: #fff3cd;
            }
            .marked-for-deletion td {
              text-decoration: line-through;
            }
          </style>
        </head>
        <body id="dashboardpage">
          <div class="container">
            <header>
              <nav>
                <button class="nav-btn" data-view="moderation">Modération</button>
                <button class="nav-btn" data-view="cache">Gestion du Cache</button>
              </nav>
              <div class="header-actions">
                <button
                  id="save-changes-btn"
                  style="display: none; background: #28a745; margin-right: 1rem"
                >
                  Sauvegarder (<span id="pending-count">0</span>)
                </button>
                <button id="logout-btn">Déconnexion</button>
              </div>
            </header>
            <main id="admin-content">
              <p id="status">Chargement...</p>
            </main>
          </div>
          <script src="/js/index.js" type="module"></script>
        </body>
      </html>
    ------------------------


    Fichier : galerie.html
    ----------------------
      <!DOCTYPE html>
      <html lang="fr">
      
      <head>
        <!-- Le script theme-init reste ici -->
        <script>
          (function () {
            try {
              var theme = localStorage.getItem('mv-theme');
              var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
              var htmlEl = document.documentElement;
              if (theme === 'dark' || (!theme && prefersDark)) {
                htmlEl.classList.add('dark');
                htmlEl.style.backgroundColor = '#15171a';
                htmlEl.style.color = '#eceff4';
              } else {
                htmlEl.classList.remove('dark');
                htmlEl.style.backgroundColor = '#f7f8fc';
                htmlEl.style.color = '#222831';
              }
            } catch (e) { }
          })();
        </script>
        <meta charset="UTF-8" />
      
        <!-- ↓↓↓ SECTION MODIFIÉE ↓↓↓ -->
        <!-- Ces balises seront remplacées ou complétées par le middleware -->
        <title>BigSolo – Galerie</title>
        <meta property="og:type" content="website" />
        <meta name="twitter:card" content="summary_large_image" />
        <!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->
        <!-- ↑↑↑ FIN DE LA SECTION MODIFIÉE ↑↑↑ -->
      
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap"
          rel="stylesheet" />
        <link rel="icon" type="image/png" href="/img/icon.png" />
      
        <!-- scripts pour la gallerie -->
        <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
        <script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
      
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
          integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
      
        <link rel="stylesheet" href="/css/style.css" />
        <link rel="stylesheet" href="/css/layout.css" />
        <link rel="stylesheet" href="/css/components/header.css" />
        <link rel="stylesheet" href="/css/components/mobile-menu.css" />
        <link rel="stylesheet" href="/css/components/general.css" />
        <link rel="stylesheet" href="/css/components/cards.css" />
        <link rel="stylesheet" href="/css/components/carousel.css" />
        <link rel="stylesheet" href="/css/components/gallery-lightbox.css" />
        <link rel="stylesheet" href="/css/components/accordion.css" />
        <link rel="stylesheet" href="/css/pages/galerie.css" />
      
        <script src="/js/theme-init.js"></script>
      </head>
      
      <!-- Le reste du body reste identique -->
      
      <body id="galeriepage">
        <header id="main-header"></header>
        <div class="mobile-menu-overlay" id="main-mobile-menu-overlay"></div>
      
        <main>
          <section class="gallery-section">
            <!-- Titre mis à jour pour inclure le compteur -->
            <h1 class="section-title page-title">Galerie des Colorisations <span id="colo-total-count"></span></h1>
      
            <!-- Contrôles mis à jour -->
            <div class="gallery-controls">
              <div class="gallery-sort-filter">
                <label for="custom-artist-filter">Artiste :</label>
                <!-- Nouveau menu déroulant custom -->
                <div id="custom-artist-filter" class="custom-dropdown">
                  <button class="custom-dropdown-toggle" type="button" aria-haspopup="listbox" aria-expanded="false">
                      <span id="custom-filter-text">Tous les artistes</span>
                      <i class="fas fa-chevron-down dropdown-arrow"></i>
                  </button>
                  <div class="custom-dropdown-menu" id="custom-artist-options" role="listbox" aria-multiselectable="true">
                      <!-- Les options des artistes seront injectées ici par le JS -->
                      <div class="dropdown-loader">Chargement...</div>
                  </div>
                </div>
                <div id="custom-sort-filter" class="custom-dropdown">
                  <button class="custom-dropdown-toggle" type="button" aria-haspopup="listbox" aria-expanded="false">
                      <span id="custom-sort-text">Date (récent)</span>
                      <i class="fas fa-chevron-down dropdown-arrow"></i>
                  </button>
                  <div class="custom-dropdown-menu" role="listbox">
                      <div class="custom-dropdown-option" data-sort="date-desc" role="option">
                          <i class="fas fa-clock"></i>
                          <span class="sort-name">Date (récent → ancien)</span>
                      </div>
                      <div class="custom-dropdown-option" data-sort="date-asc" role="option">
                          <i class="fas fa-clock fa-flip-horizontal"></i>
                          <span class="sort-name">Date (ancien → récent)</span>
                      </div>
                      <div class="custom-dropdown-option" data-sort="chapter-desc" role="option">
                          <i class="fas fa-sort-numeric-down"></i>
                          <span class="sort-name">Chapitre (décroissant)</span>
                      </div>
                      <div class="custom-dropdown-option" data-sort="chapter-asc" role="option">
                          <i class="fas fa-sort-numeric-up"></i>
                          <span class="sort-name">Chapitre (croissant)</span>
                      </div>
                  </div>
                </div>
              </div>
            </div>
      
            <div class="gallery-grid" id="gallery-grid-container">
              <!-- Les cartes de colorisation seront injectées ici par le JS -->
               <!-- pour information, le layout utilisé s'appelle un "masonry layout" -->
            </div>
          </section>
        </main>
      
        <div id="lightbox-modal" class="lightbox-modal" style="display:none;">
          <span class="lightbox-close">×</span>
          <div class="lightbox-content-wrapper">
            <div class="lightbox-image-container">
              <img class="lightbox-image" id="lightbox-img" src="" alt="Colorisation en grand" />
            </div>
            <div class="lightbox-info-panel lightbox-info-panel-desktop">
              <div class="lightbox-artist-info-block"></div>
              <div class="lightbox-colo-info-block"></div>
            </div>
            <div class="lightbox-info-panel lightbox-info-panel-mobile">
              <div class="lightbox-artist-info"></div>
              <div class="lightbox-colo-info"></div>
            </div>
          </div>
        </div>
      
        <script src="/js/index.js" type="module"></script>
      </body>
      
      </html>
    ----------------------


    Fichier : generate-og-images.js
    -------------------------------
      // generate-og-images.js
      import fs from 'fs/promises';
      import path from 'path';
      import satori from 'satori';
      import { html } from 'satori-html';
      
      // Fonction pour lire un fichier local (comme une police)
      const readFile = (filePath) => fs.readFile(path.join(process.cwd(), filePath));
      
      // Fonction principale asynchrone
      async function generateImages() {
        console.log('🚀 Démarrage de la génération des images OG...');
      
        // 1. Charger les polices une seule fois
        const [fontRegular, fontSemiBold, fontBold] = await Promise.all([
          readFile('./fonts/Urbanist-Regular.ttf'),
          readFile('./fonts/Urbanist-SemiBold.ttf'),
          readFile('./fonts/Urbanist-Bold.ttf'),
        ]);
        console.log('✅ Polices chargées.');
      
        // 2. Lire le fichier de configuration pour obtenir la liste des séries
        const configPath = './data/config.json';
        const config = JSON.parse(await readFile(configPath));
        const seriesFiles = config.LOCAL_SERIES_FILES;
        console.log(`🔎 ${seriesFiles.length} séries trouvées.`);
      
        // 3. Créer le dossier de sortie s'il n'existe pas
        const outputDir = './img/banner';
        await fs.mkdir(outputDir, { recursive: true });
      
        // 4. Boucler sur chaque fichier de série et générer l'image
        for (const filename of seriesFiles) {
          const seriesPath = `./data/series/${filename}`;
          try {
            const seriesData = JSON.parse(await readFile(seriesPath));
            
            const title = seriesData.title || 'Titre non disponible';
            const author = seriesData.author || seriesData.artist || 'Auteur inconnu';
            let coverUrl = seriesData.cover;
            
            if (coverUrl.includes('comick.pictures') && !coverUrl.endsWith('-s.jpg')) {
              coverUrl = coverUrl.replace('.jpg', '-s.jpg');
            }
      
            console.log(`🎨 Génération de l'image pour "${title}"...`);
      
            // Le template HTML avec les espacements ajustés
            const template = html`
              <div style="width: 100%; height: 100%; position: relative; display: flex; flex-direction: row; font-family: 'Urbanist'; color: #ffffff; overflow: hidden;">
                <img 
                  src="${coverUrl}" 
                  style="position: absolute; 
                         object-fit: cover; 
                         filter: blur(14px) brightness(0.4); 
                         width: 105%; 
                         height: 105%; 
                         top: -2.5%; 
                         left: -2.5%;" 
                />
                <!-- Espacement horizontal (gap) réduit pour rapprocher de l'image -->
                <div style="position: relative; display: flex; flex-direction: row; width: 100%; height: 100%; gap: 48px;">
                  <img src="${coverUrl}" style="height: 100%; width: 420px; object-fit: cover; border-radius: 0; box-shadow: 0 0 40px rgba(0,0,0,0.3);" />
                  <!-- Padding vertical réduit pour rapprocher des bords haut/bas -->
                  <div style="flex: 1; display: flex; flex-direction: column; justify-content: center; gap: 28px; padding: 48px 60px 48px 0; box-sizing: border-box;">
                    <div style="font-size: 64px; font-weight: 600; line-height: 1.2; text-shadow: 2px 2px 8px rgba(0,0,0,0.7);">${title}</div>
                    <div style="font-size: 36px; font-weight: 400; color: #cccccc; text-shadow: 1px 1px 4px rgba(0,0,0,0.7);">${author}</div>
                    <div style="margin-top: auto; display: flex; align-items: center; gap: 20px;">
                      <img src="https://www.bigsolo.org/img/icon.png" style="width: 50px; height: 50px;" />
                      <span style="font-size: 40px; font-weight: 700; color: #ffffff; text-shadow: 1px 1px 4px rgba(0,0,0,0.7);">BigSolo.org</span>
                    </div>
                  </div>
                </div>
              </div>
            `;
      
            const svg = await satori(template, {
              width: 1200,
              height: 630,
              fonts: [
                { name: 'Urbanist', data: fontRegular, weight: 400, style: 'normal' },
                { name: 'Urbanist', data: fontSemiBold, weight: 600, style: 'normal' },
                { name: 'Urbanist', data: fontBold, weight: 700, style: 'normal' },
              ],
            });
            
            const { Resvg } = await import('@resvg/resvg-js');
            const resvg = new Resvg(svg);
            const pngData = resvg.render();
            const pngBuffer = pngData.asPng();
      
            const outputFilename = filename.replace('.json', '.png');
            const outputPath = path.join(outputDir, outputFilename);
            await fs.writeFile(outputPath, pngBuffer);
      
            console.log(`✅ Image sauvegardée : ${outputPath}`);
      
          } catch (error) {
            console.error(`❌ Erreur lors de la génération pour ${filename}:`, error);
          }
        }
      
        console.log('🎉 Terminé ! Toutes les images ont été générées.');
      }
      
      generateImages();
    -------------------------------


    Fichier : index.html
    --------------------
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <script>
            (function () {
              try {
                var theme = localStorage.getItem("mv-theme");
                var prefersDark = window.matchMedia(
                  "(prefers-color-scheme: dark)"
                ).matches;
                var htmlEl = document.documentElement;
                if (theme === "dark" || (!theme && prefersDark)) {
                  htmlEl.classList.add("dark");
                  htmlEl.style.backgroundColor = "#15171a";
                  htmlEl.style.color = "#eceff4";
                } else {
                  htmlEl.classList.remove("dark");
                  htmlEl.style.backgroundColor = "#f7f8fc";
                  htmlEl.style.color = "#222831";
                }
              } catch (e) {}
            })();
          </script>
          <meta charset="UTF-8" />
      
          <!-- ↓↓↓ SECTION GÉRÉE PAR LE MIDDLEWARE ↓↓↓ -->
          <meta property="og:type" content="website" />
          <meta name="twitter:card" content="summary_large_image" />
          <!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->
          <!-- ↑↑↑ FIN DE LA SECTION ↑↑↑ -->
      
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap"
            rel="stylesheet"
          />
          <link rel="icon" type="image/png" href="/img/icon.png" />
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
            integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
          />
      
          <link rel="stylesheet" href="/css/style.css" />
          <link rel="stylesheet" href="/css/layout.css" />
          <link rel="stylesheet" href="/css/components/header.css" />
          <link rel="stylesheet" href="/css/components/mobile-menu.css" />
          <link rel="stylesheet" href="/css/components/general.css" />
          <link rel="stylesheet" href="/css/components/cards.css" />
          <link rel="stylesheet" href="/css/components/carousel.css" />
          <link rel="stylesheet" href="/css/components/gallery-lightbox.css" />
          <link rel="stylesheet" href="/css/components/accordion.css" />
          <link rel="stylesheet" href="/css/pages/homepage.css" />
          <script src="/js/theme-init.js"></script>
        </head>
        <body id="homepage">
          <header id="main-header"></header>
          <div class="mobile-menu-overlay" id="main-mobile-menu-overlay"></div>
      
          <main>
            <!-- NOUVELLE SECTION HERO CAROUSEL -->
            <section id="hero-section" class="full-width">
              <div class="hero-carousel">
                <div class="hero-carousel-track">
                  <!-- Les slides seront injectées ici par le JS -->
                </div>
                <div class="hero-carousel-nav">
                  <!-- Les points de navigation seront injectés ici -->
                </div>
                <button class="hero-carousel-arrow prev" aria-label="Précédent">
                  <i class="fas fa-chevron-left"></i>
                </button>
                <button class="hero-carousel-arrow next" aria-label="Suivant">
                  <i class="fas fa-chevron-right"></i>
                </button>
              </div>
            </section>
      
            <section id="on-going-section">
              <h2 class="section-title">Séries</h2>
              <div class="series-grid on-going"></div>
            </section>
      
            <section id="one-shot-section">
              <h2 class="section-title">One-shot</h2>
              <div class="series-grid one-shot"></div>
            </section>
          </main>
      
          <script src="/js/index.js" type="module"></script>
        </body>
      </html>
    --------------------


    Fichier : moderation.html
    -------------------------
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Administration - Modération</title>
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
          />
          <style>
            body {
              font-family: system-ui, sans-serif;
              margin: 0;
              background-color: #f8f9fa;
              color: #333;
            }
            .container {
              max-width: 1200px;
              margin: 2rem auto;
              padding: 0 1rem;
            }
            header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 2rem;
            }
            h1 {
              margin: 0;
            }
            .header-actions {
              display: flex;
              align-items: center;
              gap: 1rem;
            }
            .header-actions a {
              text-decoration: none;
              font-size: 0.9rem;
              font-family: system-ui, sans-serif;
            }
            #logout-btn,
            #save-changes-btn,
            .header-actions a {
              background: #007bff;
              color: white;
              border: none;
              padding: 0.5rem 1rem;
              border-radius: 4px;
              cursor: pointer;
            }
            .header-actions a {
              background: #17a2b8;
            }
            .header-actions a:hover {
              background: #138496;
            }
            #logout-btn {
              background: #6c757d;
            }
            #logout-btn:hover {
              background: #5a6268;
            }
            #save-changes-btn {
              background: #28a745;
              display: none;
            } /* Caché par défaut */
            #save-changes-btn:hover {
              background: #218838;
            }
            #status {
              text-align: center;
              font-size: 1.2rem;
              padding: 2rem;
            }
            #comments-table {
              width: 100%;
              border-collapse: collapse;
              background: white;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }
            #comments-table th,
            #comments-table td {
              padding: 12px 15px;
              text-align: left;
              border-bottom: 1px solid #dee2e6;
            }
            #comments-table th {
              background-color: #f1f3f5;
            }
            #comments-table td:last-child {
              text-align: center;
            }
            .comment-content {
              max-width: 400px;
              word-wrap: break-word;
            }
            .action-btn {
              background: none;
              border: none;
              font-size: 1.2rem;
              cursor: pointer;
              padding: 5px;
              transition: color 0.2s ease;
            }
            .delete-btn {
              color: #dc3545;
            }
            .delete-btn:hover {
              color: #c82333;
            }
            .undo-btn {
              color: #ffc107;
            }
            .undo-btn:hover {
              color: #e0a800;
            }
            .marked-for-deletion {
              opacity: 0.4;
              background-color: #fff3cd;
            }
            .marked-for-deletion td {
              text-decoration: line-through;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <header>
              <h1>Modération des Commentaires</h1>
              <div class="header-actions">
                <button id="save-changes-btn">
                  Sauvegarder les changements (<span id="pending-count">0</span>)
                </button>
                <a href="/cache-management.html">Gestion du Cache</a>
                <button id="logout-btn">Déconnexion</button>
              </div>
            </header>
      
            <div id="comments-container">
              <p id="status">Chargement des commentaires...</p>
              <table id="comments-table" style="display: none">
                <thead>
                  <tr>
                    <th>Série / Chapitre</th>
                    <th>Auteur</th>
                    <th>Commentaire</th>
                    <th>Date</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="comments-tbody"></tbody>
              </table>
            </div>
          </div>
      
          <script>
            const token = sessionStorage.getItem("admin_token");
            const statusElement = document.getElementById("status");
            const tableElement = document.getElementById("comments-table");
            const tbodyElement = document.getElementById("comments-tbody");
            const logoutBtn = document.getElementById("logout-btn");
            const saveBtn = document.getElementById("save-changes-btn");
            const pendingCountSpan = document.getElementById("pending-count");
      
            let deletionQueue = [];
      
            function updatePendingCount() {
              const count = deletionQueue.length;
              pendingCountSpan.textContent = count;
              saveBtn.style.display = count > 0 ? "inline-block" : "none";
            }
      
            function sendDeletionQueue() {
              if (deletionQueue.length === 0) return;
              try {
                fetch("/api/admin/batch-delete", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                  },
                  body: JSON.stringify(deletionQueue),
                  keepalive: true,
                });
                deletionQueue = [];
              } catch (e) {
                console.error("Erreur lors de l'envoi de la file de suppression", e);
              }
            }
      
            window.addEventListener("pagehide", sendDeletionQueue);
            saveBtn.addEventListener("click", () => {
              sendDeletionQueue();
              alert("Changements sauvegardés en arrière-plan !");
              updatePendingCount();
            });
      
            logoutBtn.addEventListener("click", () => {
              if (deletionQueue.length > 0) {
                if (
                  confirm(
                    "Vous avez des changements non sauvegardés. Voulez-vous les sauvegarder avant de vous déconnecter ?"
                  )
                ) {
                  sendDeletionQueue();
                }
              }
              sessionStorage.removeItem("admin_token");
              window.location.href = "/admins.html";
            });
      
            function displayComments(comments) {
              if (comments.length === 0) {
                statusElement.textContent = "Aucun commentaire à modérer.";
                return;
              }
      
              statusElement.style.display = "none";
              tableElement.style.display = "table";
              tbodyElement.innerHTML = "";
      
              comments.forEach((comment) => {
                const row = document.createElement("tr");
                row.dataset.commentId = comment.id;
                row.dataset.seriesSlug = comment.seriesSlug;
                row.dataset.chapterNumber = comment.chapterNumber;
      
                const date = new Date(comment.timestamp).toLocaleString("fr-FR");
      
                row.innerHTML = `
                  <td>${comment.seriesSlug}<br><strong>Ch. ${
                  comment.chapterNumber
                }</strong></td>
                  <td>${comment.username}</td>
                  <td class="comment-content">${comment.comment
                    .replace(/</g, "<")
                    .replace(/>/g, ">")}</td>
                  <td>${date}</td>
                  <td>
                      <button class="action-btn delete-btn" title="Marquer pour suppression">
                          <i class="fas fa-trash-alt"></i>
                      </button>
                  </td>
                `;
                tbodyElement.appendChild(row);
              });
            }
      
            tbodyElement.addEventListener("click", (e) => {
              const btn = e.target.closest(".action-btn");
              if (!btn) return;
      
              const row = btn.closest("tr");
              const { commentId, seriesSlug, chapterNumber } = row.dataset;
              const deletionAction = { commentId, seriesSlug, chapterNumber };
      
              if (btn.classList.contains("delete-btn")) {
                deletionQueue.push(deletionAction);
                row.classList.add("marked-for-deletion");
                btn.classList.remove("delete-btn");
                btn.classList.add("undo-btn");
                btn.title = "Annuler la suppression";
                btn.innerHTML = `<i class="fas fa-undo"></i>`;
              } else if (btn.classList.contains("undo-btn")) {
                deletionQueue = deletionQueue.filter(
                  (item) => item.commentId !== commentId
                );
                row.classList.remove("marked-for-deletion");
                btn.classList.remove("undo-btn");
                btn.classList.add("delete-btn");
                btn.title = "Marquer pour suppression";
                btn.innerHTML = `<i class="fas fa-trash-alt"></i>`;
              }
              updatePendingCount();
            });
      
            (async function init() {
              if (!token) {
                window.location.href = "/admins.html";
                return;
              }
              try {
                const response = await fetch("/api/admin/comments", {
                  headers: { Authorization: `Bearer ${token}` },
                });
                if (response.status === 401) {
                  sessionStorage.removeItem("admin_token");
                  window.location.href = "/admins.html";
                  return;
                }
                if (!response.ok)
                  throw new Error(`Erreur serveur: ${response.status}`);
                const comments = await response.json();
                displayComments(comments);
              } catch (error) {
                statusElement.textContent =
                  "Erreur lors du chargement des commentaires.";
                console.error(error);
              }
            })();
          </script>
        </body>
      </html>
    -------------------------


    Fichier : package-lock.json
    ---------------------------
      {
        "name": "bigsolo-site",
        "version": "1.0.0",
        "lockfileVersion": 3,
        "requires": true,
        "packages": {
          "": {
            "name": "bigsolo-site",
            "version": "1.0.0",
            "license": "ISC",
            "dependencies": {
              "@resvg/resvg-js": "^2.6.2",
              "satori": "^0.10.13",
              "satori-html": "^0.3.2",
              "workers-og": "^0.0.27"
            }
          },
          "node_modules/@resvg/resvg-js": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js/-/resvg-js-2.6.2.tgz",
            "integrity": "sha512-xBaJish5OeGmniDj9cW5PRa/PtmuVU3ziqrbr5xJj901ZDN4TosrVaNZpEiLZAxdfnhAe7uQ7QFWfjPe9d9K2Q==",
            "engines": {
              "node": ">= 10"
            },
            "optionalDependencies": {
              "@resvg/resvg-js-android-arm-eabi": "2.6.2",
              "@resvg/resvg-js-android-arm64": "2.6.2",
              "@resvg/resvg-js-darwin-arm64": "2.6.2",
              "@resvg/resvg-js-darwin-x64": "2.6.2",
              "@resvg/resvg-js-linux-arm-gnueabihf": "2.6.2",
              "@resvg/resvg-js-linux-arm64-gnu": "2.6.2",
              "@resvg/resvg-js-linux-arm64-musl": "2.6.2",
              "@resvg/resvg-js-linux-x64-gnu": "2.6.2",
              "@resvg/resvg-js-linux-x64-musl": "2.6.2",
              "@resvg/resvg-js-win32-arm64-msvc": "2.6.2",
              "@resvg/resvg-js-win32-ia32-msvc": "2.6.2",
              "@resvg/resvg-js-win32-x64-msvc": "2.6.2"
            }
          },
          "node_modules/@resvg/resvg-js-android-arm-eabi": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-android-arm-eabi/-/resvg-js-android-arm-eabi-2.6.2.tgz",
            "integrity": "sha512-FrJibrAk6v29eabIPgcTUMPXiEz8ssrAk7TXxsiZzww9UTQ1Z5KAbFJs+Z0Ez+VZTYgnE5IQJqBcoSiMebtPHA==",
            "cpu": [
              "arm"
            ],
            "optional": true,
            "os": [
              "android"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-android-arm64": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-android-arm64/-/resvg-js-android-arm64-2.6.2.tgz",
            "integrity": "sha512-VcOKezEhm2VqzXpcIJoITuvUS/fcjIw5NA/w3tjzWyzmvoCdd+QXIqy3FBGulWdClvp4g+IfUemigrkLThSjAQ==",
            "cpu": [
              "arm64"
            ],
            "optional": true,
            "os": [
              "android"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-darwin-arm64": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-darwin-arm64/-/resvg-js-darwin-arm64-2.6.2.tgz",
            "integrity": "sha512-nmok2LnAd6nLUKI16aEB9ydMC6Lidiiq2m1nEBDR1LaaP7FGs4AJ90qDraxX+CWlVuRlvNjyYJTNv8qFjtL9+A==",
            "cpu": [
              "arm64"
            ],
            "optional": true,
            "os": [
              "darwin"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-darwin-x64": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-darwin-x64/-/resvg-js-darwin-x64-2.6.2.tgz",
            "integrity": "sha512-GInyZLjgWDfsVT6+SHxQVRwNzV0AuA1uqGsOAW+0th56J7Nh6bHHKXHBWzUrihxMetcFDmQMAX1tZ1fZDYSRsw==",
            "cpu": [
              "x64"
            ],
            "optional": true,
            "os": [
              "darwin"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-linux-arm-gnueabihf": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-arm-gnueabihf/-/resvg-js-linux-arm-gnueabihf-2.6.2.tgz",
            "integrity": "sha512-YIV3u/R9zJbpqTTNwTZM5/ocWetDKGsro0SWp70eGEM9eV2MerWyBRZnQIgzU3YBnSBQ1RcxRZvY/UxwESfZIw==",
            "cpu": [
              "arm"
            ],
            "optional": true,
            "os": [
              "linux"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-linux-arm64-gnu": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-arm64-gnu/-/resvg-js-linux-arm64-gnu-2.6.2.tgz",
            "integrity": "sha512-zc2BlJSim7YR4FZDQ8OUoJg5holYzdiYMeobb9pJuGDidGL9KZUv7SbiD4E8oZogtYY42UZEap7dqkkYuA91pg==",
            "cpu": [
              "arm64"
            ],
            "optional": true,
            "os": [
              "linux"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-linux-arm64-musl": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-arm64-musl/-/resvg-js-linux-arm64-musl-2.6.2.tgz",
            "integrity": "sha512-3h3dLPWNgSsD4lQBJPb4f+kvdOSJHa5PjTYVsWHxLUzH4IFTJUAnmuWpw4KqyQ3NA5QCyhw4TWgxk3jRkQxEKg==",
            "cpu": [
              "arm64"
            ],
            "optional": true,
            "os": [
              "linux"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-linux-x64-gnu": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-x64-gnu/-/resvg-js-linux-x64-gnu-2.6.2.tgz",
            "integrity": "sha512-IVUe+ckIerA7xMZ50duAZzwf1U7khQe2E0QpUxu5MBJNao5RqC0zwV/Zm965vw6D3gGFUl7j4m+oJjubBVoftw==",
            "cpu": [
              "x64"
            ],
            "optional": true,
            "os": [
              "linux"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-linux-x64-musl": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-x64-musl/-/resvg-js-linux-x64-musl-2.6.2.tgz",
            "integrity": "sha512-UOf83vqTzoYQO9SZ0fPl2ZIFtNIz/Rr/y+7X8XRX1ZnBYsQ/tTb+cj9TE+KHOdmlTFBxhYzVkP2lRByCzqi4jQ==",
            "cpu": [
              "x64"
            ],
            "optional": true,
            "os": [
              "linux"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-win32-arm64-msvc": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-win32-arm64-msvc/-/resvg-js-win32-arm64-msvc-2.6.2.tgz",
            "integrity": "sha512-7C/RSgCa+7vqZ7qAbItfiaAWhyRSoD4l4BQAbVDqRRsRgY+S+hgS3in0Rxr7IorKUpGE69X48q6/nOAuTJQxeQ==",
            "cpu": [
              "arm64"
            ],
            "optional": true,
            "os": [
              "win32"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-win32-ia32-msvc": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-win32-ia32-msvc/-/resvg-js-win32-ia32-msvc-2.6.2.tgz",
            "integrity": "sha512-har4aPAlvjnLcil40AC77YDIk6loMawuJwFINEM7n0pZviwMkMvjb2W5ZirsNOZY4aDbo5tLx0wNMREp5Brk+w==",
            "cpu": [
              "ia32"
            ],
            "optional": true,
            "os": [
              "win32"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-js-win32-x64-msvc": {
            "version": "2.6.2",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-js-win32-x64-msvc/-/resvg-js-win32-x64-msvc-2.6.2.tgz",
            "integrity": "sha512-ZXtYhtUr5SSaBrUDq7DiyjOFJqBVL/dOBN7N/qmi/pO0IgiWW/f/ue3nbvu9joWE5aAKDoIzy/CxsY0suwGosQ==",
            "cpu": [
              "x64"
            ],
            "optional": true,
            "os": [
              "win32"
            ],
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@resvg/resvg-wasm": {
            "version": "2.4.0",
            "resolved": "https://registry.npmjs.org/@resvg/resvg-wasm/-/resvg-wasm-2.4.0.tgz",
            "integrity": "sha512-C7c51Nn4yTxXFKvgh2txJFNweaVcfUPQxwEUFw4aWsCmfiBDJsTSwviIF8EcwjQ6k8bPyMWCl1vw4BdxE569Cg==",
            "engines": {
              "node": ">= 10"
            }
          },
          "node_modules/@shuding/opentype.js": {
            "version": "1.4.0-beta.0",
            "resolved": "https://registry.npmjs.org/@shuding/opentype.js/-/opentype.js-1.4.0-beta.0.tgz",
            "integrity": "sha512-3NgmNyH3l/Hv6EvsWJbsvpcpUba6R8IREQ83nH83cyakCw7uM1arZKNfHwv1Wz6jgqrF/j4x5ELvR6PnK9nTcA==",
            "dependencies": {
              "fflate": "^0.7.3",
              "string.prototype.codepointat": "^0.2.1"
            },
            "bin": {
              "ot": "bin/ot"
            },
            "engines": {
              "node": ">= 8.0.0"
            }
          },
          "node_modules/base64-js": {
            "version": "0.0.8",
            "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz",
            "integrity": "sha512-3XSA2cR/h/73EzlXXdU6YNycmYI7+kicTxks4eJg2g39biHR84slg2+des+p7iHYhbRg/udIS4TD53WabcOUkw==",
            "engines": {
              "node": ">= 0.4"
            }
          },
          "node_modules/camelize": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
            "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
            "funding": {
              "url": "https://github.com/sponsors/ljharb"
            }
          },
          "node_modules/color-name": {
            "version": "1.1.4",
            "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
          },
          "node_modules/css-background-parser": {
            "version": "0.1.0",
            "resolved": "https://registry.npmjs.org/css-background-parser/-/css-background-parser-0.1.0.tgz",
            "integrity": "sha512-2EZLisiZQ+7m4wwur/qiYJRniHX4K5Tc9w93MT3AS0WS1u5kaZ4FKXlOTBhOjc+CgEgPiGY+fX1yWD8UwpEqUA=="
          },
          "node_modules/css-box-shadow": {
            "version": "1.0.0-3",
            "resolved": "https://registry.npmjs.org/css-box-shadow/-/css-box-shadow-1.0.0-3.tgz",
            "integrity": "sha512-9jaqR6e7Ohds+aWwmhe6wILJ99xYQbfmK9QQB9CcMjDbTxPZjwEmUQpU91OG05Xgm8BahT5fW+svbsQGjS/zPg=="
          },
          "node_modules/css-color-keywords": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
            "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
            "engines": {
              "node": ">=4"
            }
          },
          "node_modules/css-gradient-parser": {
            "version": "0.0.16",
            "resolved": "https://registry.npmjs.org/css-gradient-parser/-/css-gradient-parser-0.0.16.tgz",
            "integrity": "sha512-3O5QdqgFRUbXvK1x5INf1YkBz1UKSWqrd63vWsum8MNHDBYD5urm3QtxZbKU259OrEXNM26lP/MPY3d1IGkBgA==",
            "engines": {
              "node": ">=16"
            }
          },
          "node_modules/css-to-react-native": {
            "version": "3.2.0",
            "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
            "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
            "dependencies": {
              "camelize": "^1.0.0",
              "css-color-keywords": "^1.0.0",
              "postcss-value-parser": "^4.0.2"
            }
          },
          "node_modules/emoji-regex": {
            "version": "10.4.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
            "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw=="
          },
          "node_modules/emoji-regex-xs": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/emoji-regex-xs/-/emoji-regex-xs-2.0.1.tgz",
            "integrity": "sha512-1QFuh8l7LqUcKe24LsPUNzjrzJQ7pgRwp1QMcZ5MX6mFplk2zQ08NVCM84++1cveaUUYtcCYHmeFEuNg16sU4g==",
            "engines": {
              "node": ">=10.0.0"
            }
          },
          "node_modules/escape-html": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
            "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
          },
          "node_modules/fflate": {
            "version": "0.7.4",
            "resolved": "https://registry.npmjs.org/fflate/-/fflate-0.7.4.tgz",
            "integrity": "sha512-5u2V/CDW15QM1XbbgS+0DfPxVB+jUKhWEKuuFuHncbk3tEEqzmoXL+2KyOFuKGqOnmdIy0/davWF1CkuwtibCw=="
          },
          "node_modules/hex-rgb": {
            "version": "4.3.0",
            "resolved": "https://registry.npmjs.org/hex-rgb/-/hex-rgb-4.3.0.tgz",
            "integrity": "sha512-Ox1pJVrDCyGHMG9CFg1tmrRUMRPRsAWYc/PinY0XzJU4K7y7vjNoLKIQ7BR5UJMCxNN8EM1MNDmHWA/B3aZUuw==",
            "engines": {
              "node": ">=6"
            },
            "funding": {
              "url": "https://github.com/sponsors/sindresorhus"
            }
          },
          "node_modules/just-camel-case": {
            "version": "6.2.0",
            "resolved": "https://registry.npmjs.org/just-camel-case/-/just-camel-case-6.2.0.tgz",
            "integrity": "sha512-ICenRLXwkQYLk3UyvLQZ+uKuwFVJ3JHFYFn7F2782G2Mv2hW8WPePqgdhpnjGaqkYtSVWnyCESZhGXUmY3/bEg=="
          },
          "node_modules/linebreak": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/linebreak/-/linebreak-1.1.0.tgz",
            "integrity": "sha512-MHp03UImeVhB7XZtjd0E4n6+3xr5Dq/9xI/5FptGk5FrbDR3zagPa2DS6U8ks/3HjbKWG9Q1M2ufOzxV2qLYSQ==",
            "dependencies": {
              "base64-js": "0.0.8",
              "unicode-trie": "^2.0.0"
            }
          },
          "node_modules/pako": {
            "version": "0.2.9",
            "resolved": "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz",
            "integrity": "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA=="
          },
          "node_modules/parse-css-color": {
            "version": "0.2.1",
            "resolved": "https://registry.npmjs.org/parse-css-color/-/parse-css-color-0.2.1.tgz",
            "integrity": "sha512-bwS/GGIFV3b6KS4uwpzCFj4w297Yl3uqnSgIPsoQkx7GMLROXfMnWvxfNkL0oh8HVhZA4hvJoEoEIqonfJ3BWg==",
            "dependencies": {
              "color-name": "^1.1.4",
              "hex-rgb": "^4.1.0"
            }
          },
          "node_modules/postcss-value-parser": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
            "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
          },
          "node_modules/satori": {
            "version": "0.10.14",
            "resolved": "https://registry.npmjs.org/satori/-/satori-0.10.14.tgz",
            "integrity": "sha512-abovcqmwl97WKioxpkfuMeZmndB1TuDFY/R+FymrZyiGP+pMYomvgSzVPnbNMWHHESOPosVHGL352oFbdAnJcA==",
            "dependencies": {
              "@shuding/opentype.js": "1.4.0-beta.0",
              "css-background-parser": "^0.1.0",
              "css-box-shadow": "1.0.0-3",
              "css-to-react-native": "^3.0.0",
              "emoji-regex": "^10.2.1",
              "escape-html": "^1.0.3",
              "linebreak": "^1.1.0",
              "parse-css-color": "^0.2.1",
              "postcss-value-parser": "^4.2.0",
              "yoga-wasm-web": "^0.3.3"
            },
            "engines": {
              "node": ">=16"
            }
          },
          "node_modules/satori-html": {
            "version": "0.3.2",
            "resolved": "https://registry.npmjs.org/satori-html/-/satori-html-0.3.2.tgz",
            "integrity": "sha512-wjTh14iqADFKDK80e51/98MplTGfxz2RmIzh0GqShlf4a67+BooLywF17TvJPD6phO0Hxm7Mf1N5LtRYvdkYRA==",
            "dependencies": {
              "ultrahtml": "^1.2.0"
            }
          },
          "node_modules/string.prototype.codepointat": {
            "version": "0.2.1",
            "resolved": "https://registry.npmjs.org/string.prototype.codepointat/-/string.prototype.codepointat-0.2.1.tgz",
            "integrity": "sha512-2cBVCj6I4IOvEnjgO/hWqXjqBGsY+zwPmHl12Srk9IXSZ56Jwwmy+66XO5Iut/oQVR7t5ihYdLB0GMa4alEUcg=="
          },
          "node_modules/tiny-inflate": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz",
            "integrity": "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw=="
          },
          "node_modules/ultrahtml": {
            "version": "1.6.0",
            "resolved": "https://registry.npmjs.org/ultrahtml/-/ultrahtml-1.6.0.tgz",
            "integrity": "sha512-R9fBn90VTJrqqLDwyMph+HGne8eqY1iPfYhPzZrvKpIfwkWZbcYlfpsb8B9dTvBfpy1/hqAD7Wi8EKfP9e8zdw=="
          },
          "node_modules/unicode-trie": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
            "integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
            "dependencies": {
              "pako": "^0.2.5",
              "tiny-inflate": "^1.0.0"
            }
          },
          "node_modules/workers-og": {
            "version": "0.0.27",
            "resolved": "https://registry.npmjs.org/workers-og/-/workers-og-0.0.27.tgz",
            "integrity": "sha512-QvwptQ0twmouQHiITUi3kYxEPCLdueC/U4msQ2xMz2iktd+iseSs7zlREw3T1dAsPxPw73FQlw8cXFsfANZPlw==",
            "dependencies": {
              "@resvg/resvg-wasm": "2.4.0",
              "just-camel-case": "^6.2.0",
              "satori": "^0.15.2",
              "yoga-wasm-web": "0.3.3"
            }
          },
          "node_modules/workers-og/node_modules/satori": {
            "version": "0.15.2",
            "resolved": "https://registry.npmjs.org/satori/-/satori-0.15.2.tgz",
            "integrity": "sha512-vu/49vdc8MzV5jUchs3TIRDCOkOvMc1iJ11MrZvhg9tE4ziKIEIBjBZvies6a9sfM2vQ2gc3dXeu6rCK7AztHA==",
            "dependencies": {
              "@shuding/opentype.js": "1.4.0-beta.0",
              "css-background-parser": "^0.1.0",
              "css-box-shadow": "1.0.0-3",
              "css-gradient-parser": "^0.0.16",
              "css-to-react-native": "^3.0.0",
              "emoji-regex-xs": "^2.0.1",
              "escape-html": "^1.0.3",
              "linebreak": "^1.1.0",
              "parse-css-color": "^0.2.1",
              "postcss-value-parser": "^4.2.0",
              "yoga-wasm-web": "^0.3.3"
            },
            "engines": {
              "node": ">=16"
            }
          },
          "node_modules/yoga-wasm-web": {
            "version": "0.3.3",
            "resolved": "https://registry.npmjs.org/yoga-wasm-web/-/yoga-wasm-web-0.3.3.tgz",
            "integrity": "sha512-N+d4UJSJbt/R3wqY7Coqs5pcV0aUj2j9IaQ3rNj9bVCLld8tTGKRa2USARjnvZJWVx1NDmQev8EknoczaOQDOA=="
          }
        }
      }
    ---------------------------


    Fichier : package.json
    ----------------------
      {
        "name": "bigsolo-site",
        "description": "Le site de Big_Herooooo pour les sorties de Big_Herooooo",
        "version": "1.0.0",
        "main": "index.js",
        "type": "module",
        "scripts": {
          "test": "echo \"Error: no test specified\" && exit 1",
          "generate-og": "node generate-og-images.js"
        },
        "keywords": [],
        "author": "",
        "license": "ISC",
        "dependencies": {
          "@resvg/resvg-js": "^2.6.2",
          "satori": "^0.10.13",
          "satori-html": "^0.3.2",
          "workers-og": "^0.0.27"
        }
      }
    ----------------------


    Fichier : presentation.html
    ---------------------------
      <!DOCTYPE html>
      <html lang="fr">
      <head>
          <script>
            (function () {
              try {
                var theme = localStorage.getItem('mv-theme');
                var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                var htmlEl = document.documentElement;
                if (theme === 'dark' || (!theme && prefersDark)) {
                  htmlEl.classList.add('dark');
                  htmlEl.style.backgroundColor = '#15171a';
                  htmlEl.style.color = '#eceff4';
                } else {
                  htmlEl.classList.remove('dark');
                  htmlEl.style.backgroundColor = '#f7f8fc';
                  htmlEl.style.color = '#222831';
                }
              } catch (e) { }
            })();
          </script>
          <meta charset="UTF-8" />
      
          <!-- ↓↓↓ SECTION GÉRÉE PAR LE MIDDLEWARE ↓↓↓ -->
          <meta property="og:type" content="website" />
          <meta name="twitter:card" content="summary_large_image" />
          <!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->
          <!-- ↑↑↑ FIN DE LA SECTION ↑↑↑ -->
      
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap"
            rel="stylesheet" />
          <link rel="icon" type="image/png" href="img/icon.png" />
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
            integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw=="
            crossorigin="anonymous" referrerpolicy="no-referrer" />
        
          <link rel="stylesheet" href="css/style.css" />
          <link rel="stylesheet" href="css/layout.css" />
          <link rel="stylesheet" href="/css/components/header.css" />
          <link rel="stylesheet" href="/css/components/mobile-menu.css" />
          <link rel="stylesheet" href="/css/components/general.css" />
          <link rel="stylesheet" href="/css/components/cards.css" />
          <link rel="stylesheet" href="/css/components/carousel.css" />
          <link rel="stylesheet" href="/css/components/gallery-lightbox.css" />
          <link rel="stylesheet" href="/css/components/accordion.css" />
          <link rel="stylesheet" href="css/emojis.css" />
          <link rel="stylesheet" href="css/pages/presentation.css" />
        
          <script src="js/theme-init.js"></script>
      </head>
      <body id="presentationpage">
          <header id="main-header"></header>
          <div class="mobile-menu-overlay" id="main-mobile-menu-overlay"></div>
        
          <main>
            <section class="presentation-section aesthetic-option-1">
              <div class="presentation-page-header">
                <img src="img/profil.png" alt="Photo de profil de BigSolo" class="profile-pic page-header-profile-pic">
                <div class="page-header-text">
                  <h1 class="page-main-title">BigSolo : L'interview<span class="custom-emoji emoji-george"></span></h1>
                  <p class="page-subtitle">Plongez au cœur de mon parcours et de mes passions.</p>
                </div>
              </div>
        
              <div class="qa-dynamic-container" id="qaContainer">
              </div>
            </section>
          </main>
        
          <script src="js/pages/presentation.js" type="module"></script>
          <script src="js/index.js" type="module"></script>
      </body>
      </html>
    ---------------------------


    Fichier : series-covers.html
    ----------------------------
      <!DOCTYPE html>
      <html lang="fr">
      <head>
          <script>
            (function () { 
              try {
                var theme = localStorage.getItem('mv-theme');
                var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                var htmlEl = document.documentElement;
                if (theme === 'dark' || (!theme && prefersDark)) {
                  htmlEl.classList.add('dark');
                  htmlEl.style.backgroundColor = '#15171a'; htmlEl.style.color = '#eceff4';
                } else {
                  htmlEl.classList.remove('dark');
                  htmlEl.style.backgroundColor = '#f7f8fc'; htmlEl.style.color = '#222831';
                }
              } catch (e) { }
            })();
          </script>
          <meta charset="UTF-8" />
      
          <!-- ↓↓↓ SECTION GÉRÉE PAR LE MIDDLEWARE ↓↓↓ -->
          <meta property="og:type" content="website" />
          <meta name="twitter:card" content="summary_large_image" />
          <!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->
          <!-- ↑↑↑ FIN DE LA SECTION ↑↑↑ -->
      
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet" />
          <link rel="icon" type="image/png" href="/img/icon.png" />
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        
          <link rel="stylesheet" href="/css/style.css" />
          <link rel="stylesheet" href="/css/layout.css" />
          <link rel="stylesheet" href="/css/components/header.css" />
          <link rel="stylesheet" href="/css/components/mobile-menu.css" />
          <link rel="stylesheet" href="/css/components/general.css" />
          <link rel="stylesheet" href="/css/components/cards.css" />
          <link rel="stylesheet" href="/css/components/carousel.css" />
          <link rel="stylesheet" href="/css/components/gallery-lightbox.css" />
          <link rel="stylesheet" href="/css/components/accordion.css" />
          <link rel="stylesheet" href="/css/pages/series-covers.css" />
        
          <script src="/js/theme-init.js"></script>
      </head>
      <body id="seriescoverspage">
          <header id="main-header"></header>
          <div class="mobile-menu-overlay" id="main-mobile-menu-overlay"></div>
        
          <main>
            <section id="covers-gallery-section">
              <h1 class="covers-gallery-title page-title section-title">Galerie des Couvertures</h1>
              <div class="covers-grid">
                <p class="loading-message">Chargement des couvertures...</p>
              </div>
            </section>
        
            <div id="lightbox-modal" class="lightbox-modal" style="display: none;">
              <span class="lightbox-close">×</span>
              <div class="lightbox-content-wrapper">
                  <div class="lightbox-image-container">
                      <img id="lightbox-img" src="" alt="Couverture agrandie">
                  </div>
              </div>
              <div class="lightbox-caption" id="lightbox-caption-text">Volume X</div>
              <a class="lightbox-prev" title="Précédent" style="display: none;">❮</a>
              <a class="lightbox-next" title="Suivant" style="display: none;">❯</a>
            </div>
          </main>
        
          <script src="/js/index.js" type="module"></script>
      </body>
      </html>
    ----------------------------


    Fichier : series-detail.html
    ----------------------------
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <script>
            (function () {
              try {
                var theme = localStorage.getItem("mv-theme");
                var prefersDark = window.matchMedia(
                  "(prefers-color-scheme: dark)"
                ).matches;
                var htmlEl = document.documentElement;
                if (theme === "dark" || (!theme && prefersDark)) {
                  htmlEl.classList.add("dark");
                  htmlEl.style.backgroundColor = "#15171a";
                  htmlEl.style.color = "#eceff4";
                } else {
                  htmlEl.classList.remove("dark");
                  htmlEl.style.backgroundColor = "#f7f8fc";
                  htmlEl.style.color = "#222831";
                }
              } catch (e) {}
            })();
          </script>
          <meta charset="UTF-8" />
      
          <!-- ↓↓↓ SECTION GÉRÉE PAR LE MIDDLEWARE ↓↓↓ -->
          <meta property="og:type" content="website" />
          <meta name="twitter:card" content="summary_large_image" />
          <!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->
          <!-- ↑↑↑ FIN DE LA SECTION ↑↑↑ -->
      
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap"
            rel="stylesheet"
          />
          <link rel="icon" type="image/png" href="/img/icon.png" />
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
            integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
          />
      
          <link rel="stylesheet" href="/css/style.css" />
          <link rel="stylesheet" href="/css/layout.css" />
          <link rel="stylesheet" href="/css/components/header.css" />
          <link rel="stylesheet" href="/css/components/mobile-menu.css" />
          <link rel="stylesheet" href="/css/components/general.css" />
          <link rel="stylesheet" href="/css/components/cards.css" />
          <link rel="stylesheet" href="/css/components/carousel.css" />
          <link rel="stylesheet" href="/css/components/gallery-lightbox.css" />
          <link rel="stylesheet" href="/css/components/accordion.css" />
          <link rel="stylesheet" href="/css/pages/series-list.css" />
      
          <script src="/js/theme-init.js"></script>
        </head>
      
        <body id="seriesdetailpage">
          <header id="main-header"></header>
          <div class="mobile-menu-overlay" id="main-mobile-menu-overlay"></div>
      
          <main id="series-detail-main">
            <p class="loading-message">Chargement...</p>
          </main>
      
          <!-- NOUVELLE LIGNE : Placeholder pour les données de la série -->
          <script id="series-data-placeholder" type="application/json">
            <!-- SERIES_DATA_PLACEHOLDER -->
          </script>
      
          <script src="/js/index.js" type="module"></script>
        </body>
      </html>
    ----------------------------


    Fichier : wrangler.toml
    -----------------------
      name = "bigsolo-functions"
      compatibility_date = "2025-07-13"
      
      [[kv_namespaces]]
      binding = "IMG_CHEST_CACHE"
      id = "24632818ff5d495e8ec68eb26dd49136"
      
      [[kv_namespaces]]
      binding = "INTERACTIONS_LOG"
      id = "9bd6247311a141c58512bffb5e133311"
      
      [[kv_namespaces]]
      binding = "INTERACTIONS_CACHE"
      id = "0653d72f16bb45adb5155e2ea69e5031"
      
      [vars]
      ADMIN_USERNAME = ""
      ADMIN_PASSWORD = ""
      ADMIN_TOKEN = ""
    -----------------------

    Dossier : css/

        Fichier : emojis.css
        --------------------
          .custom-emoji {
            display: inline-block;
            width: 1.2em;
            height: 1.2em;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            margin-left: 0.3em;
            vertical-align: -0.15em;
          }
          
          .custom-emoji.emoji-ptn {
            background-image: url('../img/emojis/ptn.png'); 
          }
          
          .custom-emoji.emoji-blush {
            background-image: url('../img/emojis/blush.png'); 
          }
          
          .custom-emoji.emoji-bocchibruh {
            background-image: url('../img/emojis/bocchibruh.png'); 
          }
          
          .custom-emoji.emoji-george {
            background-image: url('../img/emojis/george.png'); 
          }
          
          .custom-emoji.emoji-hype {
            background-image: url('../img/emojis/hype.png'); 
          }
          
          .custom-emoji.emoji-kaorukoeating {
            background-image: url('../img/emojis/kaorukoeating.png'); 
          }
          
          .custom-emoji.emoji-shrug {
            background-image: url('../img/emojis/shrug.png'); 
          }
          
          .custom-emoji.emoji-stonk {
            background-image: url('../img/emojis/stonk.png'); 
          }
          
          .presentation-section .section-title .custom-emoji {
            vertical-align: middle;
          }
        --------------------


        Fichier : layout.css
        --------------------
          header#main-header {
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            background: rgba(255, 255, 255, 0.55);
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
            position: sticky;
            top: 0;
            left: 0;
            right: 0;
            z-index: 500;
            min-height: 60px;
          }
          
          body.dark header#main-header {
            background: rgba(var(--clr-bg-rgb-val), 0.6);
            border-bottom: 1px solid rgba(255, 255, 255, 0.06);
          }
          
          .header-container {
            padding: 0;
            /* padding géré par .header-logo-center et .header-actions */
            display: flex;
            align-items: center;
            justify-content: space-between;
            height: auto;
          }
          
          .header-left-group {
            display: flex;
            align-items: center;
            gap: 5rem;
          }
          
          .header-actions {
            flex: 0 0 auto;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 14.5rem;
            gap: 0.8rem;
          }
          
          .mobile-menu-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(3px);
            -webkit-backdrop-filter: blur(3px);
            z-index: 999;
            opacity: 0;
            pointer-events: none;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
          }
          
          .mobile-menu-overlay.open {
            opacity: 1;
            pointer-events: auto;
            visibility: visible;
          }
          
          @media (min-width: 769px) {
            main > section:not(.full-width) {
              padding-left: 16rem;
              padding-right: 16rem;
            }
          }
          
          section {
            margin-bottom: 3.5rem;
          }
          
          .series-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
            gap: 20px;
            justify-content: start;
          }
          
          .gallery-grid {
            width: 100%;
          }
          
          .carousel-container {
            position: relative;
            overflow: hidden;
            margin-bottom: 2rem;
          }
          
          .carousel-track {
            display: flex;
            gap: 1rem;
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            padding: 0 5%;
            cursor: grab;
          }
          
          .carousel-track.active {
            cursor: grabbing;
          }
          
          .carousel-track::-webkit-scrollbar {
            display: none;
          }
          
          .carousel-track {
            -ms-overflow-style: none;
            scrollbar-width: none;
          }
          
          @media (max-width: 1240px) {
            .header-left-group {
              gap: 0.8rem;
            }
          }
          
          @media (max-width: 768px) {
            .header-container {
              padding: 0.6rem 5%;
            }
          
            header#main-header {
              min-height: 55px;
            }
          
            main {
              padding: 0 15px 15px 15px;
            }
          
            section {
              margin-top: 1.5rem;
              margin-bottom: 1.5rem;
            }
          
            .carousel-track {
              padding: 0 4%;
              scroll-padding-left: 4%;
              scroll-padding-right: 4%;
            }
          
            .series-grid {
              grid-template-columns: 1fr;
              gap: 20px;
            }
          }
        --------------------


        Fichier : style.css
        -------------------
          html {
            background-color: #e9ecef !important;
            color: #222831 !important;
          }
          
          html.dark {
            background-color: #111 !important;
            color: #eceff4 !important;
            color-scheme: dark;
          }
          
          :root {
            --iclr-bg-light: #e9ecef;
            --iclr-bg-dark: #111;
            --iclr-bg-card-light: #ffffff;
            --iclr-bg-card-dark: #1b1c1e;
            --iclr-text-light: #222329;
            --iclr-text-dark: #eff2f6;
            --iclr-text-sub-light: #4d4c52;
            --iclr-text-sub-dark: #d2d6db;
            --iclr-text-fifth-light: #7f7f80;
            --iclr-text-fifth-dark: #807f7f;
            --iclr-background-reader-light: #e9ecef;
            --iclr-background-reader-dark: #111111;
            --iclr-primary-light: #0095ad;
            --iclr-primary-dark: #1ab6b9;
            --iclr-accent-light: #ff6b6b;
            --iclr-accent-dark: #ff7f7f;
          
            /* Main Light */
            --clr-bg: var(--iclr-bg-light);
            --clr-bg-rgb: 247, 248, 252;
            --clr-bg-card: var(--iclr-bg-card-light);
            --clr-bg-card-rgb: 255, 255, 255;
            --clr-text: var(--iclr-text-light);
            --clr-text-rgb: 34, 40, 49;
            --clr-text-sub: var(--iclr-text-sub-light);
            --clr-text-sub-rgb: 112, 116, 123;
            --clr-text-fifth: var(--iclr-text-fifth-light);
            --clr-text-fifth-rgb: 128, 127, 127;
            --clr-bg-reader: var(--iclr-background-reader-light);
            --clr-bg-reader-rgb: 247, 248, 252;
            --clr-primary: var(--iclr-primary-light);
            --clr-primary-rgb: 0, 149, 173;
            --clr-accent: var(--iclr-accent-light);
            --clr-accent-rgb: 255, 107, 107;
            --clr-bg-rgb-val: 247, 248, 252;
          
            /* Invert Light */
            --clr-bg-invert: var(--iclr-bg-dark);
            --clr-bg-invert-rgb: 21, 23, 26;
            --clr-bg-card-invert: var(--iclr-bg-card-dark);
            --clr-bg-card-invert-rgb: 27, 28, 30;
            --clr-text-invert: var(--iclr-text-dark);
            --clr-text-invert-rgb: 236, 239, 244;
            --clr-text-sub-invert: var(--iclr-text-sub-dark);
            --clr-text-sub-invert-rgb: 210, 214, 219;
            --clr-text-fifth-invert: var(--iclr-text-fifth-dark);
            --clr-text-fifth-invert-rgb: 128, 127, 127;
            --clr-bg-reader-invert: var(--iclr-background-reader-dark);
            --clr-bg-reader-invert-rgb: 17, 17, 17;
            --clr-primary-invert: var(--iclr-primary-dark);
            --clr-primary-invert-rgb: 26, 182, 185;
            --clr-accent-invert: var(--iclr-accent-dark);
            --clr-accent-invert-rgb: 255, 127, 127;
            --clr-bg-invert-rgb-val: 21, 23, 26;
          
            --series-fixed-cover-width-desktop: 180px;
            --series-fixed-cover-width-mobile: 120px;
            --mobile-carousel-card-aspect-ratio: 1.8;
          }
          
          html.dark:root,
          body.dark {
            /* Main Dark */
            --clr-bg: var(--iclr-bg-dark);
            --clr-bg-rgb: 21, 23, 26;
            --clr-bg-card: var(--iclr-bg-card-dark);
            --clr-bg-card-rgb: 27, 28, 30;
            --clr-text: var(--iclr-text-dark);
            --clr-text-rgb: 236, 239, 244;
            --clr-text-sub: var(--iclr-text-sub-dark);
            --clr-text-sub-rgb: 210, 214, 219;
            --clr-text-fifth: var(--iclr-text-fifth-dark);
            --clr-text-fifth-rgb: 128, 127, 127;
            --clr-bg-reader: var(--iclr-background-reader-dark);
            --clr-bg-reader-rgb: 17, 17, 17;
            --clr-primary: var(--iclr-primary-dark);
            --clr-primary-rgb: 26, 182, 185;
            --clr-accent: var(--iclr-accent-dark);
            --clr-accent-rgb: 255, 127, 127;
            --clr-bg-rgb-val: 21, 23, 26;
          
            /* Invert Dark */
            --clr-bg-invert: var(--iclr-bg-light);
            --clr-bg-invert-rgb: 247, 248, 252;
            --clr-bg-card-invert: var(--iclr-bg-card-light);
            --clr-bg-card-invert-rgb: 255, 255, 255;
            --clr-text-invert: var(--iclr-text-light);
            --clr-text-invert-rgb: 34, 40, 49;
            --clr-text-sub-invert: var(--iclr-text-sub-light);
            --clr-text-sub-invert-rgb: 112, 116, 123;
            --clr-text-fifth-invert: var(--iclr-text-fifth-light);
            --clr-text-fifth-invert-rgb: 128, 127, 127;
            --clr-bg-reader-invert: var(--iclr-background-reader-light);
            --clr-bg-reader-invert-rgb: 247, 248, 252;
            --clr-primary-invert: var(--iclr-primary-light);
            --clr-primary-invert-rgb: 0, 149, 173;
            --clr-accent-invert: var(--iclr-accent-light);
            --clr-accent-invert-rgb: 255, 107, 107;
            --clr-bg-invert-rgb-val: 247, 248, 252;
          }
          
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            transition: background 0.3s ease, color 0.3s ease, border-color 0.3s ease,
              transform 0.3s ease, opacity 0.3s ease, filter 0.3s ease;
          }
          
          html {
            scroll-behavior: smooth;
          }
          
          body {
            font-family: "Urbanist", system-ui, sans-serif;
            background-color: var(--clr-bg);
            color: var(--clr-text);
            overflow-x: hidden;
            line-height: 1.55;
          }
          
          /* --- AJOUT POUR LE LECTEUR --- */
          body#readerpage {
            /* Empêche le scroll de la page principale quand le lecteur est ouvert */
            overflow: hidden;
          }
          
          img {
            display: block;
            max-width: 100%;
            height: auto;
          }
          
          .chapter-card,
          .series-card,
          .section-title,
          .presentation-content,
          .profile-pic,
          .gallery-controls,
          .series-detail-container,
          .colo-card {
            transform: translateY(20px);
            opacity: 0;
          }
          
          img.lazy-load-gallery[src*="placeholder_preview.png"] {
            opacity: 0.3;
          }
          
          img.lazy-load-gallery.image-loaded-fade-in {
            opacity: 1;
          }
          
          button,
          input,
          select,
          textarea {
            font-family: inherit;
          }
        -------------------

        Dossier : components/

            Fichier : accordion.css
            -----------------------
              /* css/components/accordion.css */
              
              .chapters-accordion-container {
                border: 1px solid rgba(var(--clr-text-rgb), 0.1);
                border-radius: 10px;
                overflow: hidden;
              }
              
              body.dark .chapters-accordion-container {
                border-color: rgba(var(--clr-text-rgb), 0.1);
              }
              
              .volume-header {
                background: rgba(var(--clr-primary-rgb), 0.03);
                padding: 0.8rem 1.2rem;
                border-bottom: 1px solid rgba(var(--clr-text-rgb), 0.1);
                display: flex;
                justify-content: space-between;
                align-items: center;
                cursor: pointer;
                font-weight: 700;
                font-size: 1.1rem;
                color: var(--clr-text);
                transition: background 0.2s ease;
              }
              
              body.dark .volume-header {
                background-color: rgba(var(--clr-primary-rgb), 0.05);
                border-color: rgba(var(--clr-text-rgb), 0.1);
              }
              
              .volume-group:last-child .volume-header {
                border-bottom: none;
              }
              
              .volume-header:hover {
                background: rgba(var(--clr-primary-rgb), 0.08);
              }
              
              .volume-header h4 {
                margin: 0;
                flex-shrink: 0;
              }
              
              .volume-release-date {
                color: var(--clr-text-sub);
                font-weight: 600;
              }
              
              .volume-license-text {
                font-size: 0.9em;
                font-weight: 600;
                color: var(--clr-text-sub);
                overflow: hidden;
                text-overflow: ellipsis;
              }
              
              .volume-license-link {
                color: var(--clr-primary);
                text-decoration: none;
                white-space: nowrap;
                font-weight: 600;
              }
              
              .volume-license-link:hover {
                text-decoration: underline;
                color: rgba(var(--clr-primary-rgb), 0.8);
              }
              
              .volume-arrow {
                font-size: 0.9em;
                flex-shrink: 0;
                margin-left: 1rem;
                transition: transform 0.3s ease;
              }
              
              .volume-arrow.rotated {
                transform: rotate(180deg);
              }
              
              .volume-chapters-list {
                background: var(--clr-bg-card);
                max-height: 0;
                overflow: hidden;
                transition: max-height 0.4s ease-out;
                display: flex;
                flex-direction: column;
              }
              
              .detail-chapter-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 1rem;
                cursor: pointer;
                transition: background 0.2s ease, transform 0.2s ease;
                border-bottom: 1px solid rgba(var(--clr-text-rgb), 0.05);
                text-decoration: none;
              }
              
              body.dark .detail-chapter-item {
                border-bottom-color: rgba(var(--clr-text-rgb), 0.08);
              }
              
              .licensed-chapter-item {
                filter: blur(1.5px);
                pointer-events: none;
                opacity: 0.7;
              }
              
              .detail-chapter-item.licensed-chapter-item .detail-chapter-likes[data-like-count="0"],
              .detail-chapter-item.licensed-chapter-item .detail-chapter-comments[data-comment-count="0"] {
                display: none;
              }
              
              .detail-chapter-item:hover:not(.licensed-chapter-item) {
                background: rgba(var(--clr-primary-rgb), 0.08);
              }
              
              .detail-chapter-item:hover:not(.licensed-chapter-item) .chapter-main-info {
                transform: translateX(5px);
              }
              
              .chapter-main-info {
                display: flex;
                align-items: center;
                flex-grow: 1;
                gap: 0.5rem;
                overflow: hidden;
              }
              
              .chapter-side-info {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                flex-shrink: 0;
              }
              
              .detail-chapter-number {
                font-weight: 600;
                color: var(--clr-primary);
                flex-shrink: 0;
                white-space: nowrap;
              }
              
              .detail-chapter-title {
                flex-grow: 1;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                margin: 0;
                color: var(--clr-text);
              }
              
              .detail-chapter-collab {
                font-size: 0.8rem;
                color: var(--clr-text-sub);
                white-space: nowrap;
                flex-shrink: 0;
              }
              
              .detail-chapter-date {
                color: var(--clr-text-sub);
                font-size: 0.8rem;
                flex-shrink: 0;
                white-space: nowrap;
                text-align: right;
              }
              
              /* --- Media Queries --- */
              @media (max-width: 768px) {
                  .volume-header {
                    padding: .7rem .8rem;
                    font-size: 1rem;
                  }
                
                  .volume-license-text {
                    font-size: .8em;
                    display: block;
                  }
                
                  .volume-chapters-list .detail-chapter-item {
                    padding: .6rem;
                    padding-left: .8rem;
                    font-size: .8rem;
                    flex-direction: column;
                    align-items: flex-start;
                  }
                
                  .detail-chapter-collab,
                  .detail-chapter-date {
                    font-size: .75rem;
                  }
              
                  .detail-chapter-date {
                    margin-left: auto;
                  }
              }
            -----------------------


            Fichier : cards.css
            -------------------
              /* css/components/cards.css */
              
              /* --- Chapter Card Styles --- */
              .chapter-card {
                position: relative;
                border-radius: 14px;
                overflow: hidden;
                cursor: pointer;
                background: var(--clr-bg-card);
                box-shadow: 0 12px 28px rgba(0, 0, 0, 0.07);
                flex-shrink: 0;
                width: 300px;
                aspect-ratio: 2717 / 4063;
                scroll-snap-align: start;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                /* Styles pour la balise <a> */
                display: block;
                color: inherit;
                text-decoration: none;
              }
              
              .chapter-card:hover {
                transform: translateY(-10px) scale(1.02);
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
              }
              
              .chapter-card .chapter-cover {
                height: 100%;
                overflow: hidden;
              }
              
              .chapter-card .chapter-cover img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                transition: transform 0.3s ease;
              }
              
              .chapter-card:hover .chapter-cover img {
                transform: scale(1.07);
              }
              
              .chapter-card .chapter-info {
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                background: rgba(0, 0, 0, 0.6);
                backdrop-filter: blur(4px);
                padding: 1rem;
                color: #fff;
                transition: background 0.35s ease;
                line-height: 1.4;
                overflow: hidden;
              }
              
              .chapter-card .chapter-time {
                position: absolute;
                bottom: 1.1rem;
                right: 1rem;
                font-size: 0.85rem;
                color: #ddd;
                display: flex;
                align-items: center;
                gap: 0.3rem;
              }
              
              .chapter-card .manga-title,
              .chapter-card .chapter-title,
              .chapter-card .chapter-number {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                display: block;
              }
              
              .chapter-card .manga-title {
                font-size: 1.1rem;
                font-weight: 700;
                margin-bottom: 0.1rem;
              }
              
              .chapter-card .chapter-number {
                font-size: 0.95rem;
                font-weight: 600;
                color: var(--clr-accent);
                margin-bottom: 0.1rem;
              }
              
              .chapter-card .chapter-title {
                font-size: 0.85rem;
                color: #ddd;
                margin-bottom: 0.1rem;
              }
              
              .new-badge {
                position: absolute;
                top: 12px;
                left: 12px;
                background: rgba(var(--clr-accent-rgb), 0.7);
                backdrop-filter: blur(4px);
                -webkit-backdrop-filter: blur(4px);
                color: #fff;
                padding: 0.4rem 0.9rem;
                font-size: 0.75rem;
                font-weight: 700;
                border-radius: 999px;
              }
              
              /* --- Correction du layout grid pour éviter les gros vides --- */
              .series-grid {
                display: flex;
                flex-wrap: wrap;
                gap: 2rem;
                align-items: flex-start;
              }
              
              .series-card {
                flex: 1 1 240px;
                max-width: 240px;
                min-width: 220px;
                margin: 0;
                position: relative;
                width: 240px;
                height: 350px;
                border-radius: 10px;
                overflow: hidden;
                background: #222;
                box-shadow: 0 8px 24px rgba(0, 0, 0, 0.13);
                display: flex;
                flex-direction: column;
                justify-content: flex-end;
                cursor: pointer;
                transition:
                  transform 0.6s cubic-bezier(.4, 1, .3, 1),
                  box-shadow 0.6s cubic-bezier(.4, 1, .3, 1);
                background-size: cover;
                background-position: center;
                z-index: 1;
              }
              
              .series-card::before {
                content: "";
                position: absolute;
                left: 0;
                right: 0;
                bottom: 0;
                width: 100%;
                height: 52%;
                background: linear-gradient(to top,
                    rgba(0, 0, 0, 0.7) 0%,
                    rgba(0, 0, 0, 0.4) 50%,
                    transparent 100%);
                z-index: 2;
                transition: height 0.6s cubic-bezier(.4, 1, .3, 1);
                pointer-events: none;
              }
              
              .series-card:hover {
                transform: translateY(-12px) scale(1.025);
                box-shadow: 0 18px 40px rgba(0, 0, 0, 0.22);
              }
              
              .series-card:hover::before {
                height: 85%;
              }
              
              .series-card .series-content {
                position: relative;
                z-index: 3;
                padding: 1.3rem 1.1rem 1.1rem 1.1rem;
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                color: #fff;
                width: 100%;
              }
              
              .series-card .series-title {
                font-size: 1.35rem;
                font-weight: 800;
                color: #fff;
                text-shadow: 0 2px 12px rgba(0, 0, 0, 0.35);
                letter-spacing: 0.01em;
                line-height: 1.18;
                transition: color 0.2s;
              }
              
              .series-card .series-extra {
                width: 100%;
                opacity: 0;
                max-height: 0;
                overflow: hidden;
                transition:
                  opacity 0.6s cubic-bezier(.4, 1, .3, 1),
                  max-height 0.6s cubic-bezier(.4, 1, .3, 1);
                display: flex;
                flex-direction: column;
                gap: 0.9rem;
                pointer-events: none;
              }
              
              .series-card:hover .series-extra {
                opacity: 1;
                max-height: 150px;
                pointer-events: auto;
              }
              
              .series-card .series-tags {
                margin-top: 0.5rem;
                display: flex;
                flex-wrap: wrap;
                gap: 0.35rem;
              }
              
              .series-card .series-tags .tag {
                background: rgba(255, 255, 255, 0.18);
                color: #fff;
                font-size: 0.65rem;
                font-weight: 600;
                padding: 0.25em 1em;
                border-radius: 999px;
                letter-spacing: 0.01em;
                border: none;
                margin: 0;
                line-height: 1.2;
                box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
              }
              
              .series-card .series-actions {
                display: flex;
                gap: 0.7rem;
                width: 100%;
              }
              
              .series-card .series-action-btn {
                flex: 1 1 0;
                min-width: 0;
                width: 100%;
                justify-content: center;
                text-align: center;
                display: inline-flex;
                align-items: center;
                background: rgba(255, 255, 255, 0.15);
                color: #fff;
                border: 1.5px solid rgba(255, 255, 255, 0.22);
                border-radius: 7px;
                padding: 0.4em 1.2em;
                font-size: 0.85rem;
                font-weight: 700;
                text-decoration: none;
                transition:
                  background 0.18s,
                  color 0.18s,
                  border-color 0.18s;
                cursor: pointer;
                outline: none;
                box-shadow: 0 1px 6px rgba(0, 0, 0, 0.08);
              }
              
              .series-card .series-action-btn:hover,
              .series-card .series-action-btn:focus {
                background: rgba(255, 255, 255, 0.28);
                color: #fff;
                border-color: rgba(255, 255, 255, 0.38);
                text-decoration: none;
              }
              
              /* --- Tooltip description qui suit la souris --- */
              .series-tooltip-description {
                position: fixed;
                left: 0;
                top: 0;
                z-index: 9999;
                min-width: 260px;
                max-width: 500px;
                background: rgba(24, 24, 28, 0.6);
                color: #fff;
                border-radius: 10px;
                padding: 1.1rem 1.3rem;
                font-size: 0.9rem;
                line-height: 1.55;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.22s;
                white-space: pre-line;
                max-height: 320px;
                overflow-y: auto;
              }
              
              .series-tooltip-description.visible {
                opacity: 1;
              }
              
              @media (max-width: 768px) {
                .series-grid {
                  gap: 1.1rem;
                }
              
                .series-card {
                  max-width: 100%;
                  min-width: 0;
                  width: 100%;
                  height: 200px;
                  border-radius: 8px;
                  /* Format paysage, image de fond toujours visible */
                  display: flex;
                  flex-direction: column;
                  justify-content: flex-end;
                  background-size: cover;
                  background-position: center;
                  position: relative;
                }
              
                .series-card::before {
                  /* Dégradé inversé : foncé en haut, clair en bas */
                  height: 100% !important;
                  background: linear-gradient(to bottom,
                      rgba(0, 0, 0, 0.7) 0%,
                      rgba(0, 0, 0, 0.4) 50%,
                      transparent 100%);
                  transition: none;
                }
              
                .series-card .series-content {
                  /* Prend toute la hauteur, position absolue */
                  position: absolute;
                  inset: 0;
                  z-index: 3;
                  padding: 0;
                  display: flex;
                  flex-direction: column;
                  justify-content: space-between;
                  align-items: stretch;
                  width: 100%;
                  height: 100%;
                  color: #fff;
                  background: none;
                }
              
                .series-card .series-title,
                .series-card .series-tags {
                  /* Bloc du haut gauche */
                  margin: 0;
                  padding: 0;
                }
              
                .series-card .series-title {
                  font-size: 1.45rem;
                  font-weight: 800;
                  color: #fff;
                  text-shadow: 0 2px 12px rgba(0, 0, 0, 0.35);
                  margin-bottom: 0.3rem;
                  margin-top: 0.7rem;
                  margin-left: 0.9rem;
                  margin-right: 0.9rem;
                  line-height: 1.18;
                  transition: none;
                }
              
                .series-card .series-tags {
                  margin-left: 0.9rem;
                  margin-bottom: 0.7rem;
                  gap: 0.25rem;
                  flex-wrap: wrap;
                }
              
                .series-card .series-tags .tag {
                  font-size: 0.7rem;
                  padding: 0.18em 0.7em;
                  border-radius: 999px;
                  margin: 0 0.15em 0.15em 0;
                  background: rgba(255, 255, 255, 0.25);
                  color: #fff;
                  font-weight: 600;
                  box-shadow: none;
                }
              
                .series-card .series-extra {
                  /* Toujours visible, pas d'animation */
                  opacity: 1 !important;
                  max-height: none !important;
                  pointer-events: auto;
                  margin: 0;
                  gap: 0;
                  height: 100%;
                  display: flex;
                  flex-direction: column;
                  justify-content: space-between;
                }
              
                .series-card .series-actions {
                  /* Bas de la carte, centré, pleine largeur */
                  width: 100%;
                  display: flex;
                  gap: 0.6rem;
                  justify-content: center;
                  align-items: flex-end;
                  margin-bottom: 0.7rem;
                  padding: 0 0.7rem;
                  position: absolute;
                  left: 0;
                  bottom: 0;
                  z-index: 4;
                }
              
                .series-card .series-action-btn {
                  font-size: 0.82rem;
                  padding: 0.45em 0.8em;
                  border-radius: 6px;
                  flex: 1 1 0;
                  min-width: 0;
                  width: 100%;
                  justify-content: center;
                  text-align: center;
                  margin: 0;
                  box-shadow: none;
                  position: relative;
                  z-index: 0;
                  overflow: visible;
                  background: none;
                  border: 2px solid #fff;
                  color: #fff !important;
                  backdrop-filter: blur(1px);
                  -webkit-backdrop-filter: blur(1px);
                  background: rgba(0, 0, 0, 0.1);
                }
              
                .series-card .series-action-btn>* {
                  position: relative;
                  z-index: 1;
                  color: inherit;
                }
              
                /* Supprime le gap vertical entre tags et boutons */
                .series-card .series-extra>*:not(:last-child) {
                  margin-bottom: 0;
                }
              }
              
              /* Supprime l'ancien design horizontal et les tooltips JS */
              .series-card .series-info,
              .series-card .action-buttons,
              .series-card .series-description,
              .series-card .tags-overflow,
              .series-tooltip {
                display: none !important;
              }
            -------------------


            Fichier : carousel.css
            ----------------------
              /* css/components/carousel.css */
              
              .carousel-prev,
              .carousel-next {
                position: absolute;
                top: 50%;
                transform: translateY(-50%);
                width: 44px;
                height: 44px;
                background: rgba(0, 0, 0, 0.4);
                color: #fff;
                border: none;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
                cursor: pointer;
                z-index: 10;
                transition: background 0.3s ease, transform 0.3s ease;
              }
              
              .carousel-prev:hover,
              .carousel-next:hover {
                background: rgba(0, 0, 0, 0.7);
                transform: translateY(-50%) scale(1.1);
              }
              
              .carousel-prev {
                left: 0.75rem;
              }
              
              .carousel-next {
                right: 0.75rem;
              }
              
              /* --- Media Queries --- */
              @media (max-width: 768px) {
                  .carousel-prev,
                  .carousel-next {
                      width: 36px;
                      height: 36px;
                      font-size: 0.9rem;
                      top: 45%;
                  }
              
                  .carousel-prev { left: 0.4rem; }
                  .carousel-next { right: 0.4rem; }
              }
            ----------------------


            Fichier : gallery-lightbox.css
            ------------------------------
              /* css/components/gallery-lightbox.css */
              
              .colo-card {
                display: inline-block;
                margin-bottom: 8px;
                border-radius: 6px;
                overflow: hidden;
                cursor: pointer;
                background-color: var(--clr-bg-card);
                box-shadow: 0 4px 8px rgba(var(--clr-text-rgb), 0.05);
                position: relative;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                width: calc(14.2% - 8px);
                transform: none !important;
              }
              
              .colo-card:hover {
                box-shadow: 0 6px 12px rgba(var(--clr-text-rgb), 0.07);
              }
              
              @media (max-width: 1300px) {
                .colo-card {
                  width: calc(20% - 8px);
                }
              }
              
              @media (max-width: 1100px) {
                .colo-card {
                  width: calc(25% - 8px);
                }
              }
              
              @media (max-width: 992px) {
                .colo-card {
                  width: calc(50% - 8px);
                }
              }
              
              .colo-card img.lazy-load-gallery {
                display: block;
                width: 100%;
                height: auto;
                transition: opacity 0.4s ease-in-out;
              }
              
              .colo-card-overlay {
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                background: linear-gradient(to top, rgba(0, 0, 0, 0.75) 0%, rgba(0, 0, 0, 0) 100%);
                color: #fff;
                padding: 0.5rem;
                font-size: 0.7rem;
                opacity: 0;
                transform: translateY(10px);
                transition: opacity 0.25s ease, transform 0.25s ease;
                text-align: left;
              }
              
              .colo-card:hover .colo-card-overlay {
                opacity: 1;
                transform: translateY(0);
              }
              
              .colo-card-overlay p {
                margin: 0.1rem 0;
                line-height: 1.2;
              }
              
              /* Lightbox Styles */
              .lightbox-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                padding: 2.5vh 2.5vw;
                background-color: rgba(0, 0, 0, 0.8);
                display: none;
                justify-content: center;
                align-items: center;
                z-index: 9999;
                box-sizing: border-box;
              }
              
              body.dark .lightbox-modal {
                background-color: rgba(10, 10, 12, 0.92);
              }
              
              .lightbox-content-wrapper {
                display: flex;
                align-items: flex-start;
                justify-content: center;
                max-width: 95vw;
                max-height: 95vh;
                width: auto;
              }
              
              .lightbox-image-container {
                max-width: 100%;
                max-height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
              }
              
              .lightbox-image {
                max-width: 90vw;
                max-height: 90vh;
                width: auto;
                height: auto;
                object-fit: contain;
                display: block;
                margin: auto;
              }
              
              .lightbox-info-panel {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
                background-color: var(--clr-bg-card);
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(var(--clr-text-rgb), 0.1);
                color: var(--clr-text);
              }
              
              .lightbox-info-panel-desktop {
                flex-shrink: 0;
                width: 320px;
                max-height: 100%;
                overflow-y: auto;
                display: none;
                gap: 1.5rem;
              }
              
              .lightbox-artist-info-block,
              .lightbox-colo-info-block {
                background-color: rgba(var(--clr-bg-rgb-val), 0.03);
                border: 1px solid rgba(var(--clr-text-rgb), 0.08);
                border-radius: 6px;
                padding: 1rem;
              }
              
              body.dark .lightbox-artist-info-block,
              body.dark .lightbox-colo-info-block {
                background-color: rgba(var(--clr-bg-rgb-val), 0.08);
                border-color: rgba(var(--clr-text-rgb), 0.12);
              }
              
              .lightbox-info-panel-mobile {
                display: none;
                width: 90%;
                max-width: 450px;
                margin: 1rem auto 0 auto;
              }
              
              .lightbox-artist-info .artist-header {
                display: flex;
                align-items: center;
                gap: 0.8rem;
                margin-bottom: 0.7rem;
              }
              
              .lightbox-artist-pfp {
                width: 50px;
                height: 50px;
                border-radius: 50%;
                object-fit: cover;
                border: 2px solid var(--clr-primary);
              }
              
              .lightbox-artist-name {
                font-size: 1.1rem;
                font-weight: 700;
                margin: 0;
              }
              
              .lightbox-artist-socials a,
              .lightbox-colo-socials a {
                display: flex;
                align-items: center;
                gap: 0.4rem;
                color: var(--clr-text-sub);
                font-size: 0.85rem;
                text-decoration: none;
                transition: color 0.2s ease;
              }
              
              .lightbox-artist-socials a i,
              .lightbox-colo-socials a i {
                font-size: 1.1rem;
                color: var(--clr-primary);
              }
              
              .lightbox-artist-socials a:hover,
              .lightbox-colo-socials a:hover {
                color: var(--clr-primary);
              }
              
              .lightbox-colo-info p {
                margin-bottom: 0.1rem;
                font-size: 0.9rem;
              }
              
              .lightbox-close {
                position: fixed;
                top: 20px;
                right: 30px;
                color: #ccc;
                font-size: 35px;
                font-weight: bold;
                transition: 0.3s;
                cursor: pointer;
                z-index: 1002;
              }
              
              .lightbox-close:hover,
              .lightbox-close:focus {
                color: #fff;
              }
              
              /* --- Media Queries --- */
              @media (min-width: 993px) {
                .lightbox-info-panel-desktop { display: flex; margin-left: 1rem; }
                .lightbox-info-panel-mobile { display: none; }
              }
              
              @media (max-width: 992px) {
                .lightbox-content-wrapper { flex-direction: column; align-items: center; padding-top: 40px; }
                .lightbox-image { max-height: 70vh; }
                .lightbox-info-panel-desktop { display: none; }
                .lightbox-info-panel-mobile { display: flex; flex-direction: row; max-width: 600px; }
                .lightbox-info-panel-mobile .lightbox-artist-info { border-right: 1px solid rgba(var(--clr-text-rgb), 0.1); padding-right: 1rem; flex: 1; }
                .lightbox-info-panel-mobile .lightbox-colo-info { padding-left: 1rem; flex: 1; }
              }
              
              @media (max-width: 768px) {
                .colo-card-overlay { opacity: 1; transform: translateY(0); padding: .4rem; }
                .colo-card-overlay p { font-size: .7rem; }
                .lightbox-modal { padding: 10px; }
                .lightbox-image { max-height: 60vh; }
                .lightbox-info-panel-mobile { flex-direction: column; font-size: .9em; }
                .lightbox-info-panel-mobile .lightbox-artist-info { border-right: none; border-bottom: 1px solid rgba(var(--clr-text-rgb), 0.1); padding: 0 0 1rem 0; margin-bottom: 1rem; }
                .lightbox-info-panel-mobile .lightbox-colo-info { padding-left: 0; }
                .lightbox-artist-pfp { width: 40px; height: 40px; }
                .lightbox-artist-name { font-size: 1rem; }
                .lightbox-close { top: 10px; right: 15px; font-size: 28px; }
              }
            ------------------------------


            Fichier : general.css
            ---------------------
              /* css/components/general.css */
              
              .section-title {
                font-size: 2.4rem;
                font-weight: 700;
                margin-bottom: 0.4rem;
                display: inline-block;
                position: relative;
                color: var(--clr-text);
              }
              
              .page-title {
                text-align: left;
                margin-bottom: 1.5rem;
                display: block;
              }
              
              .tag,
              .detail-tag {
                background: rgba(var(--clr-primary-rgb), 0.15);
                color: var(--clr-primary);
                padding: 0.2rem 0.6rem;
                border-radius: 6px;
                font-size: 0.75rem;
                font-weight: 600;
                white-space: nowrap;
              }
              
              .tag.tag-more {
                background: rgba(var(--clr-primary-rgb), 0.07);
              }
              
              .detail-tag {
                padding: 0.3rem 0.8rem;
                font-size: 0.85rem;
              }
              
              .sort-button {
                  background: rgba(var(--clr-primary-rgb), 0.2);
                  color: var(--clr-primary);
                  padding: 0.6rem 1.2rem;
                  border: none;
                  border-radius: 8px;
                  cursor: pointer;
                  font-size: 0.95rem;
                  font-weight: 600;
                  display: inline-flex;
                  align-items: center;
                  gap: 0.5rem;
                  transition: background .3s ease, transform .3s ease;
              }
              
              .sort-button:hover {
                  background: rgba(var(--clr-primary-rgb), 0.5);
                  color: var(--clr-text);
                  transform: translateY(-2px);
              }
              
              .sort-button i {
                  transition: transform 0.3s ease;
              }
              
              
              /* --- Media Queries --- */
              @media (max-width: 768px) {
                .section-title {
                  font-size: 1.8rem;
                  margin-bottom: 0.3rem;
                }
              
                .section-title::after {
                  width: 50px;
                  height: 3px;
                }
              
                .page-title {
                  font-size: 1.5rem;
                  margin-bottom: 1.5rem;
                }
                
                .tag,
                .detail-tag {
                  font-size: .65rem;
                  padding: .15rem .4rem;
                }
              
                .sort-button {
                  padding: .5rem .8rem;
                  font-size: .75rem;
                }
              
                .sort-button i {
                  font-size: 1.1rem;
                }
              }
            ---------------------


            Fichier : header.css
            --------------------
              /* css/components/header.css */
              
              .hamburger-menu-btn {
                display: none;
                background: none;
                border: none;
                color: var(--clr-text);
                font-size: 1.6rem;
                cursor: pointer;
                padding: 0.5rem;
                line-height: 1;
                z-index: 1001;
              }
              
              .header-container {
                display: flex;
                align-items: center;
                justify-content: flex-start;
                position: relative;
                padding: 0;
                /* padding géré par les enfants */
                height: auto;
                min-height: 60px;
              }
              
              /* Nouveau bloc pour centrer le logo dans le padding gauche */
              .header-logo-center {
                flex: 0 0 auto;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 16rem;
                /* même largeur que le padding gauche du main */
                z-index: 2;
              }
              
              .site-title-link {
                text-decoration: none;
                color: var(--clr-bg-invert);
                font-weight: 700;
                font-size: 2.2rem;
                position: relative;
                line-height: 1;
                transition: color 0.3s ease, font-weight 0.3s ease, letter-spacing 0.3s ease;
                letter-spacing: -0.5px;
                /* Initial spacing */
                display: block;
                text-align: left;
                margin: 0;
                /* retire le margin-left si existant */
              }
              
              .site-title-link:hover {
                color: var(--clr-bg-invert);
                font-weight: 800;
                letter-spacing: 1px;
              }
              
              .site-title-link::after {
                content: none;
                /* Remove underline effect */
              }
              
              /* Le groupe navigation + hamburger */
              .header-left-group {
                flex: 1 1 0;
                display: flex;
                align-items: center;
                gap: 2.5rem;
                min-width: 0;
                /* retire la logo d'ici */
                padding-left: 0;
              }
              
              .desktop-navigation-wrapper {
                display: flex;
                align-items: center;
                gap: 0.8rem;
                flex-grow: 1;
                justify-content: flex-start;
                padding-left: 0;
                margin-left: 0;
              }
              
              .desktop-nav {
                display: flex;
                flex-direction: row;
                list-style: none;
                padding: 0;
                margin: 0;
              }
              
              .desktop-nav-main {
                gap: 1.8rem;
              }
              
              .desktop-nav-sub {
                gap: 1.2rem;
              }
              
              .nav-separator {
                color: var(--clr-text-sub);
                font-weight: 300;
                padding: 0 0.5rem;
              }
              
              .desktop-nav a {
                text-decoration: none;
                color: var(--clr-text-sub);
                font-weight: 600;
                position: relative;
                padding: 0.2em 0.1em;
                transition: color 0.3s ease;
              }
              
              .desktop-nav a:hover {
                color: var(--clr-text);
              }
              
              .desktop-nav a::after {
                content: "";
                position: absolute;
                left: 0;
                bottom: -6px;
                width: 0;
                height: 2px;
                background: var(--clr-text);
                transition: width 0.3s ease;
              }
              
              .desktop-nav a:hover::after,
              .desktop-nav a.active-nav-link::after {
                width: 100%;
              }
              
              .desktop-nav a.active-nav-link {
                color: var(--clr-text);
                font-weight: 700;
              }
              
              .desktop-nav a i {
                margin-right: 0.5rem;
              }
              
              .desktop-social-icons {
                display: flex;
                gap: 1rem;
              }
              
              .desktop-social-icons a {
                color: var(--clr-bg-invert);
                font-size: 1.25rem;
                transition: color 0.3s ease, transform 0.2s ease;
              }
              
              .desktop-social-icons a:hover {
                color: var(--clr-bg-invert);
                transform: translateY(-2px) scale(1.05);
              }
              
              .theme-toggle {
                background: none;
                border: none;
                color: var(--clr-bg-invert);
                border-radius: 50%;
                height: 38px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 1.2rem;
                transition: transform 0.4s ease;
              }
              
              .theme-toggle:hover {
                transform: rotate(360deg);
              }
              
              /* --- Media Queries --- */
              @media (max-width: 1150px) {
                .hamburger-menu-btn {
                  display: block;
                }
              
                .header-logo-center {
                  width: auto;
                  padding-left: 0.8rem;
                }
              
                .header-left-group {
                  gap: 0.8rem;
                }
              
                .desktop-navigation-wrapper,
                .desktop-nav,
                .desktop-social-icons {
                  display: none;
                }
              
                .theme-toggle {
                  font-size: 1rem;
                  width: 32px;
                  height: 32px;
                }
              
                .nav-separator {
                  display: none;
                }
              
                .header-actions {
                  flex: 0 0 auto;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  width: 4rem;
                }
              
                .desktop-only {
                  display: none !important;
                }
                .mobile-nav-title-link {
                  display: block !important;
                  color: var(--clr-bg-invert);
                  font-size: 1.6rem;
                  font-weight: 700;
                  text-decoration: none;
                  line-height: 1;
                  /* Optionnel: vertical align */
                  align-self: center;
                }
                .mobile-nav-title-link:hover {
                  color: var(--clr-bg-invert);
                  font-weight: 800;
                  letter-spacing: 1px;
                }
              }
              
              @media (max-width: 768px) {
                .header-logo-center {
                  width: auto;
                  padding-left: 0.6rem;
                }
              
                .site-title-link {
                  font-size: 1.6rem;
                }
              }
              
              .desktop-only {
                display: block;
              }
              .mobile-nav-title-link {
                display: none;
              }
            --------------------


            Fichier : mobile-menu.css
            -------------------------
              /* css/components/mobile-menu.css */
              
              .mobile-menu-content {
                position: fixed;
                top: 0;
                left: 0;
                width: 280px;
                max-width: 80%;
                height: 100%;
                background: var(--clr-bg-card);
                padding: 1.5rem;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
                transform: translateX(-100%);
                z-index: 1000;
                display: flex;
                flex-direction: column;
                transition: transform 0.3s ease;
                overflow-y: auto;
              }
              
              .mobile-menu-overlay.open .mobile-menu-content {
                transform: translateX(0);
              }
              
              .close-mobile-menu-btn {
                background: none;
                border: none;
                color: var(--clr-text);
                font-size: 1.8rem;
                cursor: pointer;
                align-self: flex-end;
                margin-bottom: 1rem;
                padding: 0.2rem;
              }
              
              .mobile-menu-content h3 {
                font-size: 1.4rem;
                color: var(--clr-primary);
                margin-bottom: 1rem;
                border-bottom: 2px solid rgba(var(--clr-primary-rgb), 0.2);
                padding-bottom: 0.5rem;
              }
              
              .mobile-nav-links,
              .mobile-social-links-menu {
                list-style: none;
                padding: 0;
                margin-bottom: 1.5rem;
              }
              
              .mobile-nav-links li,
              .mobile-social-links-menu li {
                margin-bottom: 0.8rem;
              }
              
              .mobile-nav-links a,
              .mobile-social-links-menu a {
                text-decoration: none;
                color: var(--clr-text);
                font-weight: 600;
                font-size: 1.1rem;
                display: flex;
                align-items: center;
                gap: 0.8rem;
                padding: 0.5rem 0;
                transition: color 0.3s ease;
              }
              
              .mobile-nav-links a:hover,
              .mobile-social-links-menu a:hover {
                color: var(--clr-primary);
              }
              
              /* --- Media Queries --- */
              @media (max-width: 768px) {
                .mobile-menu-content h3 {
                  font-size: 1.2rem;
                }
              
                .mobile-nav-links a,
                .mobile-social-links-menu a {
                  font-size: 1rem;
                }
              }
            -------------------------


            Fichier : reader.css
            --------------------
              /* Définition des variables locales au lecteur */
              :root {
                --sidebar-info-width: 16rem;
                --sidebar-settings-width: 16rem;
                --global-controls-height: 50px;
              }
              
              /* css/components/reader.css */
              
              body#readerpage {
                overflow: hidden;
              }
              
              #manga-reader-root {
                height: calc(100vh - 60px);
                display: flex;
                flex-direction: column;
                position: relative;
                background-color: var(--clr-bg-reader);
              }
              
              /* --- Contrôles Globaux (en haut à gauche) --- */
              #global-reader-controls {
                position: absolute;
                top: 0;
                left: 0;
                height: var(--global-controls-height);
                width: var(--sidebar-info-width);
                /* Aligné sur la première sidebar */
                background: transparent;
                z-index: 1001;
                display: flex;
                align-items: center;
                padding: 1.5rem 0 0 1.5rem;
                gap: 0.75rem;
              }
              
              #global-reader-controls button {
                background: transparent;
                color: var(--clr-reader-invert);
                border: 1.5px solid var(--clr-bg-reader-invert);
                font-size: 1.2rem;
                cursor: pointer;
                height: 36px;
                width: 36px;
                border-radius: 4px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s;
              }
              
              #global-reader-controls button:hover {
                background: var(--clr-bg-reader-invert);
                color: var(--clr-text-invert);
              }
              
              #global-reader-controls button.active {
                border-color: var(--clr-bg-reader-invert);
                background: var(--clr-bg-reader-invert);
                color: var(--clr-text-invert);
              }
              
              #global-reader-controls #toggle-chapters-like.liked {
                background: var(--clr-accent);
                color: var(--clr-bg-reader);
                border-color: var(--clr-accent);
              }
              
              #global-reader-controls #toggle-chapters-like.liked i.fas.fa-heart {
                color: var(--clr-bg-reader);
              }
              
              #live-page-counter {
                font-weight: 500;
                font-size: 0.9rem;
                color: var(--clr-text-sub);
              }
              
              /* --- Layout Principal (Sidebars + Viewer) --- */
              .reader-layout-container {
                display: flex;
                flex-grow: 1;
                min-height: 0;
                padding-top: var(--global-controls-height);
                position: relative; /* <-- Ajouté */
                overflow: hidden; /* <-- Ajouté */
              }
              
              /* --- NOUVELLE LOGIQUE D'ANIMATION POUR LES SIDEBARS --- */
              .reader-sidebar {
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                margin-top: 3.2rem;
                padding: 1.5rem 0 1.5rem 1.5rem;
                flex-shrink: 0;
                display: flex;
                flex-direction: column;
                min-width: 0;
                /* La position de départ est gérée par le JS, mais on garde un transform pour la transition */
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
                z-index: 2;
              }
              
              #info-sidebar {
                width: var(--sidebar-info-width);
                left: 0;
                z-index: 3;
              }
              
              #settings-sidebar {
                padding-right: 1rem;
                width: var(--sidebar-settings-width);
                z-index: 2;
              }
              
              .sidebar-content-wrapper {
                overflow-y: auto;
                flex-grow: 1;
                scrollbar-width: none;
                min-width: 0; /* <-- Permet le retour à la ligne du contenu */
              }
              
              .sidebar-content-wrapper::-webkit-scrollbar {
                display: none;
              }
              
              .reader-container {
                flex-grow: 1;
                min-width: 0;
                overflow-y: auto;
                -webkit-user-select: none;
                user-select: none;
                margin-left: 0;
                transition: margin-left 0.3s ease-in-out;
                position: relative;
                z-index: 1;
              }
              
              .reader-viewer-container {
                background-color: var(--clr-bg-reader);
                min-height: calc(100vh - 70px - 22px);
                -webkit-user-select: none;
                user-select: none;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
              }
              .reader-viewer-container img {
                -webkit-user-select: none;
                -ms-user-select: none;
                user-select: none;
                -webkit-user-drag: none;
              }
              body.dark .reader-viewer-container {
                background-color: #111;
              }
              .reader-viewer {
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100%;
                padding: 0.5rem;
                box-sizing: border-box;
              }
              .reader-viewer img {
                max-width: 100%;
                height: auto;
              }
              .reader-viewer.stretch img {
                width: 100%;
                height: 100%;
                object-fit: contain;
              }
              .reader-viewer.double-mode {
                display: grid;
                grid-template-columns: 1fr 1fr; /* On force TOUJOURS 2 colonnes */
                justify-content: center;
                align-items: center;
                min-height: 0;
              }
              
              /* Gère le cas d'une seule image PAYSAGE qui doit prendre toute la largeur */
              .reader-viewer.double-mode.single-landscape-spread {
                /* On repasse en flex pour ce cas spécifique pour un centrage simple */
                display: flex;
                justify-content: center;
                align-items: center;
                /* La grille est ignorée quand display est flex */
              }
              
              /* Cas des images paysage en mode double */
              .reader-viewer.double-mode.single-landscape-spread.fit-width img,
              .reader-viewer.double-mode.single-landscape-spread.fit-both img {
                width: 100%;
                height: auto;
              }
              .reader-viewer.double-mode.single-landscape-spread.fit-height img {
                height: 100%;
                width: auto;
              }
              
              /* Styles par défaut pour les images en mode double (2 pages) */
              .reader-viewer.double-mode img {
                justify-self: end; /* La 1ère image (logique) se colle à droite de sa colonne */
              }
              .reader-viewer.double-mode img:last-child {
                justify-self: start; /* La 2ème image (logique) se colle à gauche de sa colonne */
              }
              
              /* Pour le mode RTL, on inverse l'ordre visuel et l'alignement */
              .reader-viewer.double-mode.rtl-mode > img:nth-child(2) {
                order: -1; /* Place la 2ème image avant la 1ère visuellement */
              }
              .reader-viewer.double-mode.rtl-mode img {
                justify-self: start; /* La 1ère (logique) se colle à gauche */
              }
              .reader-viewer.double-mode.rtl-mode img:last-child {
                justify-self: end; /* La 2ème (logique) se colle à droite */
              }
              
              /* --- NOUVELLE LOGIQUE POUR LA PAGE UNIQUE (PORTRAIT) --- */
              
              /* Pour la lecture de droite à gauche (RTL) */
              /* La page unique se place dans la colonne de gauche et se colle à droite */
              .reader-viewer.double-mode.rtl-mode .single-page-spread {
                grid-column: 1 / 2;
                justify-self: end;
              }
              
              /* Pour la lecture de gauche à droite (LTR) */
              /* La page unique se place dans la colonne de droite et se colle à gauche */
              .reader-viewer.double-mode.ltr-mode .single-page-spread {
                grid-column: 2 / 3;
                justify-self: start;
              }
              
              /* --- Styles de dimensionnement --- */
              
              .reader-viewer.stretch.double-mode img {
                width: auto;
                height: 100%;
                object-fit: contain;
              }
              .reader-viewer.double-mode.fit-width img {
                width: 100%;
                height: auto;
                object-fit: contain;
              }
              
              .reader-viewer-container:has(.reader-viewer.fit-custom) {
                display: flex;
                align-items: center;
                justify-content: center;
              }
              
              .reader-viewer.fit-height img {
                max-height: calc(100vh - 70px - 22px - 1rem);
                width: auto;
              }
              .reader-viewer.fit-width img {
                width: 100%;
                height: auto;
              }
              .reader-viewer.fit-both img {
                max-width: 100%;
                max-height: calc(100vh - 70px - 22px - 1rem);
                object-fit: contain;
              }
              .reader-viewer.fit-original img {
                max-width: none;
                max-height: none;
              }
              .reader-viewer.webtoon-mode {
                flex-direction: column;
                gap: 10px;
              }
              .reader-viewer.webtoon-mode::after {
                content: "";
                display: block;
              }
              
              .reader-sidebar .control-group {
                margin-bottom: 2rem;
              }
              
              .reader-sidebar .group-title {
                font-size: 1.2rem;
                font-weight: 700;
                color: var(--clr-text);
                margin-bottom: 0.4rem;
              }
              
              #info-series-link {
                color: var(--clr-text);
                text-decoration: none;
                font-weight: 700;
                font-size: 1.2rem;
                display: inline-flex;
                align-items: flex-start;
                gap: 0.5rem;
                transition: color 0.2s;
                word-break: break-word; /* <-- Forcer le retour à la ligne si besoin */
              }
              
              #info-series-link:hover {
                color: var(--clr-text-sub);
              }
              
              #info-series-link i {
                color: var(--clr-text-sub);
                padding-top: 4px;
              }
              
              #info-chapters-group .chapter-list-wrapper {
                max-height: 350px;
                overflow-y: auto;
                scrollbar-width: none;
              }
              
              #info-chapters-group .chapter-list-wrapper::-webkit-scrollbar {
                display: none;
              }
              
              #info-chapters-group .chapter-list {
                list-style: none;
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
              }
              
              #info-chapters-group .chapter-list a {
                background: var(--clr-bg-card);
                border-radius: 4px;
                padding: 0.6rem 1rem;
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                transition: all 0.2s ease;
                text-decoration: none;
                overflow: hidden;
                cursor: pointer;
              }
              
              #info-chapters-group .chapter-list a:hover {
                background: var(--clr-bg-reader-invert);
              }
              
              #info-chapters-group .chapter-list a:hover .chapter-number,
              #info-chapters-group .chapter-list a:hover .chapter-title {
                color: var(--clr-text-invert);
              }
              
              .chapter-info-main {
                display: flex;
                width: 100%;
                justify-content: flex-start;
                align-items: center;
              }
              
              .chapter-number {
                font-weight: 700;
                color: var(--clr-text-fifth);
                min-width: 30px;
                transition: color 0.2s ease;
              }
              
              .chapter-title {
                font-size: 0.85rem;
                font-weight: 500;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                margin-left: 0.5rem;
                flex-grow: 1;
                color: var(--clr-text);
                transition: color 0.2s ease;
              }
              
              .chapter-stats-details {
                font-size: 0.75rem;
                margin-top: 0.4rem;
                padding-top: 0.4rem;
                border-top: 1.5px solid var(--clr-bg-reader);
                width: 100%;
                display: flex;
                justify-content: space-between;
                color: var(--clr-text-sub);
              }
              
              .chapter-stats-details i {
                color: var(--clr-text-sub);
                margin-right: 0.3rem;
              }
              
              #info-chapters-group .chapter-list a.active {
                background: var(--clr-bg-reader-invert);
              }
              
              #info-chapters-group .chapter-list a.active .chapter-number,
              #info-chapters-group .chapter-list a.active .chapter-title {
                color: var(--clr-text-invert);
              }
              
              #info-chapters-group .chapter-list a.active .chapter-stats-details {
                color: var(--clr-bg-reader);
              }
              
              #info-chapters-group .chapter-list a.active .chapter-stats-details i {
                color: var(--clr-bg-reader);
              }
              
              #settings-sidebar .control-group {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
              }
              
              .main-setting-btn {
                width: 100%;
                padding: 0.6rem 1rem;
                border-radius: 4px;
                background: var(--clr-bg-invert);
                border: none;
                color: var(--clr-text-invert);
                font-size: 0.85rem;
                font-weight: 500;
                cursor: pointer;
                text-align: left;
                display: flex;
                align-items: center;
                gap: 0.7rem;
              }
              
              .options-panel {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
              }
              
              .secondary-toggle-btn {
                padding: 0.75rem 1rem;
                border-radius: 4px;
                background: var(--clr-bg-card);
                border: 1.5px solid transparent;
                color: var(--clr-text);
                text-align: left;
                font-weight: 500;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 0.7rem;
                transition: all 0.2s ease-in-out;
                opacity: 0.7;
                font-size: 0.85rem;
              }
              
              .secondary-toggle-btn:hover {
                opacity: 1;
                background-color: var(--clr-bg-reader);
              }
              
              .secondary-toggle-btn.active {
                opacity: 1;
                border-color: var(--clr-bg-invert);
              }
              
              .secondary-toggle-btn.disabled {
                opacity: 0.4;
                cursor: not-allowed;
                pointer-events: none;
              }
              
              .secondary-toggle-btn .check-icon {
                font-size: 1.1em;
              }
              
              /* ================================== */
              /* STYLES DU SLIDER SYNCHRONISÉS      */
              /* ================================== */
              
              .slider-control {
                padding: 0.75rem 1rem;
                border-radius: 4px;
                background: var(--clr-bg-card);
                border: 1.5px solid transparent;
                transition: all 0.2s ease-in-out;
                opacity: 0.7;
              }
              
              .slider-control.disabled {
                opacity: 0.4;
                cursor: not-allowed;
                pointer-events: none;
              }
              
              .slider-header {
                display: flex;
                align-items: center;
                gap: 0.7rem;
                cursor: pointer;
                user-select: none;
                font-size: 0.85rem;
                font-weight: 500;
              }
              
              .slider-label {
                color: var(--clr-text);
              }
              
              .check-icon {
                font-size: 1.1em;
                width: 1.1em;
                text-align: center;
              }
              
              .slider-body {
                overflow: hidden;
                max-height: 0;
                transition: max-height 0.3s ease-out, padding-top 0.3s ease-out;
                padding-top: 0;
              }
              
              .slider-control.active {
                opacity: 1;
                border-color: var(--clr-bg-card-invert);
              }
              
              .slider-control.active .slider-body {
                max-height: 100px;
                padding-top: 0.75rem;
              }
              
              .slider-control.active .check-icon::before {
                content: "\f14a";
                font-weight: 900;
              }
              
              .PB-range-slider-div {
                display: flex;
                align-items: center;
                gap: 1rem;
              }
              
              .slider-control:hover {
                background: var(--clr-bg-reader);
              }
              
              .PB-range-slider {
                -webkit-appearance: none;
                width: 100%;
                height: 4px;
                border-radius: 4px;
                background: var(--clr-text-sub);
                outline: none;
                transition: opacity 0.2s;
              }
              
              .body.dark .PB-range-slider {
                background: #4a4a4a;
              }
              
              .PB-range-slidervalue {
                color: var(--clr-bg-sub);
                font-size: 0.8rem;
              }
              
              .reader-viewer.fit-height:not(.webtoon-mode) > img {
                max-width: none;
              }
              
              .PB-range-slider::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 16px;
                height: 16px;
                border-radius: 50%;
                background-color: var(--clr-bg-invert);
                cursor: pointer;
                transition: 0.3s ease-in-out;
                border: 2px solid var(--clr-bg-card);
              }
              
              /* --- STYLES POUR LA SECTION COMMENTAIRES --- */
              
              #info-comments-group .add-comment-box {
                background-color: var(--clr-bg-card);
                border-radius: 8px;
                padding: 8px;
                margin-bottom: 1.5rem;
              }
              
              #info-comments-group textarea {
                width: 100%;
                min-height: 60px;
                max-height: 120px;
                resize: vertical;
                border: none;
                border-radius: 6px;
                padding: 10px;
                font-size: 0.9rem;
                outline: none;
                caret-color: var(--clr-text);
                background-color: transparent;
                color: var(--clr-text);
                font-family: inherit;
              }
              
              #info-comments-group .add-comment-actions {
                display: flex;
                justify-content: flex-end;
                padding-top: 8px;
              }
              
              #info-comments-group .send-btn {
                background-color: var(--clr-bg-card-invert);
                color: var(--clr-text-invert);
                padding: 8px 12px;
                border-radius: 6px;
                cursor: pointer;
                border: none;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-weight: 600;
                transition: filter 0.2s;
              }
              
              #info-comments-group .send-btn:hover {
                filter: brightness(0.9);
              }
              
              .comments-list {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
              }
              
              .comment-item {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
              }
              
              .comment-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
              }
              
              .user {
                display: flex;
                align-items: center;
                gap: 10px;
              }
              
              .user-pic {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                background-color: var(--clr-bg);
                display: flex;
                align-items: center;
                justify-content: center;
              }
              
              .user-info {
                display: flex;
                flex-direction: column;
              }
              
              .user-info .username {
                display: block;
                font-weight: 700;
                font-size: 0.9rem;
                color: var(--clr-text);
              }
              
              .user-info .timestamp {
                display: block;
                font-weight: 500;
                font-size: 0.75rem;
                color: var(--clr-text-sub);
              }
              
              .comment-like-action {
                background: none;
                border: none;
                color: var(--clr-text-sub);
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                padding: 4px 10px;
                font-size: 0.8rem;
                transition: all 0.2s;
              }
              
              .comment-like-action:hover {
                color: #f5356e;
              }
              
              .comment-like-action .fas.fa-heart {
                transition: color 0.2s;
              }
              
              .comment-content {
                font-size: 0.9rem;
                line-height: 1.6;
                font-weight: 500;
                color: var(--clr-text-sub);
                padding-left: 42px;
              }
              
              /* --- Bouton global like dans la barre de contrôle --- */
              #global-reader-controls #toggle-chapters-like {
                background: transparent;
                color: var(--clr-bg-reader-invert);
                border: 1.5px solid var(--clr-bg-reader-invert);
                font-size: 1.2rem;
                cursor: pointer;
                height: 36px;
                width: 36px;
                border-radius: 4px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s;
              }
              
              #global-reader-controls #toggle-chapters-like.liked {
                background: var(--clr-accent);
                color: var(--clr-bg-reader);
                border-color: var(--clr-accent);
              }
              
              #global-reader-controls #toggle-chapters-like.liked i.fas.fa-heart {
                color: var(--clr-bg-reader);
              }
              
              #global-reader-controls #toggle-chapters-like:hover {
                background: var(--clr-bg-reader-invert);
                color: var(--clr-text-invert);
              }
              
              #global-reader-controls #toggle-chapters-like.liked:hover {
                background: var(--clr-accent);
                color: var(--clr-text-invert);
              }
              
              /* --- Like dans la sidebar (stats chapitre) --- */
              .chapter-stats-details .fa-heart,
              .chapter-stats-details .chapter-likes-count {
                transition: color 0.2s;
              }
              
              .chapter-stats-details .fa-heart.liked,
              .chapter-stats-details .chapter-likes-count.liked {
                color: var(--clr-accent) !important;
              }
              
              /* --- Like sur la page MangaList (exemple pour .chapter-card-list-likes) --- */
              .chapter-card-list-likes,
              .chapter-card-list-likes .fa-heart,
              .chapter-card-list-likes .likes-count {
                transition: color 0.2s;
              }
              
              .chapter-card-list-likes.liked,
              .chapter-card-list-likes.liked .fa-heart,
              .chapter-card-list-likes.liked .likes-count {
                color: var(--clr-accent) !important;
              }
              
              /* --- Like sur les commentaires --- */
              .comment-like-action.liked,
              .comment-like-action.liked .fa-heart,
              .comment-like-action.liked span,
              .comment-like-action .fa-heart.liked,
              .comment-like-action span.liked {
                color: var(--clr-accent) !important;
              }
            --------------------

        Dossier : pages/

            Fichier : galerie.css
            ---------------------
              .gallery-section {
                padding-top: 1rem;
              }
              
              /* Ajout du style pour le compteur total */
              #colo-total-count {
                font-size: 0.8em;
                font-weight: 500;
                color: var(--clr-text-sub);
                margin-left: 0.5rem;
              }
              
              /* --- CORRECTION Z-INDEX --- */
              .gallery-controls {
                position: relative; /* Établit un contexte d'empilement */
                z-index: 10; /* Assure que les contrôles sont au-dessus de la grille */
                margin-top: 0.5rem;
                margin-bottom: 1.5rem;
              }
              
              .gallery-sort-filter {
                display: flex;
                gap: 1rem;
                align-items: center;
                flex-wrap: wrap;
              }
              
              .gallery-sort-filter label {
                font-weight: 500;
                color: var(--clr-text);
              }
              
              /* --- STYLES POUR LE MENU DÉROULANT CUSTOM --- */
              
              .custom-dropdown {
                position: relative;
                display: inline-block;
                min-width: 220px;
                font-family: inherit;
              }
              
              .custom-dropdown-toggle {
                display: flex;
                justify-content: space-between;
                align-items: center;
                width: 100%;
                padding: 0.6rem 1rem;
                background-color: var(--clr-bg-card);
                border: 1px solid rgba(var(--clr-text-rgb), 0.2);
                border-radius: 8px;
                color: var(--clr-text);
                font-size: 0.95rem;
                font-weight: 500;
                text-align: left;
                cursor: pointer;
                transition: border-color 0.2s ease, box-shadow 0.2s ease;
              }
              
              .custom-dropdown-toggle:hover {
                border-color: var(--clr-primary);
              }
              
              .custom-dropdown-toggle[aria-expanded="true"] {
                border-color: var(--clr-primary);
                box-shadow: 0 0 0 2px rgba(var(--clr-primary-rgb), 0.2);
              }
              
              #custom-filter-text {
                flex-grow: 1;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
              }
              
              .custom-dropdown-toggle .dropdown-arrow {
                margin-left: 0.5rem;
                transition: transform 0.3s ease;
              }
              
              .custom-dropdown-toggle[aria-expanded="true"] .dropdown-arrow {
                transform: rotate(180deg);
              }
              
              .custom-dropdown-menu {
                position: absolute;
                top: calc(100% + 6px);
                left: 0;
                width: 100%;
                min-width: 280px; /* Plus large pour le confort */
                background-color: var(--clr-bg-card);
                border: 1px solid rgba(var(--clr-text-rgb), 0.15);
                border-radius: 8px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
                z-index: 100;
                max-height: 500px; /* Votre modification */
                overflow-y: auto;
                opacity: 0;
                transform: translateY(-10px);
                visibility: hidden;
                transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s ease;
              }
              
              .custom-dropdown-menu.show {
                opacity: 1;
                transform: translateY(0);
                visibility: visible;
              }
              
              .custom-dropdown-option {
                display: flex;
                align-items: center;
                padding: 0.7rem 1rem;
                cursor: pointer;
                transition: background-color 0.2s ease;
                user-select: none;
              }
              
              .custom-dropdown-option:hover {
                background-color: rgba(var(--clr-primary-rgb), 0.08);
              }
              
              .custom-dropdown-option label {
                /* Le label contient maintenant tout sauf la checkbox cachée */
                display: flex;
                align-items: center;
                width: 100%;
                cursor: pointer;
              
                /* Ajout d'une position relative pour positionner l'icône de la checkbox */
                position: relative;
                padding-left: 28px; /* Espace pour l'icône */
              }
              
              /* --- STYLES CORRIGÉS POUR LA CHECKBOX AVEC FONT AWESOME --- */
              .custom-dropdown-option input[type="checkbox"] {
                /* Cache la checkbox native tout en la gardant accessible */
                position: absolute;
                opacity: 0;
                width: 1px;
                height: 1px;
                overflow: hidden;
                clip: rect(0 0 0 0);
              }
              
              /* Crée une icône personnalisée avant le contenu du label */
              .custom-dropdown-option label::before {
                content: "\f0c8"; /* Code unicode pour fa-regular fa-square */
                font-family: "Font Awesome 6 Free"; /* Utilise la police Font Awesome */
                font-weight: 400; /* Poids pour les icônes 'regular' */
                color: rgba(var(--clr-text-rgb), 0.4);
              
                font-size: 18px;
                line-height: 1;
                text-align: center;
                transition: color 0.2s ease;
              
                /* Positionnement absolu à l'intérieur du label */
                position: absolute;
                left: 0;
                top: 50%;
                transform: translateY(-50%);
                width: 18px;
              }
              
              /* Changer l'icône quand le SIBLING input est coché */
              .custom-dropdown-option input[type="checkbox"]:checked + label::before {
                content: "\f14a"; /* Code unicode pour fa-solid fa-square-check */
                font-weight: 900; /* Poids pour les icônes 'solid' */
                color: var(
                  --clr-primary
                ); /* Couleur principale du thème appliquée à l'icône */
              }
              /* --- FIN DES STYLES CHECKBOX --- */
              
              .custom-dropdown-option .artist-pfp {
                width: 32px;
                height: 32px;
                border-radius: 50%;
                object-fit: cover;
                margin-right: 0.8rem;
                flex-shrink: 0;
              }
              
              .custom-dropdown-option .artist-name {
                flex-grow: 1;
                font-weight: 600;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
              }
              
              .custom-dropdown-option .artist-count {
                font-size: 0.85em;
                color: var(--clr-text-sub);
                margin-left: 0.5rem;
                font-weight: 500;
                background-color: rgba(var(--clr-text-rgb), 0.05);
                padding: 0.1rem 0.4rem;
                border-radius: 4px;
              }
              
              .dropdown-loader {
                padding: 1rem;
                text-align: center;
                color: var(--clr-text-sub);
              }
              
              /* --- STYLES POUR LA BARRE DE SCROLL DU MENU --- */
              
              /* Pour Firefox */
              .custom-dropdown-menu {
                scrollbar-width: thin;
                scrollbar-color: var(--clr-text-sub) transparent;
              }
              
              /* Pour Chrome, Safari, Edge */
              .custom-dropdown-menu::-webkit-scrollbar {
                width: 8px;
              }
              
              .custom-dropdown-menu::-webkit-scrollbar-track {
                background: transparent;
              }
              
              .custom-dropdown-menu::-webkit-scrollbar-thumb {
                background-color: rgba(var(--clr-text-rgb), 0.25);
                border-radius: 10px;
                border: 2px solid var(--clr-bg-card); /* Crée un effet de padding */
              }
              
              .custom-dropdown-menu::-webkit-scrollbar-thumb:hover {
                background-color: var(--clr-primary);
              }
              
              /* --- STYLES RESPONSIVES POUR LE MENU DÉROULANT --- */
              
              @media (max-width: 768px) {
                .custom-dropdown {
                  min-width: 180px; /* Réduit la largeur minimale du conteneur */
                }
              
                .custom-dropdown-toggle {
                  padding: 0.5rem 0.8rem;
                  font-size: 0.85rem;
                }
              
                .custom-dropdown-menu {
                  min-width: 240px; /* Ajuste la largeur du menu ouvert */
                  max-height: 400px; /* Votre modification */
                }
              
                .custom-dropdown-option {
                  padding: 0.6rem 0.8rem;
                }
              
                .custom-dropdown-option label {
                  padding-left: 26px; /* Ajuste l'espace pour l'icône mobile */
                }
              
                .custom-dropdown-option label::before {
                  margin: 0; /* Margin gérée par le padding du label */
                }
              
                .custom-dropdown-option .artist-pfp {
                  width: 28px;
                  height: 28px;
                  margin-right: 0.6rem;
                }
              
                .custom-dropdown-option .artist-name {
                  font-size: 0.9em;
                }
              }
              
              /* Style spécifique pour le menu de tri */
              #custom-sort-filter .custom-dropdown-option {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 0.7rem 1rem;
                cursor: pointer;
                transition: background-color 0.2s ease;
              }
              
              #custom-sort-filter .custom-dropdown-option i {
                width: 20px;
                text-align: center;
                color: var(--clr-text-sub);
              }
              
              #custom-sort-filter .custom-dropdown-option.active {
                background-color: rgba(var(--clr-primary-rgb), 0.08);
                color: var(--clr-primary);
              }
              
              #custom-sort-filter .custom-dropdown-option.active i {
                color: var(--clr-primary);
              }
              
              #custom-sort-filter .custom-dropdown-option:hover {
                background-color: rgba(var(--clr-primary-rgb), 0.08);
              }
              
              #custom-sort-filter .sort-name {
                font-weight: 500;
              }
              
              /* Positionnement des contrôles */
              .gallery-sort-filter {
                display: flex;
                gap: 1rem;
                align-items: center;
                flex-wrap: wrap;
                margin-bottom: 1rem;
              }
            ---------------------


            Fichier : homepage.css
            ----------------------
              /* css/pages/homepage.css */
              
              #hero-section {
                padding: 0;
                margin: 0;
                width: 100vw;
                max-width: 100vw;
                position: relative;
                left: 50%;
                right: 50%;
                top: -70px;
                margin-left: -50vw; 
                margin-right: -50vw;
                margin-bottom: -25px;
              }
              
              .hero-carousel {
                position: relative;
                width: 100vw;
                max-width: 100vw;
                height: 470px;
                border-radius: 0; /* Suppression des coins arrondis */
                overflow: hidden;
                background-color: var(--clr-bg-card);
                margin: 0;
              }
              
              .hero-carousel-track {
                position: relative;
                width: 100%;
                height: 100%;
              }
              
              .hero-slide {
                padding-top: 70px;
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                color: #fff;
                display: flex;
                opacity: 0;
                visibility: hidden;
                transition: opacity 0.6s ease, visibility 0.6s ease;
                z-index: 1;
              }
              
              .hero-slide.active {
                opacity: 1;
                visibility: visible;
                z-index: 2;
              }
              
              .hero-slide::before {
                content: "";
                position: absolute;
                top: -5%;
                left: -5%;
                width: 110%;
                height: 110%;
                background-image: var(--bg-image);
                background-size: cover;
                background-position: center;
                filter: blur(12px) brightness(0.4);
                z-index: -1;
              }
              
              .hero-slide::after {
                content: "";
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 75%;
                background: linear-gradient(
                  to top,
                  rgba(0, 0, 0, 0.85) 20%,
                  rgba(0, 0, 0, 0.5) 60%,
                  transparent 100%
                );
                z-index: 2;
                opacity: 0;
                transition: opacity 0.3s ease;
              }
              
              .hero-slide-content {
                display: grid;
                grid-template-columns: 55% 45%;
                align-items: stretch;
                width: 100%;
                height: 100%;
                margin: 0 auto;
                padding: 0 5% 0 16.5rem;
                position: relative;
                z-index: 3;
              }
              
              .hero-info {
                display: flex;
                flex-direction: column;
                justify-content: center;
                padding-top: 2rem;
                padding-bottom: 2rem;
                align-self: start;
              }
              
              .hero-info .recommended-title {
                font-size: 1.1rem;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 1px;
                color: var(--clr-accent);
              }
              
              .hero-info .hero-series-title {
                font-size: 3.3rem;
                font-weight: 800;
                line-height: 1em;
                margin-bottom: 0.8rem;
                color: var(--hero-color, #fff);
                transition: color 0.3s ease, filter 0.3s ease;
              }
              
              .hero-info .hero-tags {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                margin-bottom: 0.6rem;
              }
              .hero-info .hero-tags .tag {
                background-color: rgba(255, 255, 255, 0.15);
                color: #fff;
                border: 1px solid rgba(255, 255, 255, 0.2);
              }
              
              .hero-info .hero-description {
                font-size: 1rem;
                line-height: 1.6;
                max-width: 90%;
                display: -webkit-box;
                -webkit-line-clamp: 3;
                -webkit-box-orient: vertical;
                overflow: hidden;
              }
              
              .hero-info .hero-actions {
                display: flex;
                align-items: center;
                flex-wrap: wrap;
                gap: 1rem;
              }
              
              .hero-info .hero-cta-button {
                background: rgba(var(--hero-color-rgb), 0.15);
                color: var(--hero-color, #fff);
                border: 2px solid var(--hero-color, #fff);
                text-decoration: none;
                padding: 0.7rem 1.8rem;
                border-radius: 8px;
                font-weight: 700;
                transition: transform 0.2s ease, box-shadow 0.2s ease,
                  background-color 0.2s ease, color 0.2s ease;
              }
              
              .hero-info .hero-cta-button-anime {
                background: var(--hero-color, var(--clr-primary));
                color: #fff;
                border: 2px solid transparent;
                text-decoration: none;
                padding: 0.7rem 1.8rem;
                border-radius: 8px;
                font-weight: 700;
                transition: transform 0.2s ease, box-shadow 0.2s ease,
                  background-color 0.3s ease;
              }
              
              .hero-info .hero-cta-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                background-color: var(--hero-color, #fff);
                color: #fff;
              }
              
              .hero-info .hero-cta-button-anime:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                filter: brightness(1.1);
              }
              
              .hero-info .hero-latest-info {
                display: flex;
                align-items: center;
                gap: 1rem;
                font-weight: 500;
                padding: 0.8rem 0;
                flex-wrap: nowrap; /* Empêche le retour à la ligne */
                min-width: 0;
                position: relative;
                z-index: 5; /* S'assure que le status est devant l'image reco */
              }
              
              .hero-info .hero-latest-info .hero-cta-button,
              .hero-info .hero-latest-info .hero-cta-button-anime {
                margin: 0;
                white-space: nowrap; /* Empêche le texte de couper sur plusieurs lignes */
                flex-shrink: 0;      /* Empêche le bouton de rétrécir */
                min-width: 0;
              }
              
              .hero-info .hero-latest-info .status {
                display: flex;
                align-items: center;
                gap: 0.3rem;
                font-size: 0.92rem; /* plus petit */
                opacity: 0.9;
                margin-left: 0.3rem; /* réduit l'espacement */
                white-space: nowrap; /* Empêche le texte de couper */
                flex-shrink: 0;      /* Empêche la déformation */
                min-width: 0;
              }
              
              .hero-info .hero-latest-info .status-dot {
                display: inline-block;
                width: 0.5em;
                height: 0.5em;
                border-radius: 50%;
                margin-right: 0.18em;
                vertical-align: middle;
                background-color: #4caf50; /* par défaut vert */
                flex-shrink: 0;
              }
              
              .hero-info .hero-latest-info .status-dot.finished {
                background-color: #e53935; /* rouge si fini */
              }
              
              .hero-image {
                position: absolute;
                right: 0;
                bottom: -30px;
                width: 45%;
                height: 105%;
                display: flex;
                justify-content: center;
                align-items: flex-end;
                pointer-events: none;
              }
              
              .hero-image img {
                max-height: 100%;
                max-width: 100%;
                height: auto;
                width: auto;
                object-fit: contain;
                object-position: bottom center;
                filter: drop-shadow(0 10px 20px rgba(0, 0, 0, 0.5));
              }
              
              /* Navigation */
              .hero-carousel-arrow {
                position: absolute;
                top: 50%;
                transform: translateY(-50%);
                background: rgba(0, 0, 0, 0.3);
                border: none;
                color: #fff;
                width: 44px;
                height: 44px;
                border-radius: 50%;
                cursor: pointer;
                z-index: 10;
              }
              .hero-carousel-arrow:hover {
                background-color: rgba(0, 0, 0, 0.6);
              }
              .hero-carousel-arrow.prev {
                left: 20px;
              }
              .hero-carousel-arrow.next {
                right: 20px;
              }
              
              .hero-carousel-nav {
                position: absolute;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                display: flex;
                gap: 0.8rem;
                z-index: 10;
              }
              
              .hero-nav-dot {
                position: relative;
                width: 12px;
                height: 12px;
                border-radius: 5em;
                background-color: rgba(255, 255, 255, 0.4);
                cursor: pointer;
                transition: background-color 0.3s ease, transform 0.3s ease, width 0.3s ease;
                overflow: hidden;
              }
              
              .hero-nav-dot::before {
                content: "";
                position: absolute;
                inset: 0;
                background-color: #fff;
                transform: scaleX(0);
                transform-origin: left;
                transition: transform 0s;
                z-index: 0;
              }
              
              .hero-nav-dot.active {
                transform: scale(1.2);
                width: 50px;
              }
              
              .hero-nav-dot.active::before {
                animation: fillDot 5s linear forwards;
              }
              
              @keyframes fillDot {
                from {
                  transform: scaleX(0);
                }
              
                to {
                  transform: scaleX(1);
                }
              }
              
              /* --- Réduction taille boutons desktop --- */
              .hero-info .hero-latest-info .hero-cta-button,
              .hero-info .hero-latest-info .hero-cta-button-anime {
                font-size: 0.9rem;
                padding: 0.6rem 1.8rem;
                border-radius: 0.5rem;
              }
              
              /* --- SECTION RESPONSIVE MOBILE --- */
              @media (max-width: 992px) {
                .hero-carousel {
                  height: 450px;
                  min-height: 0;
                  width: 100vw;
                  max-width: 100vw;
                  border-radius: 0;
                  margin: 0;
                }
                /* CORRECTION : On réactive le fond flou sur mobile */
                .hero-slide::before {
                  display: block;
                }
              
                /* CORRECTION : On réactive le dégradé pour la lisibilité */
                .hero-slide::after {
                  opacity: 1;
                }
              
                .hero-slide-content {
                  display: block;
                  grid-template-columns: none;
                  padding: 0;
                  height: 100%;
                  position: relative;
                }
              
                .hero-info {
                  position: absolute;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  z-index: 3;
                  padding: 1.5rem;
                  padding-bottom: 3rem;
                  box-sizing: border-box;
                  display: flex;
                  flex-direction: column;
                  justify-content: space-between;
                  align-items: flex-start;
                  text-align: left;
                  background: none;
                  backdrop-filter: none;
                }
              
                .hero-info .recommended-title,
                .hero-info .hero-description,
                .hero-info .hero-latest-info {
                  display: none;
                }
              
                .hero-info .hero-series-title {
                  font-size: 2.2rem;
                  margin-bottom: 0.8rem;
                  text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2); /* On peut remettre une ombre légère si besoin */
                }
              
                .hero-info .hero-tags {
                  margin-bottom: 0rem;
                }
              
                .hero-info .hero-actions {
                  flex-direction: column;
                  align-items: center;
                  width: 100%;
                  margin-top: auto;
                  margin-bottom: 0;
                  gap: 0.7rem;
                }
              
                .hero-info .hero-actions a {
                  flex-grow: 1;
                  text-align: center;
                }
              
                .hero-latest-info {
                  display: none !important; /* Cacher le statut sur mobile */
                }
              
                .hero-image {
                  position: absolute;
                  bottom: 0;
                  right: 0;
                  width: 65%;
                  height: 80%;
                  align-items: flex-end;
                  justify-content: flex-end;
                  z-index: 2;
                  transform: translateX(10%);
                }
              
                .hero-image img {
                  max-height: 100%;
                  max-width: 100%;
                  object-position: bottom right;
                }
              
                .mobile-only {
                  display: block;
                }
              
                .hero-info .hero-mobile-status {
                  margin-top: 0.3rem;
                  margin-bottom: 0.7rem;
                  font-size: 1.1rem;
                  display: flex;
                  align-items: center;
                }
                .hero-info .hero-mobile-status .status {
                  display: flex;
                  align-items: center;
                  gap: 0.3em;
                  font-size: 0.9rem;
                  opacity: 0.95;
                  font-weight: 600;
                }
                .hero-info .hero-mobile-status .status-dot {
                  display: inline-block;
                  width: 0.6em;
                  height: 0.6em;
                  border-radius: 50%;
                  margin-right: 0.3em;
                  vertical-align: middle;
                  background-color: #4caf50;
                }
                .hero-info .hero-mobile-status .status-dot.finished {
                  background-color: #e53935;
                }
              
                .hero-info .hero-mobile-actions {
                  display: flex;
                  flex-direction: row;
                  align-items: center;
                  justify-content: center;
                  gap: 0.7rem;
                  width: 100%;
                  position: absolute;
                  left: 0;
                  bottom: 1.2rem;
                  z-index: 4;
                  padding: 0 1.2rem; /* Respecte le padding latéral du conteneur */
                  box-sizing: border-box;
                }
                .hero-info .hero-mobile-actions .hero-cta-button,
                .hero-info .hero-mobile-actions .hero-cta-button-anime {
                  font-size: 0.9rem;
                  padding: 0.6rem 1.8rem;
                  border-radius: 0.5rem;
                  min-width: 0;
                  flex: 1 1 0;
                  margin: 0;
                  max-width: 100%;
                  text-align: center;
                  box-sizing: border-box;
                }
                /* Un seul bouton = largeur 100% */
                .hero-info .hero-mobile-actions:only-child .hero-cta-button,
                .hero-info .hero-mobile-actions:only-child .hero-cta-button-anime,
                .hero-info .hero-mobile-actions .hero-cta-button:only-child,
                .hero_info .hero-mobile-actions .hero-cta-button-anime:only-child {
                  flex-basis: 100%;
                  width: 100%;
                  max-width: 100%;
                }
                /* Deux boutons = sur une ligne, prennent chacun la moitié */
                .hero-info .hero-mobile-actions .hero-cta-button,
                .hero-info .hero-mobile-actions .hero-cta-button-anime {
                  width: 100%;
                  max-width: 100%;
                }
              
                /* Cache la version desktop sur mobile */
                .hero-info .hero-latest-info {
                  display: none !important;
                }
              }
              
              @media (max-width: 768px) {
                .hero-carousel {
                  height: 470px;
                }
                .hero-info {
                  padding: 1.2rem;
                  padding-bottom: 2.4rem;
                }
                .hero-info .hero-series-title {
                  margin-right: 3rem;
                  font-size: 3rem;
                }
                .hero-info .hero-actions {
                  flex-direction: column;
                  align-items: stretch;
                  justify-content: flex-end;
                  width: 100%;
                  margin-top: auto;
                  margin-bottom: 0;
                }
                .hero-carousel-arrow {
                  width: 36px;
                  height: 36px;
                }
                .hero-carousel-arrow.prev {
                  left: 10px;
                }
                .hero-carousel-arrow.next {
                  right: 10px;
                }
                .hero-carousel-nav {
                  bottom: 15px;
                }
                .hero-nav-dot {
                  width: 10px;
                  height: 10px;
                }
              }
              
              .mobile-only {
                display: none;
              }
              
              .hero-info .hero-title-link {
                color: inherit;
                text-decoration: none;
              }
              
              .hero-info .hero-title-link:hover .hero-series-title {
                filter: brightness(0.7);
              }
              
              body#homepage main {
                padding-top: 0 !important;
              }
            ----------------------


            Fichier : presentation.css
            --------------------------
              .presentation-section.aesthetic-option-1 {
                max-width: 1400px;
                margin: 0 auto;
                padding: 2rem 1.5rem;
              }
              
              .presentation-page-header {
                display: flex;
                align-items: center;
                gap: 2rem;
                margin-bottom: 3.5rem;
                padding-bottom: 2rem;
                border-bottom: 1px solid rgba(var(--clr-text-rgb), 0.1);
              }
              
              body.dark .presentation-page-header {
                border-bottom-color: rgba(var(--clr-text-rgb), 0.15);
              }
              
              .profile-pic.page-header-profile-pic {
                width: 100px;
                height: 100px;
                border-radius: 18px;
                border: 3px solid var(--clr-primary);
                object-fit: cover;
                flex-shrink: 0;
              }
              
              .page-header-text {
                flex-grow: 1;
              }
              
              .page-main-title {
                font-size: 2.8rem;
                font-weight: 800;
                color: var(--clr-text);
                margin-bottom: 0.5rem;
                line-height: 1.2;
              }
              
              .page-main-title .custom-emoji {
                font-size: 0.8em;
              }
              
              .page-subtitle {
                font-size: 1.1rem;
                color: var(--clr-text-sub);
                line-height: 1.6;
              }
              
              .qa-dynamic-container .qa-item-lined {
                background: transparent;
                border-radius: 0;
                margin-bottom: 3rem;
                box-shadow: none;
                overflow: visible;
                border: none;
                padding: 0;
              }
              
              .qa-dynamic-container .qa-question-wrapper {
                display: flex;
                align-items: flex-start;
                padding: 0;
                background-color: transparent;
                border-bottom: none;
                gap: 1rem;
                margin-bottom: 1rem;
              }
              
              .qa-dynamic-container .qa-icon-lined {
                font-size: 1.8rem;
                color: var(--clr-primary);
                width: auto;
                margin-top: 0.2em;
                flex-shrink: 0;
              }
              
              .qa-dynamic-container .qa-question-content {
                flex-grow: 1;
              }
              
              .qa-dynamic-container .qa-question-lined {
                font-size: 1.7rem;
                font-weight: 700;
                color: var(--clr-text);
                line-height: 1.35;
                margin: 0 0 0.3rem 0;
              }
              
              body.dark .qa-dynamic-container .qa-question-lined {
                color: var(--clr-text);
              }
              
              .qa-dynamic-container .qa-question-author {
                font-size: 0.9rem;
                font-weight: 500;
                color: var(--clr-text-sub);
                opacity: 0.8;
              }
              
              .qa-dynamic-container .qa-answer-wrapper {
                padding: 0;
                font-size: 1.05rem;
                color: var(--clr-text-sub);
                line-height: 1.8;
                border-left: 3px solid rgba(var(--clr-primary-rgb), 0.2);
                margin-left: calc((1.8rem / 2) + (1rem / 2) - (3px / 2));
                padding-left: calc((1rem / 2) + (3px / 2));
              }
              
              body.dark .qa-dynamic-container .qa-answer-wrapper {
                border-left-color: rgba(var(--clr-primary-rgb), 0.3);
              }
              
              .qa-dynamic-container .qa-answer-wrapper p {
                margin-bottom: 1.2rem;
              }
              
              .qa-dynamic-container .qa-answer-wrapper p:last-child {
                margin-bottom: 0;
              }
              
              @media (max-width: 768px) {
                .presentation-section.aesthetic-option-1 {
                  padding: 1.5rem 1rem;
                }
              
                .presentation-page-header {
                  flex-direction: column;
                  text-align: center;
                  gap: 1.5rem;
                  margin-bottom: 2.5rem;
                }
              
                .profile-pic.page-header-profile-pic {
                  width: 80px;
                  height: 80px;
                  border-radius: 14px;
                }
              
                .page-main-title {
                  font-size: 1.8rem;
                }
              
                .page-subtitle {
                  font-size: 0.95rem;
                }
              
                .qa-dynamic-container .qa-item-lined {
                  margin-bottom: 2.5rem;
                }
              
                .qa-dynamic-container .qa-icon-lined {
                  font-size: 1.5rem;
                }
              
                .qa-dynamic-container .qa-question-lined {
                  font-size: 1.3rem;
                }
              
                .qa-dynamic-container .qa-question-author {
                  font-size: 0.8rem;
                }
              
                .qa-dynamic-container .qa-answer-wrapper {
                  font-size: 0.9rem;
                  margin-left: calc((1.5rem / 2) + (1rem / 2) - (3px / 2));
                  padding-left: calc((1rem / 2) + (3px / 2));
                }
              
                .qa-dynamic-container .qa-answer-wrapper p {
                  margin-bottom: 1rem;
                }
              }
            --------------------------


            Fichier : series-covers.css
            ---------------------------
              #covers-gallery-section {
                padding: 20px;
                width: auto;
                margin-left: auto;
                margin-right: auto;
              }
              
              .covers-gallery-title.page-title.section-title {
                font-size: 2rem;
                font-weight: 700;
                display: block;
                text-align: left;
                margin-bottom: 1.5rem;
                position: relative;
                color: var(--text-color-headings, var(--clr-text));
              }
              
              .covers-gallery-title.page-title.section-title::after {
                content: "";
                position: absolute;
                left: 0;
                bottom: -8px;
                width: 80px;
                height: 4px;
                background: var(--clr-primary);
              }
              
              .back-to-series {
                display: block;
                text-align: center;
                margin-top: -10px;
                margin-bottom: 25px;
                font-size: 1.1rem;
                font-weight: 500;
                text-decoration: none;
                color: var(--accent-color);
              }
              
              .back-to-series:hover {
                text-decoration: underline;
                color: var(--accent-color-hover);
              }
              
              .covers-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 20px;
              }
              
              .cover-item {
                position: relative;
                border-radius: 8px;
                overflow: hidden;
                cursor: pointer;
                background-color: var(--card-bg-color);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
                transition: transform 0.25s ease, box-shadow 0.25s ease;
              }
              
              .cover-item:hover {
                transform: translateY(-5px) scale(1.03);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
              }
              
              .cover-item img {
                display: block;
                width: 100%;
                height: auto;
                aspect-ratio: 2 / 3;
                object-fit: cover;
                border-radius: 8px;
              }
              
              .volume-caption-overlay {
                position: absolute;
                bottom: 0;
                left: 0;
                width: 100%;
                background: linear-gradient(to top, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0.6) 50%, rgba(0, 0, 0, 0) 100%);
                color: #fff;
                padding: 0.8rem 0.6rem 0.6rem;
                font-size: 0.9em;
                font-weight: 600;
                opacity: 0;
                transform: translateY(20px);
                transition: opacity 0.25s ease, transform 0.25s ease;
                text-align: center;
                pointer-events: none;
              }
              
              .cover-item:hover .volume-caption-overlay {
                opacity: 1;
                transform: translateY(0);
              }
              
              .loading-message,
              .no-covers {
                grid-column: 1 / -1;
                text-align: center;
                font-style: italic;
                margin-top: 30px;
                padding: 20px;
                color: var(--text-color-secondary);
              }
              
              #lightbox-modal {
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.9);
                display: flex;
                justify-content: center;
                align-items: center;
                padding: 20px;
                box-sizing: border-box;
              }
              
              #lightbox-modal .lightbox-content-wrapper {
                display: flex;
                justify-content: center;
                align-items: center;
                width: 100%;
                height: 100%;
              }
              
              #lightbox-modal .lightbox-image-container {
                display: flex;
                justify-content: center;
                align-items: center;
                width: 100%;
                height: 100%;
              }
              
              #lightbox-modal #lightbox-img {
                display: block;
                max-width: 100%;
                max-height: 100%;
                width: auto;
                height: auto;
                object-fit: contain;
                margin: auto;
                border-radius: 4px;
                animation: lightboxZoom 0.3s ease-out;
              }
              
              @keyframes lightboxZoom {
                from {
                  transform: scale(0.9);
                }
              
                to {
                  transform: scale(1);
                }
              }
              
              #lightbox-modal .lightbox-close {
                position: absolute;
                top: 15px;
                right: 15px;
                color: #f1f1f1;
                font-size: 35px;
                font-weight: bold;
                transition: 0.3s;
                cursor: pointer;
                user-select: none;
                z-index: 1001;
              }
              
              #lightbox-modal .lightbox-close:hover,
              #lightbox-modal .lightbox-close:focus {
                color: #bbb;
              }
              
              #lightbox-modal .lightbox-caption {
                position: absolute;
                bottom: 15px;
                left: 50%;
                transform: translateX(-50%);
                width: auto;
                max-width: 90%;
                padding: 8px 15px;
                background-color: rgba(0, 0, 0, 0.65);
                color: #f0f0f0;
                border-radius: 4px;
                font-size: 1em;
                font-weight: 500;
                text-align: center;
                user-select: none;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
                line-height: 1.4;
              }
              
              #lightbox-modal .lightbox-prev,
              #lightbox-modal .lightbox-next {
                cursor: pointer;
                position: absolute;
                top: 50%;
                width: auto;
                padding: 12px 16px;
                margin-top: -25px;
                color: white;
                font-weight: bold;
                font-size: 22px;
                transition: 0.4s ease;
                user-select: none;
                border-radius: 3px;
                background-color: rgba(50, 50, 50, 0.4);
              }
              
              #lightbox-modal .lightbox-prev:hover,
              #lightbox-modal .lightbox-next:hover {
                background-color: rgba(50, 50, 50, 0.7);
              }
              
              #lightbox-modal .lightbox-next {
                right: 20px;
              }
              
              #lightbox-modal .lightbox-prev {
                left: 20px;
              }
              
              
              @media (max-width: 700px) {
              
                .covers-grid {
                  display: grid;
                  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
                  gap: 15px;
                }
              
                .covers-gallery-title.page-title.section-title {
                  font-size: 1.2rem;
                  margin-bottom: 1.2rem;
                }
              
                .covers-gallery-title.page-title.section-title::after {
                  width: 50px;
                  height: 3px;
                  bottom: -6px;
                }
              
                #lightbox-modal {
                  padding: 10px;
                }
              
                #lightbox-modal .lightbox-prev,
                #lightbox-modal .lightbox-next {
                  font-size: 18px;
                  padding: 10px 12px;
                  margin-top: -22px;
                }
              
                #lightbox-modal .lightbox-close {
                  font-size: 28px;
                  top: 10px;
                  right: 10px;
                }
              
                #lightbox-modal .lightbox-caption {
                  font-size: 0.9em;
                  bottom: 8px;
                  padding: 6px 10px;
                }
              }
            ---------------------------


            Fichier : series-list.css
            -------------------------
              /* --- Composant de notation série --- */
              #series-rating-btn {
                display: flex;
                align-items: center;
                gap: 0.7em;
                border: 1.5px solid var(--clr-accent);
                background: var(--clr-bg-card);
                color: var(--clr-accent);
                border-radius: 4px;
                font-size: 1.1rem;
                padding: 0.75rem 1.3rem;
                cursor: pointer;
                transition: background 0.18s, border 0.18s, color 0.18s;
                position: relative;
              }
              #series-rating-btn .rating-star {
                color: var(--clr-accent);
                font-size: 1.2rem;
                margin-right: 0.3rem;
              }
              
              #series-rating-btn:hover {
                background: var(--clr-accent);
                color: var(--clr-text);
              }
              
              #series-rating-btn:hover .rating-star {
                color: var(--clr-text);
              }
              
              #series-rating-btn.accent {
                background: var(--clr-accent);
                border-color: var(--clr-accent);
                color: var(--clr-text);
              }
              
              #series-rating-btn.accent .rating-star {
                color: var(--clr-text);
              }
              
              .series-rating-tooltip {
                display: none;
                position: fixed;
                z-index: 10010;
                background: var(--clr-bg-card);
                color: var(--clr-text);
                border-radius: 7px;
                padding: 0.5em 1em;
                font-size: 0.98em;
                pointer-events: none;
                white-space: nowrap;
                font-weight: 500;
                border: 1.5px solid var(--clr-bg-card);
              }
              .series-rating-tooltip.visible {
                display: block;
              }
              
              .series-rating-menu {
                display: none;
                position: absolute;
                top: 110%;
                left: 0;
                z-index: 10011;
                background: var(--clr-bg-card);
                border: 1.5px solid var(--clr-bg-card-invert);
                border-radius: 4px;
                min-width: 220px;
                padding: 0.3em 0;
                font-size: 1.08em;
                animation: fadeInUp 0.18s;
              }
              
              .series-rating-menu.visible {
                display: block; /* Visible quand la classe est ajoutée */
                opacity: 1;
                transform: translateY(0);
              }
              
              .series-rating-menu ul {
                list-style: none;
                margin: 0;
                padding: 0;
              }
              .series-rating-menu li {
                padding: 0.5em 1.2em;
                cursor: pointer;
                transition: background 0.13s, color 0.13s;
                font-weight: 500;
              }
              .series-rating-menu li:hover {
                background: var(--clr-bg-card-invert);
                color: var(--clr-text-invert);
              }
              .series-rating-menu .remove-rating {
                color: var(--clr-accent);
                font-weight: 600;
                margin-top: 0.2em;
              }
              .series-rating-menu .remove-rating:hover {
                background: rgba(var(--clr-accent-rgb), 0.3);
                color: var(--clr-accent);
              }
              @keyframes fadeInUp {
                from {
                  opacity: 0;
                  transform: translateY(10px);
                }
                to {
                  opacity: 1;
                  transform: translateY(0);
                }
              }
              /* Style pour le bouton 'À jour' (non cliquable, opacité, sans hover) */
              .detail-action-btn.detail-action-btn--disabled {
                opacity: 0.5;
                pointer-events: none;
                cursor: default;
                box-shadow: none;
                filter: none;
                transition: none;
              }
              /* Styles communs pour MangaList et AnimeList */
              
              .series-list-view,
              .manga-list-view,
              .anime-list-view {
                background: var(--clr-bg-card);
                border-radius: 14px;
                padding: 2rem 2rem 1.7rem 2rem;
              }
              
              .detail-main-info {
                display: flex;
                gap: 1.5rem;
                align-items: flex-start;
              }
              
              .detail-infos {
                flex-grow: 1;
                display: flex;
                flex-direction: column;
              }
              
              .detail-meta {
                font-size: 1rem;
                color: var(--clr-text-sub);
                margin-top: 0;
                line-height: 1.5;
              }
              
              .detail-meta.detail-creator-info {
                font-size: 1.1rem;
                color: var(--iclr-text-sub-dark);
              }
              
              .detail-meta.detail-creator-info .creator-separator {
                display: inline-block;
                padding: 0 1rem;
              }
              
              .detail-additional-metadata {
                line-height: 1.6;
                color: var(--clr-text-sub);
                font-size: 0.95rem;
                margin-bottom: 0.8rem;
              }
              
              .detail-description {
                font-size: 0.95rem;
                color: var(--clr-text-sub);
                line-height: 1.6;
                padding-right: 11.5rem;
                box-sizing: border-box;
                margin-bottom: 0.5rem;
              }
              
              /* Supprimer les styles liés à la navigation et à la liste des chapitres */
              .detail-navigation-tabs,
              .detail-tab,
              .detail-chapters-section,
              .chapters-grid,
              .episodes-grid,
              .volume-header,
              .detail-chapter-item,
              .detail-chapter-number,
              .detail-chapter-title,
              .detail-chapter-date,
              .detail-chapter-collab,
              .licensed-chapter-item,
              .detail-episode-item,
              .detail-episode-number,
              .detail-episode-title,
              .detail-episode-date {
                display: none !important;
              }
              
              /* --- HERO BANNER --- */
              #hero-banner-section.full-width {
                top: 0px;
                left: 0px;
                z-index: -1;
                position: absolute;
                width: 100vw;
                max-width: 100vw;
                height: 340px;
                min-height: 220px;
                margin: 0 calc(50% - 50vw);
                border-radius: 0;
                z-index: 1;
                overflow: hidden;
                background: none !important;
                /* On gère le fond via les pseudo-éléments */
              }
              
              #hero-banner-section.full-width::before {
                content: "";
                position: absolute;
                inset: 0;
                z-index: 1;
                background-image: var(--hero-banner-bg);
                background-size: cover;
                background-position: center;
                /* On récupère l'URL du style inline JS */
                /* Mais on va le faire via JS juste après */
                filter: blur(12px) brightness(0.5);
                pointer-events: none;
                transition: filter 0.3s;
              }
              
              #hero-banner-section.full-width::after {
                content: "";
                position: absolute;
                inset: 0;
                z-index: 2;
                pointer-events: none;
              }
              
              .hero-banner-overlay {
                position: relative;
                z-index: 3;
                width: 100%;
                height: 100%;
              }
              
              /* --- INFOS PRINCIPALES --- */
              #series-info-section {
                top: 20px;
                position: relative;
                z-index: 3;
                margin-bottom: 60px;
              }
              
              .major-container {
                display: flex;
                flex-direction: row;
                gap: 20px;
                border-radius: 18px;
                align-items: flex-start;
                /* <-- ici */
                min-width: 0;
                width: 100%;
                margin-bottom: 20px;
              }
              
              .detail-cover-wrapper {
                flex: 0 0 auto;
                width: 220px;
                min-width: 180px;
                max-width: 240px;
                display: flex;
                align-items: flex-start;
                /* <-- ici */
                justify-content: flex-start;
                height: 330px;
                /* <-- ici */
              }
              
              .detail-cover {
                width: 100%;
                height: 330px;
                border-radius: 4px;
                background: #fff;
                object-fit: cover;
                display: block;
              }
              
              /* Texte à droite */
              .hero-info-text-container {
                flex: 1 1 0;
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                min-width: 0;
                color: #fff;
                z-index: 3;
                height: 330px;
                /* même hauteur que la couverture */
              }
              
              .hero-info-top {
                /* Aligne le haut */
              }
              
              .hero-info-bottom {
                margin-top: auto;
                display: flex;
                flex-direction: column;
                gap: 0.7rem;
              }
              
              .hero-titles {
                margin-bottom: 0.5rem;
              }
              
              .detail-jp-title {
                font-size: 1.3rem;
                font-weight: 700;
                line-height: 1.5rem;
                color: var(--clr-text-fifth);
              }
              
              .detail-title {
                font-size: 3rem;
                font-weight: 700;
                color: var(--iclr-text-dark);
                line-height: 1.13;
              }
              
              .series-metadata-container {
                display: flex;
                align-items: center;
                gap: 1.2rem;
                margin-bottom: 0.5rem;
                flex-wrap: wrap;
              }
              
              .detail-tags {
                display: flex;
                flex-wrap: wrap;
                gap: 0.4rem;
              }
              
              .detail-tag {
                background: rgba(var(--clr-bg-card-invert-rgb), 0.2);
                color: #fff;
                border-radius: 4px;
                padding: 0.2em 0.7em;
                font-size: 0.85em;
                font-weight: 400;
              }
              
              .series-status-year {
                display: flex;
                align-items: flex-end;
                gap: 0.5rem;
                font-size: 0.85em;
                color: #e0e0e0;
              }
              
              .status-indicator {
                display: inline-flex;
                align-items: center;
                gap: 0.3rem;
                font-size: 1rem;
              }
              
              .status-indicator .status-dot {
                display: inline-block;
                width: 0.5em;
                height: 0.5em;
                border-radius: 50%;
                margin-right: 0.18em;
                vertical-align: middle;
                background-color: #4caf50;
                flex-shrink: 0;
              }
              
              .status-indicator.finished .status-dot {
                background-color: #e53935;
              }
              
              .release-year {
                color: #e0e0e0;
              }
              
              #reading-actions-container {
                margin-top: 1.2rem;
                display: flex;
                gap: 1rem;
                flex-wrap: wrap;
              }
              
              .detail-action-btn,
              .reading-action-button {
                padding: 0.65rem 1.3rem;
                border-radius: 4px;
                font-size: 1rem;
                font-weight: 700;
                text-decoration: none;
                color: var(--clr-text);
                background-color: var(--clr-bg-card);
                transition: background-color 0.2s, color 0.2s, border-color 0.2s;
                display: inline-flex;
                align-items: center;
                gap: 0.5em;
                border: 1.5px solid var(--clr-bg-card-invert);
              }
              
              .detail-action-btn:hover,
              .reading-action-button:hover,
              .detail-action-btn:focus,
              .reading-action-button:focus {
                background-color: var(--clr-bg-card-invert);
                color: var(--clr-text-invert);
              }
              
              /* --- SECTION LISTE DES CHAPITRES --- */
              .series-chapters-list {
                margin-top: 2.5rem;
                margin-bottom: 2.5rem;
              }
              
              .chapters-list-header {
                display: flex;
                justify-content: space-between;
                align-items: flex-end;
                gap: 2rem;
                margin-bottom: 1.5rem;
                flex-wrap: wrap;
              }
              
              /* Nouvelle disposition : tabs + search/sort sur la même ligne, alignés en bas */
              .chapter-switch-tabs {
                display: flex;
                gap: 1.2rem;
                align-items: flex-end;
                flex: 1 1 auto;
              }
              
              .chapter-header-actions {
                display: flex;
                gap: 1rem;
                align-items: flex-end;
                flex: 0 0 auto;
              }
              
              /* Tabs style sans --clr-primary, opacité blanc/noir */
              .chapter-tab-btn {
                padding-bottom: 0.8rem;
                padding-right: 2.4rem;
                font-size: 1.4rem;
                font-weight: 600;
                border: none;
                background-color: transparent;
                color: var(--clr-text-fifth);
                cursor: pointer;
                border-bottom: 2px solid transparent;
                margin-bottom: -1px;
                transition: color 0.3s, border-color 0.3s;
                text-decoration: none;
                text-align: left;
                justify-content: flex-start;
                display: flex;
                border-bottom: 3px solid;
              }
              
              .chapter-tab-btn.active,
              .chapter-tab-btn:focus {
                font-weight: 700;
                color: var(--clr-text);
                border-bottom: 3px solid var(--clr-text);
                background: none;
              }
              
              /* Centrage à gauche du texte */
              .chapter-tab-btn {
                justify-content: flex-start;
                text-align: left;
              }
              
              .search-chapter input[type="text"] {
                padding: 0.5rem 1rem;
                border-radius: 6px;
                border: 1.5px solid rgba(var(--clr-bg-invert-rgb), 0.15);
                background: var(--clr-bg-card);
                color: var(--clr-text);
                font-size: 1rem;
                min-width: 180px;
                transition: border-color 0.2s;
              }
              
              .search-chapter input[type="text"]:hover {
                border-color: var(--clr-bg-invert);
              }
              
              .search-chapter input[type="text"]:focus {
                border-color: var(--clr-bg-invert);
                outline: none;
              }
              
              .sort-chapter-btn {
                background: var(--clr-bg-card);
                color: var(--clr-text-sub);
                border: 1.5px solid var(--clr-bg-card-invert);
                border-radius: 6px;
                padding: 0.5rem 1.2rem;
                font-size: 1rem;
                font-weight: 600;
                cursor: pointer;
                transition: background 0.2s, color 0.2s, border-color 0.2s;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              }
              
              .sort-chapter-btn:hover,
              .sort-chapter-btn:focus {
                background: var(--clr-bg-card-invert);
                color: var(--clr-text-invert);
                border-color: var(--clr-bg-card);
              }
              
              .chapters-list-container {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
                gap: 1rem;
              }
              
              .chapters-list-container .chapter-card-list-item {
                opacity: 0;
                transform: translateY(20px);
              }
              
              /* --- CARTE CHAPITRE LISTE --- */
              .chapter-card-list-item {
                font-weight: 600;
                background: var(--clr-bg-card);
                border-radius: 4px;
                min-width: 0;
                width: 100%;
                max-width: 100%;
                padding: 1.1rem;
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                transition: background 0.18s, color 0.18s;
                cursor: pointer;
              }
              
              .chapter-card-list-item:hover {
                background: var(--clr-bg-card-invert);
                color: var(--clr-text-invert);
              }
              
              .chapter-card-list-item:hover .chapter-card-list-number {
                color: var(--clr-text-invert);
                opacity: 1;
              }
              
              .chapter-card-list-item:hover .chapter-card-list-title {
                color: var(--clr-text-fifth-invert);
                opacity: 1;
              }
              
              .chapter-card-list-top,
              .chapter-card-list-bottom {
                display: flex;
                justify-content: space-between;
                align-items: flex-end;
                width: 100%;
                /* Empêche le retour à la ligne des enfants */
                flex-wrap: nowrap;
              }
              
              .chapter-card-list-left {
                min-width: 0;
                flex: 1 1 0;
                display: flex;
                align-items: flex-end;
              }
              
              .chapter-card-list-title {
                font-size: 0.8rem;
                font-weight: 500;
                color: var(--clr-text-fifth);
                margin-top: 0.2rem;
                display: block;
                max-width: 170px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                transition: color 0.18s, opacity 0.18s;
                min-width: 0;
                flex: 1 1 0;
              }
              
              .chapter-card-list-right {
                flex: 0 0 auto;
                display: flex;
                align-items: center;
                gap: 0.6em;
                white-space: nowrap;
              }
              
              .detail-chapter-views,
              .chapter-card-list-views,
              .chapter-card-list-likes,
              .chapter-card-list-comments {
                font-size: 0.8rem;
                color: var(--clr-text-sub);
                display: inline-flex;
                align-items: center;
                gap: 0.3em;
                margin-left: 0.6em;
                font-weight: 500;
                transition: color 0.18s;
              }
              
              .chapter-card-list-views {
                margin-left: 0;
              }
              
              .detail-chapter-views i,
              .chapter-card-list-likes i,
              .chapter-card-list-comments i,
              .chapter-card-list-views i {
                margin-right: 0.22em;
                font-size: 0.9em;
              }
              
              /* Hover: texte noir sur fond clair */
              .chapter-card-list-item:hover .chapter-card-list-views,
              .chapter-card-list-item:hover .chapter-card-list-comments {
                color: var(--clr-bg-card);
              }
              
              .chapter-card-list-item:hover .chapter-card-list-likes {
                opacity: 1;
                color: var(--clr-accent);
              }
              
              .chapter-card-list-likes.liked,
              .chapter-card-list-likes.liked .fa-heart,
              .chapter-card-list-likes.liked .likes-count,
              .chapter-card-list-likes .fa-heart.liked,
              .chapter-card-list-likes .likes-count.liked {
                opacity: 1;
                color: var(--clr-accent) !important;
              }
              
              /* Corrige le style des liens de carte chapitre */
              a.chapter-card-list-item {
                color: inherit;
                text-decoration: none;
                display: flex;
                flex-direction: column;
                font-weight: 600;
                background: var(--clr-bg-card);
                border-radius: 4px;
                min-width: 0;
                width: 100%;
                max-width: 100%;
                padding: 1.1rem;
                justify-content: space-between;
                transition: background 0.18s, color 0.18s;
                cursor: pointer;
              }
              
              /* Pour éviter le bleu/underline sur hover/focus */
              a.chapter-card-list-item:visited,
              a.chapter-card-list-item:active,
              a.chapter-card-list-item:focus,
              a.chapter-card-list-item:hover {
                color: inherit;
                text-decoration: none;
                outline: none;
              }
              
              @media (max-width: 900px) {
                .chapters-list-container {
                  gap: 1rem 1.2rem;
                }
              
                .chapter-card-list-item {
                  max-width: 100%;
                  min-width: 0;
                  width: 100%;
                  padding: 1rem 0.8rem 0.9rem 0.8rem;
                }
              }
              
              @media (max-width: 600px) {
                .series-chapters-list {
                  margin-top: 1.2rem;
                  margin-bottom: 1.2rem;
                }
              
                .chapters-list-header {
                  flex-direction: column;
                  align-items: stretch;
                  gap: 0.7rem;
                }
              
                .chapter-header-actions {
                  flex-direction: column;
                  gap: 0.5rem;
                  align-items: stretch;
                }
              
                .chapters-list-container {
                  flex-direction: column;
                  gap: 0.7rem;
                }
              
                .chapter-card-list-item {
                  padding: 0.8rem 0.6rem 0.7rem 0.6rem;
                }
              }
              
              /* --- BOUTON SEE MORE ET INFOS SUPPLÉMENTAIRES --- */
              .series-see-more-row {
                display: flex;
                justify-content: center;
                align-items: center;
                width: 100%;
                border-top: 2px solid rgba(var(--clr-text-rgb), 0.15);
                margin-top: 0.5rem;
                padding-top: 0.7rem;
                transition: max-height 0.3s, opacity 0.3s;
                overflow: hidden;
              }
              
              .series-see-more-row.hide {
                max-height: 0;
                opacity: 0;
                pointer-events: none;
              }
              
              .series-see-more-btn {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 0.8em;
                font-size: 0.8rem;
                font-weight: 500;
                background: rgba(var(--clr-text-rgb), 0.15);
                color: #fff;
                border: none;
                border-radius: 0 0 8px 8px;
                padding: 0.3em 1em;
                cursor: pointer;
                transition: background 0.18s, color 0.18s;
                margin-top: -0.9em;
                z-index: 2;
                position: relative;
              }
              
              .series-see-more-btn .see-more-label {
                padding: 0 0.7em;
                white-space: nowrap;
                font-size: 1em;
              }
              
              .series-see-more-btn i {
                font-size: 1.1em;
                vertical-align: middle;
              }
              
              .series-see-more-btn:hover,
              .series-see-more-btn:focus {
                background: rgba(var(--clr-text-rgb), 0.45);
                color: #fff;
              }
              
              .series-more-infos {
                margin-top: -0.9rem;
                border-radius: 0 0 10px 10px;
                font-size: 0.95rem;
                width: 100%;
                display: none;
                animation: fadeInMoreInfos 0.25s;
                /* Style identique à la description principale */
                color: var(--clr-text-sub);
                line-height: 1.8;
                padding-right: 11.5rem;
                box-sizing: border-box;
              }
              
              @keyframes fadeInMoreInfos {
                from {
                  opacity: 0;
                  transform: translateY(-10px);
                }
              
                to {
                  opacity: 1;
                  transform: translateY(0);
                }
              }
              
              /* Tooltip pour les cartes chapitre */
              .chapter-card-tooltip {
                position: fixed;
                left: 0;
                top: 0;
                z-index: 9999;
                min-width: 180px;
                max-width: 320px;
                background: rgba(var(--clr-bg-rgb-val), 0.65);
                color: #fff;
                border-radius: 4px;
                padding: 0.6rem 1.1rem;
                font-size: 0.85rem;
                line-height: 1.6;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.22s;
                white-space: pre-line;
                max-height: 220px;
                overflow-y: auto;
                font-family: inherit;
              }
              
              .chapter-card-tooltip.visible {
                opacity: 1;
              }
              
              .chapter-card-tooltip strong {
                font-weight: 700;
              }
              
              /************************************/
              /* --- SECTION RESPONSIVE MOBILE --- */
              /************************************/
              @media (max-width: 768px) {
                /* --- BLOC 1 : BANNIÈRE ET INFOS --- */
              
                #hero-banner-section {
                  height: auto; /* La hauteur s'adapte au contenu */
                  min-height: unset;
                  margin-top: -60px; /* Remonte pour coller au header */
                  padding-bottom: 1.5rem; /* Ajoute de l'espace en bas de la bannière */
                }
              
                #hero-banner-section.full-width {
                  height: 500px;
                }
              
                #hero-banner-section.full-width::before {
                  -webkit-mask-image: linear-gradient(to bottom, black 50%, transparent 100%);
                  mask-image: linear-gradient(to bottom, black 50%, transparent 100%);
                }
              
                #series-info-section {
                  margin-top: 0rem;
                  top: 15px;
                  flex-direction: column; /* Assure que les enfants (major-container, description...) sont empilés */
                  color: #fff; /* Le texte de base dans cette section sera blanc */
                  margin-bottom: 0px;
                }
              
                /* Cacher les conteneurs desktop qui seront déplacés par le JS */
                .hero-info-text-container .series-metadata-container,
                .hero-info-text-container #reading-actions-container,
                #description-wrapper {
                  display: none;
                }
              
                /* La grille principale d'info mobile (Couverture + Titres/Auteur) */
                .major-container {
                  display: grid;
                  grid-template-columns: 130px 1fr; /* Couverture fixe, reste flexible */
                  gap: 15px;
                  align-items: flex-start;
                  margin-bottom: -3px;
                }
              
                .detail-tag {
                  font-size: 0.7rem;
                  padding: 0.2rem 0.6rem;
                  border-radius: 4px;
                  background: rgba(var(--clr-bg-card-invert-rgb), 0.2);
                  color: #fff;
                }
              
                .detail-cover-wrapper {
                  width: 110px;
                  min-width: 130px;
                  height: auto;
                  flex-shrink: 0;
                }
              
                .detail-cover {
                  height: 190px;
                }
              
                .hero-info-text-container {
                  height: 190px;
                }
              
                .detail-jp-title {
                  font-size: 0.9rem;
                  opacity: 0.8;
                }
              
                .detail-title {
                  font-size: 1.8rem;
                  line-height: 1.2;
                }
              
                .hero-info-bottom {
                  margin-top: 0; /* Annule la marge auto du desktop */
                }
              
                .detail-meta.detail-creator-info {
                  font-size: 0.9rem;
                  opacity: 0.9;
                }
              
                /* --- Styles pour les conteneurs cibles remplis par le JS --- */
              
                /* Conteneur pour les tags */
                #mobile-tags-target {
                  margin-top: 1.2rem;
                }
                #mobile-tags-target .series-metadata-container {
                  display: block; /* On remet l'affichage */
                }
                #mobile-tags-target .series-status-year {
                  display: none; /* On cache le statut/année car on l'affiche séparément */
                }
              
                /* Conteneur pour le statut et l'année */
                #mobile-status-target {
                  margin-top: 1rem;
                }
                #mobile-status-target .series-metadata-container {
                  display: flex; /* On remet l'affichage */
                  justify-content: center;
                  gap: 1.5rem;
                }
                #mobile-status-target .detail-tags {
                  display: none; /* On cache les tags ici */
                }
                #mobile-status-target .series-status-year {
                  font-size: 0.9rem;
                }
              
                /* Conteneur pour les boutons d'action */
                #mobile-actions-target {
                  margin-top: 0rem;
                }
                #mobile-actions-target #reading-actions-container {
                  margin-top: 0rem;
                  display: flex;
                  justify-content: flex-start;
                  gap: 10px;
                  width: 100%;
                }
              
                /* Style de base pour TOUS les boutons en mobile */
                #mobile-actions-target .detail-action-btn {
                  font-size: 0.85rem;
                  padding: 0.4rem 1.1rem;
                  border-radius: 4px; /* Un peu plus arrondi pour un look moderne */
                  flex-grow: 1; /* Permet aux boutons de partager l'espace disponible */
                  text-align: center;
                  justify-content: center;
                  background-color: rgba(var(--clr-bg-invert-rgb));
                  border-color: var(--clr-bg-invert);
                  color: var(--clr-text-invert);
                  backdrop-filter: blur(4px);
                  -webkit-backdrop-filter: blur(4px);
                }
              
                /* Style spécifique pour le bouton "Continuer" (action primaire) */
                #mobile-actions-target .detail-action-btn.detail-action-btn--continue {
                  background-color: rgba(var(--clr-bg-invert-rgb), 0.1);
                  color: var(--clr-text);
                }
              
                /* Style du bouton de notation une fois que l'utilisateur a voté */
                #mobile-actions-target #series-rating-btn.accent {
                  padding: 0.55rem 1.1rem;
                  background-color: var(--clr-accent);
                  border-color: var(--clr-accent);
                  color: var(--clr-text);
                }
              
                /* Style spécifique pour le bouton "À jour" (inactif) */
                #mobile-actions-target .detail-action-btn.detail-action-btn--disabled {
                  background-color: rgba(var(--clr-bg-invert-rgb), 0.1);
                  border-color: rgba(var(--clr-bg-invert-rgb), 0.2);
                  color: rgba(var(--clr-bg-invert-rgb), 0.5);
                  backdrop-filter: none;
                  -webkit-backdrop-filter: none;
                  padding: 0.4rem 0.1rem;
                }
              
                #series-rating-btn .rating-star {
                  font-size: 1rem;
                }
              
                /* Conteneur pour la description */
                #mobile-description-target {
                  margin-top: 15px;
                  text-align: center;
                }
                #mobile-description-target #description-wrapper {
                  display: block; /* On affiche le conteneur déplacé */
                }
                #mobile-description-target .detail-description {
                  padding-right: 0rem;
                  color: var(--clr-text-sub);
                  font-size: 0.85rem;
                  text-align: left;
                  display: block;
                }
              
                .series-more-infos {
                  padding-right: 0rem;
                  text-align: left;
                  font-size: 0.85rem;
                }
              
                /* --- BLOC 2 : LISTE DES CHAPITRES --- */
                .series-chapters-list {
                  margin-top: 3rem;
                }
              
                .chapters-list-header {
                  flex-direction: column;
                  align-items: stretch;
                  gap: 1rem;
                }
              
                .chapters-list-container {
                  grid-template-columns: 1fr; /* Passage en une seule colonne */
                  gap: 10px;
                }
              }
            -------------------------

    Dossier : data/

        Fichier : avatars.json
        ----------------------
          [
            "Asakura_Suzuka.jpg",
            "Hoshina_Subaru.jpg",
            "Natsusawa_Saku.jpg",
            "Sawatari_Ayumi.jpg",
            "Tsukada_Shin.jpg",
            "Tsumugi_Kyoko.jpg",
            "Tsumugi_Rintarô.jpg",
            "Usami_Shohei.jpg",
            "Waguri_Kaoruko.jpg",
            "Yorita_Ayato.jpg",
            "Yuzuhara_Madoka.jpg"
          ]
        ----------------------


        Fichier : config.json
        ---------------------
          {
            "ENV": "LOCAL_DEV",
            "URL_GIT_CUBARI": "https://api.github.com/repos/Bigherooooo/Cubari/contents",
            "URL_RAW_JSON_GITHUB": "raw/Bigherooooo/BigSolo-Site/refs/heads/master/data/series/",
            "URL_API_IMGCHEST": "/api/imgchest-chapter-pages",
            "LOCAL_SERIES_FILES": [
              "Kaoru_Hana_wa_Rin_to_Saku.json",
              "Wakaba-sanchi_no_Aoi_Koi.json",
              "Succession.json",
              "Koyori_no_Kaerimichi.json",
              "Uturu.json",
              "Alice_no_Gomi_Yashiki.json",
              "Asayake_no_Iro.json",
              "Hoshi_Furu_Yoru_ni.json",
              "Usemono_Sagashi.json",
              "Bus_Romance.json",
              "Kurage_no_Uta.json",
              "Kiraboshi_no_Meryl.json",
              "Futari.json",
              "Toumei_to_Zanzou.json",
              "Takaki_Tsuyoshi_OS.json"
            ]
          }
        ---------------------


        Fichier : presentation-data.json
        --------------------------------
          [
            {
              "icon": "fas fa-user-astronaut",
              "question": "Qui es-tu ? (On veut tout savoir : prénom, nom, âge, adresse, ...)",
              "author": "Par : Jelly",
              "answer_html": "<p>Ah non ! N’abusons pas non plus, mais je suis seulement un random passionné d'un peu trop de trucs au point de vite passer à autre chose. Et pour ça, je navigue sur Discord depuis 2016. J'ai pu découvrir d'innombrables communautés et m'investir dans divers projets qui ont forgé ma curiosité et mon envie d'en apprendre toujours plus. C'est un peu comme ça que tout a commencé !</p>"
            },
            {
              "icon": "fas fa-feather-alt",
              "question": "Comment as-tu découvert “Kaoru Hana” et t’es-tu dit : “Hop ! Je vais la traduire !” ? Lisais-tu la série depuis un moment avant ? T’es-tu lancé dessus impulsivement ?",
              "author": "Par : Odin",
              "answer_html": "<p>Hmm, c’est une assez drôle histoire étant donné que j’ai découvert la série une à deux semaines après la sortie du premier chapitre japonais. J’ai fait une suggestion à mon ancienne team de la traduire (qui a été refusée). Il aura fallu attendre six mois pour qu’une version anglaise commence (recommandation d’une amie à une team US qui connaissait mon projet).</p><p>Au final, mon ancienne team ne voulant toujours pas de la série, j’ai pris plusieurs mois à réfléchir pour au final la débuter seul.</p>"
            },
            {
              "icon": "fas fa-route",
              "question": "Avec quelle série as-tu commencé le Scantrad ? Depuis combien de temps t'occupes-tu de traduire et de poster ?",
              "author": "Par : Hanabi",
              "answer_html": "<p>Oula, ça remonte ! J’ai commencé en juin 2021 dans ma première et dernière team “BlueSolo” passant par la team anglaise “PO2”. Au final, j’ai pu travailler sur des séries comme “Kaoru Hana wa Rin to Saku”, “Oshi no Ko”, “Frieren”, “Exorcist wo otosenai”, “Blue Lock”, “Dog and Scum”, “Nezumi”, “Adabana”, “Red Hood”, “Insomniaques”, “Shota Shoten!”, “Blue Box”, “Gachiakuta”, “Kagurabachi”, “Mushoku tensei”, “Undead Unluck” et quelques autres séries et OS.</p><p>Bien que j’aie commencé en 2021, je n’étais que lettreur jusque-là. Je n’ai commencé qu’à vraiment traduire en fin d’année 2023. J’avais déjà essayé en 2022 avec un début plus que catastrophique…</p><p>J'ai de plus eu la brillante idée de tenir à jour un tableau Excel avec tous les chapitres sur lesquels j'ai participé, ce qui me fait aujourd'hui un total de... 378 chapitres !</p>"
            },
            {
              "icon": "fas fa-hourglass-half",
              "question": "Quand sortent les chapitres et combien de temps ça te prend pour traduire et poster un chapitre en général ?",
              "author": "Par : Hanabi",
              "answer_html": "<p>“Kaoru Hana” est une série hebdomadaire, alors chaque semaine, à moins que l’auteur ou le magazine prennent une pause. Enfin, lorsque j'ai le temps et motivation pour les autres séries et One-Shot. Les annonces sont faites via Discord & Twitter !</p><p>Il doit se passer 7h entre le moment où je récupère les pages et celui où je publie. En général, la traduction me prend 2~3h, la relecture 30 min, le lettrage & redraw 3h, relecture finale 30 min. Il faut savoir que la série est particulièrement “longue”. En moyenne, un hebdomadaire représente 3 000 à 4 000 caractères pour 120 lignes. Kaoru Hana tourne plutôt autour des 5 000 à 7 000 caractères pour 200 lignes :)</p>"
            },
            {
              "icon": "fas fa-people-carry",
              "question": "Es-tu tout seul à t’occuper de la traduction et la publication ? (Je sais que madame te file un coup de main pour la trad, mais chut !) Est-ce compliqué de jongler entre Discord, le Scantrad, le développement du Site, tes études et ta vie ?",
              "author": "Par : Hanabi",
              "answer_html": "<p>Haha, il est vrai que Madame me file un coup main. Mais il a été dit que ce ne serait uniquement des One-Shot et non des séries sur lesquels je m’engage. “Dessiner l’invisible” a été traduite par ses soins avec ma relecture. Une vraie traductrice en devenir !</p><p>Oui et non. J’ai débuté “Kaoru Hana” en juin, trois mois plus tard, je rentrais en première année d'étude supérieure. Les sorties de chapitre se faisaient rares à cette période étant donné que les cours était particulièrement compliqué. Mais aussi dû à des problèmes de santé avec une dépression et découverte de maladie auto-immune. Ce n’est qu'une semaine à l’hôpital et deux mois plus tard que les sorties ont repris en collaboration avec mon ancienne team temporairement. Je parle brièvement de cet épisode étant donné que c’est celui-ci qui m’a “aidé” (ironie du sort) à re-organiser ma vie. Dorénavant, j’ai pu prioriser les choses et traduire “Kaoru Hana” m’aide à changer d’air chaque semaine entre les études et le reste.</p><p>Mais avant d'avoir pu y arriver seul, j'ai eu l'aide de deux personnes en particulier. Malgré mon départ de mon ancienne team et les tensions que ça a créé, elles ont continué à m'accompagner, en me formant de A à Z à la traduction et à la relecture. Sans eux, je n'y serais jamais arrivé et les chapitres n'auraient sûrement pas été aussi agréables à lire. Alors, un immense merci à vous deux.</p>"
            },
            {
              "icon": "fas fa-user-secret",
              "question": "Quel est ton métier “secret” à côté de tout ça ? Quelles sont tes ambitions pour la suite (Dominer le monde du Scantrad, peut-être) ?",
              "author": "Par : Hanabi",
              "answer_html": "<p>Je suis Batman ! Euh, pardon. Je suis étudiant en quatrième année de double diplôme.</p><p>Mes ambitions sont assez simples, en résumé, ce serait de continuer à vivre pleinement et de toujours trouver du plaisir dans chacun de mes projets.</p>"
            },
            {
              "icon": "fas fa-lightbulb",
              "question": "D'où t'est venue l'idée de créer ce serveur (un éclair de génie nocturne) ? Balance une anecdote marrante liée à la création du serveur !",
              "author": "Par : Cx_Tssr",
              "answer_html": "<p>Je voulais créer un endroit où les lecteurs de la série pourraient se retrouver et parler des différents “ship” et drama autour des chapitres.</p><p>Deux pour le prix d’une ! J’ai créé le serveur pour la sortie du chapitre 24. Il aura fallu attendre 70 chapitres pour l’annoncer officiellement… Mais aussi, à l’ouverture du serveur Discord, je m’attendais à voir 50 membres, max 150 dans mes rêves les plus fous ! Aujourd’hui, nous sommes presque à 900 et le premier épisode de l’animé n’est pas encore sorti !</p>"
            },
            {
              "icon": "fas fa-layer-group",
              "question": "Ton top 3 de mangas (hors Kaoru, sinon c'est de la triche) ? Et as-tu déjà eu un crush sur un perso de manga ? (Balance un nom !)",
              "author": "Par : Cx_Tssr",
              "answer_html": "<p>Mon top trois… Compliqué, mais je dirais “One Piece”, “Haikyuu!!” et “Bakuman.”. Raaaah, j'ai tellement envie d’en ajouter trois autres :c !</p><p>Oui, Asuka Soryu Langley… My queen :o</p>"
            },
            {
              "icon": "fas fa-medal",
              "question": "Pourquoi est-t-il préférable de lire sur ton site que sur Comick.io/Anime-Sama/etc (vends-nous du rêve !) ?",
              "author": "Par : Erwxn92",
              "answer_html": "<p>Déjà parce que je suis très fier de mon site. J'ai utilisé la base de la première version du site de ScanR pour l'adapter au mien en créeant après tout le reste comme la page \"Fan-Arts\", \"Detail-series\" et encore plus à l'avenir !</p><p>Moi pas content ! Les équipes de Scantrad publient en général les chapitres sur des sites comme MangaDex. Les autres sites comme “Comick.io”, “Anime-Sama” récupèrent les pages et mettent des pubs sur leur site afin de se faire de l’argent derrière le dos des équipes. Dans mon cas, la série ne pouvant plus être publiée sur MangaDex, j’ai décidé d’ouvrir un site afin d’y publier mes chapitres. Un autre point important est que je peux modifier les pages après publication pour corriger des erreurs, ajouter les pages “fan-colo” alors que sur les autres sites, c’est impossible. À vous de voir !</p>"
            },
            {
              "icon": "fas fa-infinity",
              "question": "Que comptes-tu traduire après Kaoru (des pépites en perspective) ?",
              "author": "Par : Luxry",
              "answer_html": "<p>Comme d’habitude, des One-Shot et de temps en temps, des chapitres de “Wakaba Home” lorsque j’ai le temps et la motivation. Bien qu’une autre série hebdomadaire m’intéresse particulièrement depuis bientôt sept mois…</p>"
            },
            {
              "icon": "fas fa-cookie-bite",
              "question": "Pain au chocolat ou chocolatine ? (Le croissant au chocolat est exclu, attention, sujet sensible !)",
              "author": "Par : CriosChan",
              "answer_html": "<p>Chocolatine. On m’a encore mal regardé hier. On m’a même dit que ça se soignait…</p>"
            }
          ]
        --------------------------------


        Fichier : reco.json
        -------------------
          [
            {
              "file": "Kaoru_Hana_wa_Rin_to_Saku.json",
              "color": "#D6A3FF"
            },
            {
              "file": "Koyori_no_Kaerimichi.json",
              "color": "#FA8C8C"
            },
            {
              "file": "Wakaba-sanchi_no_Aoi_Koi.json",
              "color": "#B2F296"
            },
            {
              "file": "Toumei_to_Zanzou.json",
              "color": "#8CBAFA"
            },
            {
              "file": "Alice_no_Gomi_Yashiki.json",
              "color": "#FAD08C"
            }
          ]
        -------------------

        Dossier : colos/

            Fichier : author_info.json
            --------------------------
              {
                  "842003392368869376": {
                      "username": "•Clém ",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/clemdraw ",
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/842003392368869376.webp"
                  },
                  "328191996579545088": {
                      "username": "CriosChan",
                      "twitter": "https://x.com/crioschancolos",
                      "instagram": "https://www.instagram.com/crioschancolos/",
                      "tiktok": "https://www.tiktok.com/@crioschancolos",
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/328191996579545088.webp"
                  },
                  "888761320575483984": {
                      "username": "Sasori_DSR",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/888761320575483984.webp"
                  },
                  "404251566443462666": {
                      "username": "Lamba",
                      "twitter": "https://x.com/lambaaatr/",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/404251566443462666.webp"
                  },
                  "443860993416626206": {
                      "username": "Joker the Re:Angel",
                      "twitter": "https://x.com/JokerTheReAngel/ ",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/443860993416626206.webp"
                  },
                  "741375758416478208": {
                      "username": "bt.bilol",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": "https://www.tiktok.com/@bt.bilol",
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/741375758416478208.webp"
                  },
                  "492423264350633984": {
                      "username": "vingt2",
                      "twitter": "https://x.com/vickielebolide",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/492423264350633984.webp"
                  },
                  "726420969845162064": {
                      "username": "Blixia",
                      "twitter": "https://x.com/Blixiaz",
                      "instagram": null,
                      "tiktok": "https://www.tiktok.com/@blixiaa",
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/726420969845162064.webp"
                  },
                  "688028265268772864": {
                      "username": "Jelly",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/688028265268772864.webp"
                  },
                  "482587924911751168": {
                      "username": "JojoGg",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/482587924911751168.webp"
                  },
                  "907607995452653618": {
                      "username": "cx_tssr",
                      "twitter": "https://x.com/carla_tssr",
                      "instagram": "https://www.instagram.com/cx4rlart",
                      "tiktok": "https://www.instagram.com/cx4rlart",
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/907607995452653618.webp"
                  },
                  "185424818697404417": {
                      "username": "Ryo11",
                      "twitter": "https://x.com/TheRyohei11",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": "https://www.reddit.com/user/Opalin11/",
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/185424818697404417.webp"
                  },
                  "1340257318851317776": {
                      "username": "ryujin01690",
                      "twitter": "https://x.com/roulart1?s=21",
                      "instagram": "https://www.instagram.com/roulant0?igsh=MTJzemRpM2Z0bW8xaw%3D%3D&utm_source=qr",
                      "tiktok": "https://www.tiktok.com/@roulant1?_t=ZG-8xvChtgEYZF&_r=1",
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/1340257318851317776.webp"
                  },
                  "1098738913335582720": {
                      "username": "chaeri_art",
                      "twitter": "https://x.com/Chaeri_art?t=ST4t2lIGgpKknpOoDc8-NA&s=09",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/1098738913335582720.webp"
                  },
                  "716217079421993020": {
                      "username": "Wassim",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/716217079421993020.webp"
                  },
                  "689854778439761950": {
                      "username": "grisees",
                      "twitter": "https://x.com/GriseDessin?t=uZsc3dREOBV9i_zEbBwC6w&s=09",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/689854778439761950.webp"
                  },
                  "348472904117125123": {
                      "username": "erwxn92",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/348472904117125123.webp"
                  },
                  "391976423742504960": {
                      "username": "maxence0464",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/22maxence22/",
                      "tiktok": null,
                      "reddit": null,
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/391976423742504960.webp"
                  },
                  "471101684546928651": {
                      "username": "Rosie",
                      "twitter": "https://x.com/roseswined?s=21",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": "https://www.reddit.com/user/zerosetwo/",
                      "profile_img": "https://file.garden/aDmcfobZthZjQO3m/avatars/471101684546928651.webp"
                  }
              }
            --------------------------


            Fichier : colos.json
            --------------------
              [
                  {
                      "id": 1,
                      "author_id": "842003392368869376",
                      "chapitre": 148.0,
                      "page": 2,
                      "date": "2025-04-24 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 2,
                      "author_id": "842003392368869376",
                      "chapitre": 142.0,
                      "page": 21,
                      "date": "2025-04-25 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 3,
                      "author_id": "842003392368869376",
                      "chapitre": 100.0,
                      "page": 19,
                      "date": "2025-04-28 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 4,
                      "author_id": "842003392368869376",
                      "chapitre": 109.0,
                      "page": 10,
                      "date": "2025-04-30 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 5,
                      "author_id": "842003392368869376",
                      "chapitre": 149.0,
                      "page": 2,
                      "date": "2025-05-02 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 6,
                      "author_id": "842003392368869376",
                      "chapitre": 150.0,
                      "page": 2,
                      "date": "2025-05-15 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 7,
                      "author_id": "888761320575483984",
                      "chapitre": 10.0,
                      "page": 17,
                      "date": "2025-02-25 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 8,
                      "author_id": "328191996579545088",
                      "chapitre": 117.0,
                      "page": 4,
                      "date": "2024-07-05 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868697572380213705/photo/1",
                      "instagram": "https://www.instagram.com/p/DCpChX5AoR2/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 9,
                      "author_id": "328191996579545088",
                      "chapitre": 118.0,
                      "page": 24,
                      "date": "2024-07-12 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868697660338925671/photo/1",
                      "instagram": "https://www.instagram.com/p/DCpCsbDgNcS/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 10,
                      "author_id": "328191996579545088",
                      "chapitre": 100.5,
                      "page": 7,
                      "date": "2024-07-15 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868697793994609086/photo/1",
                      "instagram": "https://www.instagram.com/p/DCpCxtBAUvn/",
                      "tiktok": "https://www.tiktok.com/@crioschancolos/video/7465797919870815521",
                      "reddit": null
                  },
                  {
                      "id": 11,
                      "author_id": "328191996579545088",
                      "chapitre": 125.0,
                      "page": 3,
                      "date": "2024-09-12 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868697875594846472/photo/1",
                      "instagram": "https://www.instagram.com/p/DCpC4e3AqNZ/",
                      "tiktok": "https://www.tiktok.com/@crioschancolos/video/7465798207755308321",
                      "reddit": null
                  },
                  {
                      "id": 12,
                      "author_id": "328191996579545088",
                      "chapitre": 107.5,
                      "page": 6,
                      "date": "2024-10-10 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868697978602766473/photo/1",
                      "instagram": "https://www.instagram.com/p/DCpC-D_gU1F/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 13,
                      "author_id": "328191996579545088",
                      "chapitre": 129.0,
                      "page": 2,
                      "date": "2024-10-17 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868698109049815396/photo/1",
                      "instagram": "https://www.instagram.com/p/DCw0dATg3z9/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 14,
                      "author_id": "328191996579545088",
                      "chapitre": 130.0,
                      "page": 19,
                      "date": "2024-10-24 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868698182760513598/photo/1",
                      "instagram": "https://www.instagram.com/p/DCw8yWnA5U9/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 15,
                      "author_id": "328191996579545088",
                      "chapitre": 131.0,
                      "page": 6,
                      "date": "2024-10-30 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868698259310756336/photo/1",
                      "instagram": "https://www.instagram.com/p/DCw-J7EAnc4/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 16,
                      "author_id": "328191996579545088",
                      "chapitre": 132.0,
                      "page": 16,
                      "date": "2024-11-27 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868698646109409371/photo/1",
                      "instagram": "https://www.instagram.com/p/DC9sEiugDNz/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 17,
                      "author_id": "328191996579545088",
                      "chapitre": 133.0,
                      "page": 21,
                      "date": "2024-12-05 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868698755475865949/photo/1",
                      "instagram": "https://www.instagram.com/p/DDWlgsbAodh/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 18,
                      "author_id": "328191996579545088",
                      "chapitre": 133.0,
                      "page": 21,
                      "date": "2024-12-05 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1868699375993864517/photo/1",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 19,
                      "author_id": "328191996579545088",
                      "chapitre": 135.0,
                      "page": 19,
                      "date": "2025-01-02 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1875316488372207766/photo/1",
                      "instagram": "https://www.instagram.com/p/DEYZR6jgmBg/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 20,
                      "author_id": "328191996579545088",
                      "chapitre": 138.0,
                      "page": 1,
                      "date": "2025-01-30 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1886365445852123403/photo/1",
                      "instagram": "https://www.instagram.com/p/DFm410JAtCM/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 21,
                      "author_id": "328191996579545088",
                      "chapitre": 138.0,
                      "page": 18,
                      "date": "2025-01-31 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1886365541838856419/photo/1",
                      "instagram": "https://www.instagram.com/p/DFm46OqgFYd/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 22,
                      "author_id": "328191996579545088",
                      "chapitre": 11.0,
                      "page": 20,
                      "date": "2025-02-21 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1895519324091367628/photo/1",
                      "instagram": "https://www.instagram.com/p/DGn8D_Mg6HK/",
                      "tiktok": "https://www.tiktok.com/@crioschancolos/video/7476523401054571798",
                      "reddit": null
                  },
                  {
                      "id": 23,
                      "author_id": "328191996579545088",
                      "chapitre": 130.0,
                      "page": 16,
                      "date": "2025-03-06 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1903146301555970425/photo/1",
                      "instagram": "https://www.instagram.com/p/DHeIV7KAUv5/",
                      "tiktok": "https://www.tiktok.com/@crioschancolos/video/7484339910334352662",
                      "reddit": null
                  },
                  {
                      "id": 24,
                      "author_id": "328191996579545088",
                      "chapitre": 84.0,
                      "page": 16,
                      "date": "2025-03-29 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1911033428117438794/photo/1",
                      "instagram": "https://www.instagram.com/p/DIWKZChNl3u/",
                      "tiktok": "https://www.tiktok.com/@crioschancolos/video/7492403761235692822",
                      "reddit": null
                  },
                  {
                      "id": 25,
                      "author_id": "404251566443462666",
                      "chapitre": 34.0,
                      "page": 29,
                      "date": "2024-06-20 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1803805920641634554?s=46&t=CiWxjR4_zmrILUGmCqcJog ",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 26,
                      "author_id": "443860993416626206",
                      "chapitre": 10.0,
                      "page": 17,
                      "date": "2025-02-25 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1895868151054930264",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 27,
                      "author_id": "443860993416626206",
                      "chapitre": 112.5,
                      "page": 10,
                      "date": "2025-01-25 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 28,
                      "author_id": "443860993416626206",
                      "chapitre": 128.0,
                      "page": 16,
                      "date": "2024-10-10 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1844477499994145097",
                      "instagram": "https://www.instagram.com/p/DBB-eFotS3G/?igsh=MXRmd2RnZDJoOHg2dA==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 29,
                      "author_id": "443860993416626206",
                      "chapitre": 129.0,
                      "page": 14,
                      "date": "2024-10-26 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1850448148629508424",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 30,
                      "author_id": "443860993416626206",
                      "chapitre": 130.0,
                      "page": 16,
                      "date": "2024-10-30 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1851947833651343428 ",
                      "instagram": "https://www.instagram.com/p/DB03BTuNrLq/?igsh=MWZnMDl6OHY0M296eA==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 31,
                      "author_id": "443860993416626206",
                      "chapitre": 130.0,
                      "page": 16,
                      "date": "2025-03-17 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1903143811926139365",
                      "instagram": "https://www.instagram.com/p/DHlwo6asVyQ/?igsh=MWI2YXpyZTdha3kzNQ==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 32,
                      "author_id": "443860993416626206",
                      "chapitre": 131.0,
                      "page": 22,
                      "date": "2024-11-02 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1852782889005461772",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 33,
                      "author_id": "443860993416626206",
                      "chapitre": 132.0,
                      "page": 20,
                      "date": "2024-12-02 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1865439209424585136",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 34,
                      "author_id": "443860993416626206",
                      "chapitre": 133.0,
                      "page": 21,
                      "date": "2024-12-05 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1865439627475116112",
                      "instagram": "https://www.instagram.com/p/DDtr42DtnnI/?igsh=aGlrODgwamlieGFo",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 35,
                      "author_id": "443860993416626206",
                      "chapitre": 134.0,
                      "page": 21,
                      "date": "2024-12-19 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1871306513232384296",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 36,
                      "author_id": "443860993416626206",
                      "chapitre": 135.0,
                      "page": 14,
                      "date": "2025-01-03 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1875318444356464722",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 37,
                      "author_id": "443860993416626206",
                      "chapitre": 136.0,
                      "page": 12,
                      "date": "2025-01-26 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 38,
                      "author_id": "443860993416626206",
                      "chapitre": 138.0,
                      "page": 1,
                      "date": "2025-02-06 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 39,
                      "author_id": "443860993416626206",
                      "chapitre": 139.0,
                      "page": 10,
                      "date": "2025-02-12 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 40,
                      "author_id": "443860993416626206",
                      "chapitre": 141.0,
                      "page": 8,
                      "date": "2025-03-12 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 41,
                      "author_id": "741375758416478208",
                      "chapitre": 18.0,
                      "page": 14,
                      "date": "2025-03-01 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": "https://www.tiktok.com/@bt.bilol/photo/7476634840796859670?is_from_webapp=1&sender_device=pc",
                      "reddit": null
                  },
                  {
                      "id": 42,
                      "author_id": "741375758416478208",
                      "chapitre": 133.0,
                      "page": 1,
                      "date": "2024-12-21 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": "https://www.tiktok.com/@bt.bilol/photo/7454978976600083734?is_from_webapp=1&sender_device=pc",
                      "reddit": null
                  },
                  {
                      "id": 43,
                      "author_id": "404251566443462666",
                      "chapitre": 119.0,
                      "page": 14,
                      "date": "2024-08-11 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1823076225570795859?s=46&t=CiWxjR4_zmrILUGmCqcJog",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkxJFCL/",
                      "reddit": null
                  },
                  {
                      "id": 44,
                      "author_id": "404251566443462666",
                      "chapitre": 130.0,
                      "page": 16,
                      "date": "2024-10-30 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1851566838024663354?s=46&t=CiWxjR4_zmrILUGmCqcJog",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkx88oU/",
                      "reddit": null
                  },
                  {
                      "id": 45,
                      "author_id": "404251566443462666",
                      "chapitre": 39.0,
                      "page": 19,
                      "date": "2025-01-10 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1878381909438583231?s=46&t=CiWxjR4_zmrILUGmCqcJog",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkQ8e6x/",
                      "reddit": null
                  },
                  {
                      "id": 46,
                      "author_id": "404251566443462666",
                      "chapitre": 137.0,
                      "page": 21,
                      "date": "2025-01-25 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1883455702846632137?s=46&t=CiWxjR4_zmrILUGmCqcJog",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkQLskJ/",
                      "reddit": null
                  },
                  {
                      "id": 47,
                      "author_id": "404251566443462666",
                      "chapitre": 15.0,
                      "page": 22,
                      "date": "2025-02-14 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 48,
                      "author_id": "404251566443462666",
                      "chapitre": 84.0,
                      "page": 16,
                      "date": "2025-04-05 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 49,
                      "author_id": "404251566443462666",
                      "chapitre": 100.0,
                      "page": 19,
                      "date": "2025-04-08 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1904070086425723030?s=46&t=CiWxjR4_zmrILUGmCqcJog",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkQBTnp/",
                      "reddit": null
                  },
                  {
                      "id": 50,
                      "author_id": "404251566443462666",
                      "chapitre": 999.0,
                      "page": 1,
                      "date": "2025-05-24 00:00:00",
                      "twitter": "https://x.com/lambaaatr/status/1926567418437984682?s=46&t=CiWxjR4_zmrILUGmCqcJog",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkQhbMY/",
                      "reddit": null
                  },
                  {
                      "id": 51,
                      "author_id": "492423264350633984",
                      "chapitre": 77.0,
                      "page": 4,
                      "date": "2023-07-24 00:00:00",
                      "twitter": "https://x.com/vickielebolide/status/1683492825785147393/photo/1",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 52,
                      "author_id": "492423264350633984",
                      "chapitre": 137.0,
                      "page": 19,
                      "date": "2025-03-21 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 53,
                      "author_id": "492423264350633984",
                      "chapitre": 84.0,
                      "page": 16,
                      "date": "2025-04-10 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 54,
                      "author_id": "492423264350633984",
                      "chapitre": 2.0,
                      "page": 32,
                      "date": "2025-03-01 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 55,
                      "author_id": "726420969845162064",
                      "chapitre": 76.0,
                      "page": 18,
                      "date": "2024-09-28 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkghpHV/",
                      "reddit": null
                  },
                  {
                      "id": 56,
                      "author_id": "726420969845162064",
                      "chapitre": 100.0,
                      "page": 19,
                      "date": "2024-12-18 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkgPKAx/",
                      "reddit": null
                  },
                  {
                      "id": 57,
                      "author_id": "726420969845162064",
                      "chapitre": 11.0,
                      "page": 20,
                      "date": "2025-02-28 00:00:00",
                      "twitter": "https://x.com/Blixiaz/status/1896214847144300919?t=559j35oS2ctEw1c1SCv60g&s=19",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdkgDUe3/",
                      "reddit": null
                  },
                  {
                      "id": 58,
                      "author_id": "688028265268772864",
                      "chapitre": 18.0,
                      "page": 14,
                      "date": "2025-02-27 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 59,
                      "author_id": "688028265268772864",
                      "chapitre": 137.0,
                      "page": 29,
                      "date": "2025-03-19 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 60,
                      "author_id": "482587924911751168",
                      "chapitre": 100.0,
                      "page": 19,
                      "date": "2025-03-22 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 61,
                      "author_id": "482587924911751168",
                      "chapitre": 1.0,
                      "page": 34,
                      "date": "2025-03-01 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 66,
                      "author_id": "842003392368869376",
                      "chapitre": 152.0,
                      "page": 3,
                      "date": "2025-05-30 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 67,
                      "author_id": "328191996579545088",
                      "chapitre": 64.0,
                      "page": 4,
                      "date": "2025-06-01 00:00:00",
                      "twitter": "https://x.com/CriosChanColos/status/1929221239626760485",
                      "instagram": "https://www.instagram.com/p/DKXaSUFNkr6/?img_index=1",
                      "tiktok": "https://www.tiktok.com/@crioschancolos/video/7511724643779218710?is_from_webapp=1&sender_device=pc&web_id=7512931382457878038",
                      "reddit": null
                  },
                  {
                      "id": 68,
                      "author_id": "404251566443462666",
                      "chapitre": 64.0,
                      "page": 20,
                      "date": "2025-06-08 00:00:00",
                      "twitter": "https://x.com/LambaaaTr/status/1931637717873668424",
                      "instagram": null,
                      "tiktok": "https://vm.tiktok.com/ZNdSWeFQ5/",
                      "reddit": null
                  },
                  {
                      "id": 69,
                      "author_id": "842003392368869376",
                      "chapitre": 153.0,
                      "page": 27,
                      "date": "2025-06-14 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 70,
                      "author_id": "907607995452653618",
                      "chapitre": 2.5,
                      "page": 16,
                      "date": "2025-07-03 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1940893656606822665",
                      "instagram": "https://www.instagram.com/p/DLqTXgCN6lC/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 71,
                      "author_id": "907607995452653618",
                      "chapitre": 103.0,
                      "page": 13,
                      "date": "2025-06-19 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1940835720597590509",
                      "instagram": "https://www.instagram.com/p/DLaVrrhtKI_/?img_index=1",
                      "tiktok": "https://www.tiktok.com/@carla_tssrr/video/7519279456310037782",
                      "reddit": null
                  },
                  {
                      "id": 72,
                      "author_id": "907607995452653618",
                      "chapitre": 53.6,
                      "page": 4,
                      "date": "2025-06-27 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1940835616981438623",
                      "instagram": "https://www.instagram.com/p/DLaV_m0Nluv/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 73,
                      "author_id": "907607995452653618",
                      "chapitre": 1.0,
                      "page": 19,
                      "date": "2025-07-06 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1941890959907696996?s=46",
                      "instagram": "https://www.instagram.com/p/DLxao0ztxrQ/?igsh=dnJzNzl1ZW14cmlv",
                      "tiktok": "https://vm.tiktok.com/ZNdPXJJbq/",
                      "reddit": null
                  },
                  {
                      "id": 74,
                      "author_id": "185424818697404417",
                      "chapitre": 103.0,
                      "page": 19,
                      "date": "2025-07-07 00:00:00",
                      "twitter": "https://x.com/TheRyohei11/status/1941998965374742588/photo/1",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": "https://www.reddit.com/r/KaoruHanaWaRintoSaku/comments/1lteu3w/watercolor_kaoruko_colorart_by_me/#lightbox"
                  },
                  {
                      "id": 75,
                      "author_id": "907607995452653618",
                      "chapitre": 1.0,
                      "page": 44,
                      "date": "2025-07-06 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1941955140019245313?s=46",
                      "instagram": "https://www.instagram.com/p/DLxrG8-tGPE/?igsh=a2Qzb3F3M2h0dHAx",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 76,
                      "author_id": "907607995452653618",
                      "chapitre": 107.0,
                      "page": 14,
                      "date": "2025-07-08 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DL2jqFrNnOp/?igsh=MTd2ZDIyMzAwN213Mw==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 77,
                      "author_id": "907607995452653618",
                      "chapitre": 123.0,
                      "page": 22,
                      "date": "2025-07-07 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1942512871772152012?s=46",
                      "instagram": "https://www.instagram.com/p/DL10oDrtUh8/?igsh=MXBmcnFnNWo1cG40aQ==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 78,
                      "author_id": "907607995452653618",
                      "chapitre": 127.5,
                      "page": 9,
                      "date": "2025-07-10 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1943077948908552238?s=46",
                      "instagram": "https://www.instagram.com/p/DL53iyQtNda/?igsh=dmJyM3d3ZGxhaXps",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 79,
                      "author_id": "1340257318851317776",
                      "chapitre": 140.0,
                      "page": 18,
                      "date": "2025-07-08 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DL5Mi1mItUB/",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 80,
                      "author_id": "907607995452653618",
                      "chapitre": 43.0,
                      "page": 23,
                      "date": "2025-07-02 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 81,
                      "author_id": "726420969845162064",
                      "chapitre": 38.0,
                      "page": 3,
                      "date": "2025-06-29 00:00:00",
                      "twitter": "https://x.com/Blixiaz?t=rVK_Wbfo80X3iiJa_nXtow&s=09",
                      "instagram": null,
                      "tiktok": "https://www.tiktok.com/@blixiaa?_t=ZN-8xwpGZZWrKQ&_r=1",
                      "reddit": "https://www.reddit.com/u/Ok-Historian7036/s/Sgt0i4MYAp"
                  },
                  {
                      "id": 82,
                      "author_id": "1098738913335582720",
                      "chapitre": 39.0,
                      "page": 18,
                      "date": "2025-07-11 00:00:00",
                      "twitter": "https://x.com/Chaeri_art/status/1943721100355023058?t=Ji8QTmVwcZY5jSNeZSqbPw&s=19",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 83,
                      "author_id": "842003392368869376",
                      "chapitre": 37.0,
                      "page": 8,
                      "date": "2025-06-30 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 84,
                      "author_id": "907607995452653618",
                      "chapitre": 156.0,
                      "page": 22,
                      "date": "2025-07-10 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1943268089778299015?s=46",
                      "instagram": "https://www.instagram.com/p/DL7OGlPt-L6/?igsh=MXJjMWc3ZmlzOXU3cw==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 85,
                      "author_id": "907607995452653618",
                      "chapitre": 156.0,
                      "page": 16,
                      "date": "2025-07-12 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 86,
                      "author_id": "907607995452653618",
                      "chapitre": 1.0,
                      "page": 52,
                      "date": "2025-07-06 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1941954985987580256?s=46",
                      "instagram": "https://www.instagram.com/p/DLx3g7ntm_K/?igsh=MjVmOXhyMnhjMHZy",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 87,
                      "author_id": "716217079421993020",
                      "chapitre": 30.0,
                      "page": 27,
                      "date": "2025-07-09 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 88,
                      "author_id": "185424818697404417",
                      "chapitre": 139.0,
                      "page": 10,
                      "date": "2025-07-13 00:00:00",
                      "twitter": "https://x.com/TheRyohei11/status/1944479571169951828/photo/1",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": "https://www.reddit.com/r/KaoruHanaWaRintoSaku/comments/1lz1cd9/kaoruko_colorart_by_me/#lightbox"
                  },
                  {
                      "id": 89,
                      "author_id": "907607995452653618",
                      "chapitre": 35.0,
                      "page": 26,
                      "date": "2025-07-14 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1944758636649005092?s=46",
                      "instagram": "https://www.instagram.com/p/DMFzkwlt1Tw/?igsh=MW92YW9oMXd4bXlkMg==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 90,
                      "author_id": "443860993416626206",
                      "chapitre": 30.0,
                      "page": 18,
                      "date": "2025-07-08 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1944508210851033537",
                      "instagram": "https://www.instagram.com/p/DMFUAIZs9ox/?utm_source=ig_web_copy_link",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 91,
                      "author_id": "689854778439761950",
                      "chapitre": 48.0,
                      "page": 11,
                      "date": "2025-07-08 00:00:00",
                      "twitter": "https://x.com/GriseDessin/status/1944805374877479062?t=EWdigKS30t8Kj-ukoo8Fkg&s=19",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 92,
                      "author_id": "1340257318851317776",
                      "chapitre": 1.0,
                      "page": 49,
                      "date": "2025-07-15 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DMIS9rZIN2T/?igsh=MThudXFqdTF2Z2w0dw==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 93,
                      "author_id": "348472904117125123",
                      "chapitre": 77.0,
                      "page": 22,
                      "date": "2025-07-16 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 94,
                      "author_id": "907607995452653618",
                      "chapitre": 157.0,
                      "page": 4,
                      "date": "2025-07-16 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1945602895124058177?s=46",
                      "instagram": "https://www.instagram.com/p/DMLzeymtbfw/?igsh=MWc3NXNvNXc5cXQxMA==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 95,
                      "author_id": "185424818697404417",
                      "chapitre": 141.0,
                      "page": 8,
                      "date": "2025-07-19 00:00:00",
                      "twitter": "https://x.com/TheRyohei11/status/1946526144804552704/photo/1",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": "https://www.reddit.com/r/KaoruHanaWaRintoSaku/comments/1m3tfqr/subaru_colorart_by_me/#lightbox"
                  },
                  {
                      "id": 96,
                      "author_id": "907607995452653618",
                      "chapitre": 157.0,
                      "page": 21,
                      "date": "2025-07-17 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1946668589706342659?s=46",
                      "instagram": "https://www.instagram.com/p/DMTYqj9tp3P/?igsh=anE4ZWM5cTNsZ3dq",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 97,
                      "author_id": "391976423742504960",
                      "chapitre": 149.0,
                      "page": 2,
                      "date": "2025-06-20 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DMV3Fx1Ox8b/?igsh=MXkwbnoxYWN1MmlzYw==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 98,
                      "author_id": "471101684546928651",
                      "chapitre": 150.0,
                      "page": 10,
                      "date": "2025-07-20 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 99,
                      "author_id": "348472904117125123",
                      "chapitre": 4.0,
                      "page": 19,
                      "date": "2025-07-21 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 100,
                      "author_id": "185424818697404417",
                      "chapitre": 139.0,
                      "page": 16,
                      "date": "2025-07-21 00:00:00",
                      "twitter": "https://x.com/TheRyohei11/status/1947178081157812401/photo/1",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": "https://www.reddit.com/r/KaoruHanaWaRintoSaku/comments/1m5b7j4/subaru_colorart_by_me/#lightbox"
                  },
                  {
                      "id": 101,
                      "author_id": "391976423742504960",
                      "chapitre": 106.0,
                      "page": 5,
                      "date": "2025-07-21 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DMXwNSCN5dk/?igsh=MW56bDZva3didmZqYQ==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 102,
                      "author_id": "391976423742504960",
                      "chapitre": 130.0,
                      "page": 8,
                      "date": "2025-07-21 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DMYZFLJO1po/?igsh=MWNhdWg1ZDZiN2p4bw==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 103,
                      "author_id": "1340257318851317776",
                      "chapitre": 158.0,
                      "page": 17,
                      "date": "2025-07-23 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 104,
                      "author_id": "842003392368869376",
                      "chapitre": 158.0,
                      "page": 12,
                      "date": "2025-07-23 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 105,
                      "author_id": "391976423742504960",
                      "chapitre": 100.0,
                      "page": 15,
                      "date": "2025-07-23 00:00:00",
                      "twitter": null,
                      "instagram": "https://www.instagram.com/p/DMdmQ-OuHFA/?igsh=a2R2cThlNXRvc3Jw",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 106,
                      "author_id": "842003392368869376",
                      "chapitre": 154.0,
                      "page": 28,
                      "date": "2025-07-20 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 107,
                      "author_id": "471101684546928651",
                      "chapitre": 158.0,
                      "page": 15,
                      "date": "2025-07-25 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 108,
                      "author_id": "443860993416626206",
                      "chapitre": 154.0,
                      "page": 28,
                      "date": "2025-07-19 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1949154311226720712",
                      "instagram": "https://www.instagram.com/p/DMlR1AlsXhy/?utm_source=ig_web_copy_link&igsh=MzRlODBiNWFlZA==",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 109,
                      "author_id": "907607995452653618",
                      "chapitre": 154.0,
                      "page": 28,
                      "date": "2025-07-17 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1949198040239358109?s=46",
                      "instagram": "https://www.instagram.com/p/DMlWbHVNODT/?igsh=aThqc25ieDB2bnhi",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 110,
                      "author_id": "907607995452653618",
                      "chapitre": 100.0,
                      "page": 19,
                      "date": "2025-07-29 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1950212204231373136?s=46",
                      "instagram": "https://www.instagram.com/p/DMsj0Z2tpCX/?igsh=Z2dzM3F4ZjhqN3dr",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 111,
                      "author_id": "907607995452653618",
                      "chapitre": 137.0,
                      "page": 20,
                      "date": "2025-07-29 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1950293634731167843?s=46",
                      "instagram": "https://www.instagram.com/p/DMtHy2etjJP/?igsh=MXRoaGFxZ3VkdTI0cA==",
                      "tiktok": "https://vm.tiktok.com/ZNdHHoe1m/",
                      "reddit": null
                  },
                  {
                      "id": 112,
                      "author_id": "907607995452653618",
                      "chapitre": 57.0,
                      "page": 23,
                      "date": "2025-08-05 00:00:00",
                      "twitter": "https://x.com/carla_tssr/status/1953926757767327749?s=46",
                      "instagram": "https://www.instagram.com/p/DNG8xlAtLyD/?igsh=MnNjMXB2eG9uNm51",
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 113,
                      "author_id": "716217079421993020",
                      "chapitre": 64.0,
                      "page": 20,
                      "date": "2025-07-08 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 114,
                      "author_id": "842003392368869376",
                      "chapitre": 58.0,
                      "page": 16,
                      "date": "2025-08-03 00:00:00",
                      "twitter": null,
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 115,
                      "author_id": "1098738913335582720",
                      "chapitre": 64.0,
                      "page": 20,
                      "date": "2025-08-09 00:00:00",
                      "twitter": "https://x.com/Chaeri_art/status/1954171577005678884?t=nrXuGHwWOvg5wxSLu3RDnQ&s=19",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  },
                  {
                      "id": 116,
                      "author_id": "443860993416626206",
                      "chapitre": 144.0,
                      "page": 2,
                      "date": "2025-08-06 00:00:00",
                      "twitter": "https://x.com/JokerTheReAngel/status/1954208727604539540",
                      "instagram": null,
                      "tiktok": null,
                      "reddit": null
                  }
              ]
            --------------------

        Dossier : series/

            Fichier : Alice_no_Gomi_Yashiki.json
            ------------------------------------
              {
              	"title": "Alice au pays des ordures",
              	"description": "Plongée dans un univers de solitude, Alice s'accroche à des objets qui cachent ses blessures. Mais jusqu'à quand pourra-t-elle éviter d'affronter la réalité ?",
              	"artist": "Izumi Mitsu",
              	"author": "Izumi Mitsu",
              	"cover": "https://meo.comick.pictures/aOXWwY.jpg",
              	"manga_type": "Seinen",
                  "magazine": "Twitter",
              	"release_year": 2014,
              	"tags": ["Drame", "Histoire", "Tranche de vie"],
              	"alternative_titles": ["Alice no Gomi Yashiki", "アリスのごみ屋敷", "Alice in Trash Land"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Alice au pays des ordures",
              			"volume": "",
              			"last_updated": "1727301600",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/agyvq3md948"
              			}
              		}
              	}
              }
            ------------------------------------


            Fichier : Asayake_no_Iro.json
            -----------------------------
              {
              	"title": "Les nuances de l'aube",
              	"description": "One Shot de Iwamune Haruo",
              	"artist": "Iwamune Haruo",
              	"author": "Iwamune Haruo",
              	"cover": "https://meo.comick.pictures/re5Od.png",
              	"manga_type": "Seinen",
                  "magazine": "Harta 2022 - 99",
              	"release_year": 2022,
              	"tags": ["Tranche de vie", "Fantaisie", "Surnaturel"],
              	"alternative_titles": ["The Colour of Sunrise", "The Colour of Sunrise", "朝焼けの色"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Les nuances de l'aube",
              			"volume": "",
              			"last_updated": "1711922400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9qpgeyp"
              			}
              		}
              	}
              }
            -----------------------------


            Fichier : Bus_Romance.json
            --------------------------
              {
              	"title": "Bus Romance",
              	"description": "Une jeune femme observe secrètement l'homme qu'elle aime dans le bus. Un jour, tout change...",
              	"artist": "itukaki",
              	"author": "itukaki",
              	"cover": "https://meo.comick.pictures/X8XDQX.jpg",
              	"manga_type": "Shonen",
                  "magazine": "Twitter",
              	"release_year": 2023,
              	"tags": ["Comedie", "Romance", "Tranche de vie"],
              	"alternative_titles": ["バスロマンス"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Bus Romance",
              			"volume": "",
              			"last_updated": "1725660000",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/9p4nwp5lz4n"
              			}
              		}
              	}
              }
            --------------------------


            Fichier : Futari.json
            ---------------------
              {
              	"title": "Futari.",
              	"description": "Deux adolescentes se lient en partageant de lourds secrets jusqu'à qu'un ressurgisse...",
              	"artist": "Ashioka Rangyo",
              	"author": "Ashioka Rangyo",
              	"cover": "https://meo.comick.pictures/0ZokDa.jpg",
              	"manga_type": "Shonen",
                  "magazine": "Shonen Jump Plus",
              	"release_year": 2023,
              	"tags": ["Drame", "Action", "Crime"],
              	"alternative_titles": ["ふたり。"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Futari.",
              			"volume": "",
              			"last_updated": "1722204000",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxjnle42"
              			}
              		}
              	}
              }
            ---------------------


            Fichier : Hoshi_Furu_Yoru_ni.json
            ---------------------------------
              {
              	"title": "Sous une nuit étoilée",
              	"description": "Deux amis partagent une nuit sous les étoiles, discutant et savourant chaque instant avant l'inévitable...",
              	"artist": "Iwamune Haruo",
              	"author": "Iwamune Haruo",
              	"cover": "https://meo.comick.pictures/l6X4B0.jpg",
              	"manga_type": "Seinen",
                  "magazine": "Harta 2021",
              	"release_year": 2021,
              	"tags": ["Tranche de vie", "Fantaisie", "Post-appocalyptique"],
              	"alternative_titles": ["On a Starry Night", "Hoshi Furu Yoru ni", "星降る夜に"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Sous une nuit étoilée",
              			"volume": "",
              			"last_updated": "1711922400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9qpgeyp"
              			}
              		}
              	}
              }
            ---------------------------------


            Fichier : Kaoru_Hana_wa_Rin_to_Saku.json
            ----------------------------------------
              {
                "title": "Kaoru Hana wa Rin to Saku",
                "description": "Deux lycées que tout oppose se font face : Chidori, le repaire des garçons cancres, et Kikyô, l'établissement prestigieux des filles d'élite. Rintarô, élève de Chidori, sympathise avec Kaoruko, une cliente de la pâtisserie familiale. Alors qu'un lien se tisse entre eux, il découvre qu'elle étudie à Kikyô... et qu'ils sont censés se détester. Leur relation naissante pourra-t-elle survivre à la haine qui oppose leurs écoles ?",
                "artist": "Saka Mikami",
                "author": "Saka Mikami",
                "cover": "https://meo.comick.pictures/O8kJK5.jpg",
                "manga_type": "Shonen",
                "magazine": "Pocket Magazine",
                "release_year": 2021,
                "tags": ["Comédie", "Drame", "Ecole", "Romance", "Tranche de vie"],
                "jp_title": "薫る花は凛と咲く",
                "alternative_titles": [
                  "薫る花は凛と咲く",
                  "The Fragrant Flower Blooms with Dignity",
                  "Bloom"
                ],
                "release_status": "En cours",
                "covers_gallery": [
                  {
                    "url_hq": "https://meo.comick.pictures/O8kJK5.jpg",
                    "url_lq": "https://meo.comick.pictures/O8kJK5-s.jpg",
                    "volume": "18"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/nR2aBm.jpg",
                    "url_lq": "https://meo.comick.pictures/nR2aBm-s.jpg",
                    "volume": "17"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/7yO0re.jpg",
                    "url_lq": "https://meo.comick.pictures/7yO0re-s.jpg",
                    "volume": "16"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/g6rL0Y.jpg",
                    "url_lq": "https://meo.comick.pictures/g6rL0Y-s.jpg",
                    "volume": "15"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/l6Xgj7.jpg",
                    "url_lq": "https://meo.comick.pictures/l6Xgj7-s.jpg",
                    "volume": "14"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/W8zR3Q.jpg",
                    "url_lq": "https://meo.comick.pictures/W8zR3Q-s.jpg",
                    "volume": "13"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/3Kpyqz.jpg",
                    "url_lq": "https://meo.comick.pictures/3Kpyqz-s.jpg",
                    "volume": "12"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/BLwGJ2.jpg",
                    "url_lq": "https://meo.comick.pictures/BLwGJ2-s.jpg",
                    "volume": "11"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/X8XrD5.jpg",
                    "url_lq": "https://meo.comick.pictures/X8XrD5-s.jpg",
                    "volume": "10"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/y7Qp1n.jpg",
                    "url_lq": "https://meo.comick.pictures/y7Qp1n-s.jpg",
                    "volume": "9"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/Jn7mO0.jpg",
                    "url_lq": "https://meo.comick.pictures/Jn7mO0-s.jpg",
                    "volume": "8"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/EOmMJM.jpg",
                    "url_lq": "https://meo.comick.pictures/EOmMJM-s.jpg",
                    "volume": "7"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/8yK8Bp.jpg",
                    "url_lq": "https://meo.comick.pictures/8yK8Bp-s.jpg",
                    "volume": "6"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/ez3oKZ.jpg",
                    "url_lq": "https://meo.comick.pictures/ez3oKZ-s.jpg",
                    "volume": "5"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/O8bKGg.jpg",
                    "url_lq": "https://meo.comick.pictures/O8bKGg-s.jpg",
                    "volume": "4"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/D42gyL.jpg",
                    "url_lq": "https://meo.comick.pictures/D42gyL-s.jpg",
                    "volume": "3"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/4kKB7X.jpg",
                    "url_lq": "https://meo.comick.pictures/4kKB7X-s.jpg",
                    "volume": "2"
                  },
                  {
                    "url_hq": "https://meo.comick.pictures/1vOnpz.jpg",
                    "url_lq": "https://meo.comick.pictures/1vOnpz-s.jpg",
                    "volume": "1"
                  }
                ],
                "episodes": [
                  {
                    "type": "gdrive",
                    "id": "1Jjz-boSBNg__dSlpQTz4xLwzyhF6HTti",
                    "indice_ep": 1,
                    "date_ep": "1720137600",
                    "title_ep": "Rintarô et Kaoruko"
                  },
                  {
                    "type": "gdrive",
                    "id": "1uPwJ_G_2r3SeD5---ZV3xTGHvzxXpILr",
                    "indice_ep": 2,
                    "date_ep": "1752429600",
                    "title_ep": "Chidori et Kikyô"
                  },
                  {
                    "type": "gdrive",
                    "id": "1hEJbnYvFJza2T5hNTOzlDBg_B945utWX",
                    "indice_ep": 3,
                    "date_ep": "1753034400",
                    "title_ep": "Une personne bienveillante"
                  },
                  {
                    "type": "gdrive",
                    "id": "1FtRHWuuvUrpuc8kJCyCpfQK2U9hBis4p",
                    "indice_ep": 4,
                    "date_ep": "1753650000",
                    "title_ep": "La chaleur d'un cœur"
                  },
                  {
                    "type": "gdrive",
                    "id": "1YyCf15LswZqf91PbADySMaG1ZoR3BGZm",
                    "indice_ep": 5,
                    "date_ep": "1754244000",
                    "title_ep": "Un parfum de commencement"
                  }
                ],
                "anime": [
                  {
                    "cover_an": "https://i.imgur.com/q5dLTZD.jpeg",
                    "type_an": "TV",
                    "status_an": "En cours",
                    "studios_an": ["CloverWorks"],
                    "date_start_an": "06/07/2025",
                    "op_an": [
                      {
                        "title_op_fr_an": "Ton regard est lumière",
                        "title_op_jp_an": "まなざしは光",
                        "author_op_an": "Tatsuya Kitani",
                        "youtube_url_op_an": "https://www.youtube.com/watch?v=8WLNNu78mUk"
                      }
                    ],
                    "ed_an": [
                      {
                        "title_op_fr_an": "Un grand jour",
                        "title_op_jp_an": "ハレの日に]",
                        "author_op_an": "Ushio Reira",
                        "youtube_url_op_an": "https://www.youtube.com/watch?v=W4fND8qaTtE"
                      }
                    ],
                    "tags": ["Comédie", "Drame", "Ecole", "Romance", "Tranche de vie"],
                    "description": "Deux lycées que tout oppose se font face : Chidori, le repaire des garçons cancres, et Kikyô, l'établissement prestigieux des filles d'élite. Rintarô, élève de Chidori, sympathise avec Kaoruko, une cliente de la pâtisserie familiale. Alors qu'un lien se tisse entre eux, il découvre qu'elle étudie à Kikyô... et qu'ils sont censés se détester. Leur relation naissante pourra-t-elle survivre à la haine qui oppose leurs écoles ?"
                  }
                ],
                "chapters": {
                  "1": {
                    "title": "Rintaro et Kaoruko",
                    "volume": "1",
                    "last_updated": "1726704000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t01-9782373499759/",
                      "22/01/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "2": {
                    "title": "Chidori et Kikyo",
                    "volume": "1",
                    "last_updated": "1653868800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t01-9782373499759/",
                      "22/01/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "3": {
                    "title": "Préparation des examens",
                    "volume": "1",
                    "last_updated": "1654473600",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t01-9782373499759/",
                      "22/01/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "4": {
                    "title": "Les amis de Kaoruko",
                    "volume": "1",
                    "last_updated": "1655078400",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t01-9782373499759/",
                      "22/01/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "5": {
                    "title": "Camarades d'étude",
                    "volume": "1",
                    "last_updated": "1655683200",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t01-9782373499759/",
                      "22/01/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "6": {
                    "title": "Subaru Hoshina",
                    "volume": "2",
                    "last_updated": "1656288000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "7": {
                    "title": "La chaleur d'un cœur",
                    "volume": "2",
                    "last_updated": "1656892800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "8": {
                    "title": "Une amitié à quatre",
                    "volume": "2",
                    "last_updated": "1656892800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "9": {
                    "title": "Grâce à Waguri",
                    "volume": "2",
                    "last_updated": "1657497600",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "10": {
                    "title": "Haine",
                    "volume": "2",
                    "last_updated": "1658102400",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "11": {
                    "title": "Amour",
                    "volume": "2",
                    "last_updated": "1658102400",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "12": {
                    "title": "Rintaro et Subaru",
                    "volume": "2",
                    "last_updated": "1658707200",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "13": {
                    "title": "Maman",
                    "volume": "2",
                    "last_updated": "1659398400",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "14": {
                    "title": "Mon endroit préféré",
                    "volume": "3",
                    "last_updated": "1659916800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "15": {
                    "title": "Un type cool",
                    "volume": "3",
                    "last_updated": "1661126400",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "16": {
                    "title": "Journée sportive",
                    "volume": "3",
                    "last_updated": "1661731200",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "17": {
                    "title": "Dégel hivernal",
                    "volume": "3",
                    "last_updated": "1662336000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "18": {
                    "title": "L'aquarium",
                    "volume": "3",
                    "last_updated": "1662336000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "19": {
                    "title": "Ce que je ressens vraiment",
                    "volume": "3",
                    "last_updated": "1662336000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "20": {
                    "title": "Et les nuages se séparent",
                    "volume": "3",
                    "last_updated": "1662336000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "21": {
                    "title": "Cheveux blonds et piercings",
                    "volume": "3",
                    "last_updated": "1662940800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "22": {
                    "title": "L'amour d'une mère",
                    "volume": "4",
                    "last_updated": "1662940800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "23": {
                    "title": "Un groupe d'étude à six",
                    "volume": "4",
                    "last_updated": "1662940800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "24": {
                    "title": "De l'autre coté du rideau",
                    "volume": "4",
                    "last_updated": "1673481600",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "25": {
                    "title": "Soucis de juillet",
                    "volume": "4",
                    "last_updated": "1674345600",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "26": {
                    "title": "Yorita et Rintaro",
                    "volume": "4",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "27": {
                    "title": "Discussion de groupe",
                    "volume": "4",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "28": {
                    "title": "L'anniversaire de Waguri",
                    "volume": "4",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "29": {
                    "title": "22 Juillet",
                    "volume": "4",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "30": {
                    "title": "L'anniversaire",
                    "volume": "5",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnz5jyr"
                    }
                  },
                  "31": {
                    "title": "Les sentiments contenus dans le gâteau",
                    "volume": "5",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wd3wxg4x"
                    }
                  },
                  "32": {
                    "title": "Comment passer ses vacances d'été",
                    "volume": "5",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/lqye2e9gqyd"
                    }
                  },
                  "33": {
                    "title": "Troubles à la plage",
                    "volume": "5",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qb4zeza8d4j"
                    }
                  },
                  "34": {
                    "title": "Je veux être ici",
                    "volume": "5",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qe4gjgo5j4j"
                    }
                  },
                  "35": {
                    "title": "Étincelles",
                    "volume": "5",
                    "last_updated": "1682726400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/bp45pla5qy5"
                    }
                  },
                  "36": {
                    "title": "Je t'aime",
                    "volume": "5",
                    "last_updated": "1682812800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/o24aqrz827l"
                    }
                  },
                  "37": {
                    "title": "Festival d'été",
                    "volume": "5",
                    "last_updated": "1682812800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9249wropmyn"
                    }
                  },
                  "38": {
                    "title": "Les sentiments de Rintaro",
                    "volume": "6",
                    "last_updated": "1683072000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgve2qyx"
                    }
                  },
                  "39": {
                    "title": "Confession",
                    "volume": "6",
                    "last_updated": "1683072000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9w897l"
                    }
                  },
                  "40": {
                    "title": "Kaoruko et Rintaro",
                    "volume": "6",
                    "last_updated": "1683504000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw95jm4n"
                    }
                  },
                  "41": {
                    "title": "Le lendemain de la confession",
                    "volume": "6",
                    "last_updated": "1684022400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ne7bdm8kj45"
                    }
                  },
                  "42": {
                    "title": "Changement",
                    "volume": "6",
                    "last_updated": "1684368000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own6qr4p"
                    }
                  },
                  "43": {
                    "title": "Courses à deux",
                    "volume": "6",
                    "last_updated": "1685059200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxlnrn42"
                    }
                  },
                  "44": {
                    "title": "Annonce",
                    "volume": "6",
                    "last_updated": "1685923200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/na7km63vb48"
                    }
                  },
                  "45": {
                    "title": "L'anniversaire de Natsusawa",
                    "volume": "6",
                    "last_updated": "1686355200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jplgyp"
                    }
                  },
                  "46": {
                    "title": "Cadeau",
                    "volume": "7",
                    "last_updated": "1686700800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwxg8nyd"
                    }
                  },
                  "47": {
                    "title": "Natsusawa Mio",
                    "volume": "7",
                    "last_updated": "1686873600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/lqye2e9mqyd"
                    }
                  },
                  "48": {
                    "title": "Saku et Subaru",
                    "volume": "7",
                    "last_updated": "1686960000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qe4gjgowj4j"
                    }
                  },
                  "49": {
                    "title": "début d'amitiés",
                    "volume": "7",
                    "last_updated": "1687046400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnzljyr"
                    }
                  },
                  "50": {
                    "title": "Amis",
                    "volume": "7",
                    "last_updated": "1687132800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qb4zezand4j"
                    }
                  },
                  "51": {
                    "title": "Reconnaissant",
                    "volume": "7",
                    "last_updated": "1687219200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/xny8vdbm57b"
                    }
                  },
                  "52": {
                    "title": "Le petit de Waguri",
                    "volume": "7",
                    "last_updated": "1687305600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/bp45plaqqy5"
                    }
                  },
                  "53": {
                    "title": "Une bonne personne",
                    "volume": "7",
                    "last_updated": "1687651200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/dl7pe2x8pyo"
                    }
                  },
                  "54": {
                    "title": "Le gâteau-récompense",
                    "volume": "8",
                    "last_updated": "1687737600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own68r4p"
                    }
                  },
                  "55": {
                    "title": "La maison de Waguri",
                    "volume": "8",
                    "last_updated": "1687910400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/na7km638b48"
                    }
                  },
                  "56": {
                    "title": "Les preuves",
                    "volume": "8",
                    "last_updated": "1687996800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkar8x78"
                    }
                  },
                  "57": {
                    "title": "Waguri Kousuke",
                    "volume": "8",
                    "last_updated": "1688169600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxln2n42"
                    }
                  },
                  "58": {
                    "title": "Émotions naissantes",
                    "volume": "8",
                    "last_updated": "1688256000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9wqz7l"
                    }
                  },
                  "59": {
                    "title": "Nez à nez",
                    "volume": "8",
                    "last_updated": "1688428800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgveaxyx"
                    }
                  },
                  "60": {
                    "title": "Kikyo et chidori",
                    "volume": "8",
                    "last_updated": "1688515200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwvqayk"
                    }
                  },
                  "61": {
                    "title": "Entre fantaisie et réalité",
                    "volume": "8",
                    "last_updated": "1688601600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwxga9yd"
                    }
                  },
                  "62": {
                    "title": "Résolution",
                    "volume": "9",
                    "last_updated": "1688688000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jpaxyp"
                    }
                  },
                  "63": {
                    "title": "Faits de la même étoffe",
                    "volume": "9",
                    "last_updated": "1688774400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/lqye2e9dmyd"
                    }
                  },
                  "64": {
                    "title": "Ces précieuses personnes",
                    "volume": "9",
                    "last_updated": "1688860800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnzdgyr"
                    }
                  },
                  "65": {
                    "title": "Face-à-face",
                    "volume": "9",
                    "last_updated": "1688947200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/xny8vdbe27b"
                    }
                  },
                  "66": {
                    "title": "Ayumi Sawatari",
                    "volume": "9",
                    "last_updated": "1689033600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/bp45plamny5"
                    }
                  },
                  "67": {
                    "title": "Un échec",
                    "volume": "9",
                    "last_updated": "1689206400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/a846wjv3zyx"
                    }
                  },
                  "68": {
                    "title": "Une lueur d'espoir",
                    "volume": "9",
                    "last_updated": "1689292800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/o24aqrz2d7l"
                    }
                  },
                  "69": {
                    "title": "Pareilles",
                    "volume": "9",
                    "last_updated": "1689379200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvqkmxb48"
                    }
                  },
                  "70": {
                    "title": "Au creux de sa poitrine",
                    "volume": "10",
                    "last_updated": "1689465600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw95nm4n"
                    }
                  },
                  "71": {
                    "title": "Le passé de Natsusawa",
                    "volume": "10",
                    "last_updated": "1689552000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/dl7pe2xvpyo"
                    }
                  },
                  "72": {
                    "title": "Progrès",
                    "volume": "10",
                    "last_updated": "1689638400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9249wrovmyn"
                    }
                  },
                  "73": {
                    "title": "Retour aux rendez-vous",
                    "volume": "10",
                    "last_updated": "1689724800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkar9x78"
                    }
                  },
                  "74": {
                    "title": "Rencontre officielle",
                    "volume": "10",
                    "last_updated": "1689811200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own69r4p"
                    }
                  },
                  "75": {
                    "title": "Mère et petite amie",
                    "volume": "10",
                    "last_updated": "1690070400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ne7bdm85j45"
                    }
                  },
                  "76": {
                    "title": "Gratitude",
                    "volume": "10",
                    "last_updated": "1690070400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgve9qyx"
                    }
                  },
                  "77": {
                    "title": "Juste pour s'amuser",
                    "volume": "10",
                    "last_updated": "1690070400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxlnvn42"
                    }
                  },
                  "78": {
                    "title": "Sortie scolaire",
                    "volume": "11",
                    "last_updated": "1690070400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9wd97l"
                    }
                  },
                  "79": {
                    "title": "Souvenirs du voyage",
                    "volume": "11",
                    "last_updated": "1690070400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jp5xyp"
                    }
                  },
                  "80": {
                    "title": "L'anniversaire de Subaru",
                    "volume": "11",
                    "last_updated": "1690588800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wd3wdg4x"
                    }
                  },
                  "81": {
                    "title": "Le grand frère de Rintaro",
                    "volume": "11",
                    "last_updated": "1691712000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wd3wqx4x"
                    }
                  },
                  "82": {
                    "title": "Sotaro et Rintaro",
                    "volume": "11",
                    "last_updated": "1692662400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/na7km63ob48"
                    }
                  },
                  "83": {
                    "title": "Tout ira bien",
                    "volume": "11",
                    "last_updated": "1693094400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnzgjyr"
                    }
                  },
                  "84": {
                    "title": "Les inquiétudes de Rintaro",
                    "volume": "11",
                    "last_updated": "1693958400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jp9gyp"
                    }
                  },
                  "85": {
                    "title": "Une camarade du collège",
                    "volume": "11",
                    "last_updated": "1694476800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/lqye2e92qyd"
                    }
                  },
                  "86": {
                    "title": "Satsuki Nabata",
                    "volume": "12",
                    "last_updated": "1694822400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwvmlyk"
                    }
                  },
                  "87": {
                    "title": "Premier amour et peine de cœur",
                    "volume": "12",
                    "last_updated": "1695427200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qe4gjgojj4j"
                    }
                  },
                  "88": {
                    "title": "Soirée karaoké",
                    "volume": "12",
                    "last_updated": "1698624000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qb4zezaed4j"
                    }
                  },
                  "89": {
                    "title": "Choix de carrière",
                    "volume": "12",
                    "last_updated": "1699488000",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/xny8vdb227b"
                    }
                  },
                  "90": {
                    "title": "Le futur de Yorita",
                    "volume": "12",
                    "last_updated": "1700697600",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwxgwnyd"
                    }
                  },
                  "91": {
                    "title": "Ce qui doit être dit",
                    "volume": "12",
                    "last_updated": "1700956800",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/xny8vdbv57b"
                    }
                  },
                  "92": {
                    "title": "Rintaro et Yorita",
                    "volume": "12",
                    "last_updated": "1701734400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvqkmqj48"
                    }
                  },
                  "93": {
                    "title": "Lutins de noël",
                    "volume": "12",
                    "last_updated": "1702598400",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvqkmjb48"
                    }
                  },
                  "94": {
                    "title": "Le passé de Yorita",
                    "volume": "13",
                    "last_updated": "1702857600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9249wrolbyn"
                    }
                  },
                  "95": {
                    "title": "Sans intérêt",
                    "volume": "13",
                    "last_updated": "1703721600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw95kb4n"
                    }
                  },
                  "96": {
                    "title": "Une fois tout terminé",
                    "volume": "13",
                    "last_updated": "1705536000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/dl7pe2x53yo"
                    }
                  },
                  "97": {
                    "title": "La valeur du travail",
                    "volume": "13",
                    "last_updated": "1706227200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own6524p"
                    }
                  },
                  "98": {
                    "title": "La réponse de Yorita",
                    "volume": "13",
                    "last_updated": "1707177600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/na7km635348"
                    }
                  },
                  "99": {
                    "title": "Notre Noël",
                    "volume": "13",
                    "last_updated": "1707609600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9wgz7l"
                    }
                  },
                  "100": {
                    "title": "Spéciale à tes yeux",
                    "volume": "13",
                    "last_updated": "1707868800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yxrwzdpyq"
                    }
                  },
                  "101": {
                    "title": "26 décembre",
                    "volume": "14",
                    "last_updated": "1708819200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkar6378"
                    }
                  },
                  "102": {
                    "title": "Le cadeau de Kaoruko",
                    "volume": "14",
                    "last_updated": "1709596800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgve6xyx"
                    }
                  },
                  "103": {
                    "title": "Nouvel An",
                    "volume": "14",
                    "last_updated": "1710633600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxln6d42"
                    }
                  },
                  "104": {
                    "title": "Sotaro et Kaoruko",
                    "volume": "14",
                    "last_updated": "1710892800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwveayk"
                    }
                  },
                  "105": {
                    "title": "Nouvelle année, nouveau trimestre",
                    "volume": "14",
                    "last_updated": "1711670400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jp6xyp"
                    }
                  },
                  "106": {
                    "title": "Visite du parc d'attractions",
                    "volume": "14",
                    "last_updated": "1712361600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qb4zezar54j"
                    }
                  },
                  "107": {
                    "title": "L'anniversaire de Rintaro",
                    "volume": "14",
                    "last_updated": "1712880000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/xny8vdb927b"
                    }
                  },
                  "108": {
                    "title": "Les révisions de Saku et Subaru",
                    "volume": "14",
                    "last_updated": "1714003200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/o24aqrzmd7l"
                    }
                  },
                  "109": {
                    "title": "Le courage d'aller de l'avant",
                    "volume": "14",
                    "last_updated": "1714348800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/a846wjv9zyx"
                    }
                  },
                  "110": {
                    "title": "Le février de chacun",
                    "volume": "15",
                    "last_updated": "1715644800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvqkmlb48"
                    }
                  },
                  "111": {
                    "title": "Le jour de la Saint-Valentin",
                    "volume": "15",
                    "last_updated": "1716422400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9249wro9byn"
                    }
                  },
                  "112": {
                    "title": "Examen blanc",
                    "volume": "15",
                    "last_updated": "1716422400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ne7bdm83m45"
                    }
                  },
                  "113": {
                    "title": "Les maux du coeur",
                    "volume": "15",
                    "last_updated": "1718064000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/dl7pe2x63yo"
                    }
                  },
                  "114": {
                    "title": "Natsusawa et Hidaka",
                    "volume": "15",
                    "last_updated": "1718064000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own6v24p"
                    }
                  },
                  "115": {
                    "title": "Après l'examen blanc",
                    "volume": "15",
                    "last_updated": "1718582400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw956b4n"
                    }
                  },
                  "116": {
                    "title": "Film d'horreur",
                    "volume": "15",
                    "last_updated": "1719705600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/na7km63n348"
                    }
                  },
                  "117": {
                    "title": "La pâtisserie d'autrefois",
                    "volume": "15",
                    "last_updated": "1720137600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9wxz7l"
                    }
                  },
                  "118": {
                    "title": "Talents inégalés",
                    "volume": "16",
                    "last_updated": "1720742400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkar5378"
                    }
                  },
                  "119": {
                    "title": "Objectif",
                    "volume": "16",
                    "last_updated": "1724025600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9wx37l"
                    }
                  },
                  "120": {
                    "title": "Le White Day de Natsusawa",
                    "volume": "16",
                    "last_updated": "1721952000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jp3lyp"
                    }
                  },
                  "121": {
                    "title": "Pâtissier",
                    "volume": "16",
                    "last_updated": "1724198400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgvel3yx"
                    }
                  },
                  "122": {
                    "title": "Rentrée en terminale",
                    "volume": "16",
                    "last_updated": "1724371200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkar5978"
                    }
                  },
                  "123": {
                    "title": "Faire bonne figure",
                    "volume": "16",
                    "last_updated": "1724976000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwxgjayd"
                    }
                  },
                  "124": {
                    "title": "Faiblesses",
                    "volume": "16",
                    "last_updated": "1725580800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnz2oyr"
                    }
                  },
                  "125": {
                    "title": "Soirée Takoyaki",
                    "volume": "16",
                    "last_updated": "1726099200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxlnmx42"
                    }
                  },
                  "126": {
                    "title": "Beau-père et Rintaro",
                    "volume": "17",
                    "last_updated": "1726704000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yxrwz9pyq"
                    }
                  },
                  "127": {
                    "title": "Le dernier festival sportif",
                    "volume": "17",
                    "last_updated": "1727308800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9249wro2byn"
                    }
                  },
                  "127.5": {
                    "title": "Extra volume 17",
                    "volume": "17",
                    "last_updated": "1749481200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyv9e9ab78"
                    }
                  },
                  "127.6": {
                    "title": "Extra volume 17 - Full.Colo",
                    "volume": "17",
                    "last_updated": "1750528200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wxdpbgyx"
                    }
                  },
                  "128": {
                    "title": "Bonté d'âme",
                    "volume": "17",
                    "last_updated": "1728518400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw95vb4n"
                    }
                  },
                  "129": {
                    "title": "Le futur de Kaoruko",
                    "volume": "17",
                    "last_updated": "1729123200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own6a24p"
                    }
                  },
                  "130": {
                    "title": "Petit ami",
                    "volume": "17",
                    "last_updated": "1729728000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ne7bdm8lm45"
                    }
                  },
                  "131": {
                    "title": "Gynécologue-obstétricienne",
                    "volume": "17",
                    "last_updated": "1730419200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/na7km63a348"
                    }
                  },
                  "132": {
                    "title": "Chacun sa voie",
                    "volume": "17",
                    "last_updated": "1732838400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/dl7pe2xa3yo"
                    }
                  },
                  "133": {
                    "title": "Grand frère Usami",
                    "volume": "17",
                    "last_updated": "1733529600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/5xy2a9woz7l"
                    }
                  },
                  "134": {
                    "title": "Les soucis de Subaru",
                    "volume": "",
                    "last_updated": "1734912000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkarm378"
                    }
                  },
                  "135": {
                    "title": "Examens de premier trimestre",
                    "volume": "",
                    "last_updated": "1735862400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgvewxyx"
                    }
                  },
                  "136": {
                    "title": "Sortie au Zoo",
                    "volume": "",
                    "last_updated": "1737244800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwxge9yd"
                    }
                  },
                  "137": {
                    "title": "Retour à la plage",
                    "volume": "",
                    "last_updated": "1737676800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwv2ayk"
                    }
                  },
                  "138": {
                    "title": "Émotions naissantes",
                    "volume": "",
                    "last_updated": "1738540800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxlnkd42"
                    }
                  },
                  "139": {
                    "title": "Plus qu'un ami",
                    "volume": "",
                    "last_updated": "1739059200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9jpnxyp"
                    }
                  },
                  "140": {
                    "title": "Qu'est-ce que l'Amour ?",
                    "volume": "",
                    "last_updated": "1740787200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qb4zezap54j"
                    }
                  },
                  "141": {
                    "title": "Mots d'affection",
                    "volume": "",
                    "last_updated": "1740787200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qe4gjgoqq4j"
                    }
                  },
                  "142": {
                    "title": "La chambre de Kaoruko",
                    "volume": "",
                    "last_updated": "1741564800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wd3wnx4x"
                    }
                  },
                  "143": {
                    "title": "Réunion parents-profs",
                    "volume": "",
                    "last_updated": "1742169600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/xny8vdb627b"
                    }
                  },
                  "144": {
                    "title": "L'été de Rintaro",
                    "volume": "",
                    "last_updated": "1742688000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/o24aqrz6d7l"
                    }
                  },
                  "145": {
                    "title": "Le futur de Rintaro",
                    "volume": "",
                    "last_updated": "1743379200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/a846wjvozyx"
                    }
                  },
                  "146": {
                    "title": "Décompression",
                    "volume": "",
                    "last_updated": "1744243200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvqkmnb48"
                    }
                  },
                  "147": {
                    "title": "Le Futur de Natsusawa",
                    "volume": "",
                    "last_updated": "1744848000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yxrwznpyq"
                    }
                  },
                  "148": {
                    "title": "Premier Anniversaire",
                    "volume": "",
                    "last_updated": "1745452800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9249wrokbyn"
                    }
                  },
                  "149": {
                    "title": "Entretien D'embauche",
                    "volume": "",
                    "last_updated": "1746144000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw95zb4n"
                    }
                  },
                  "150": {
                    "title": "Petite amie",
                    "volume": "",
                    "last_updated": "1747267200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/md7own6b24p"
                    }
                  },
                  "151": {
                    "title": "Vers les Examens Blancs Nationaux",
                    "volume": "",
                    "last_updated": "1747946040",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gelxjyr"
                    }
                  },
                  "152": {
                    "title": "Évaluation",
                    "volume": "",
                    "last_updated": "1748516400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwgxrjyd"
                    }
                  },
                  "153": {
                    "title": "Le Mur à Franchir",
                    "volume": "",
                    "last_updated": "1749834600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wxgapzyx"
                    }
                  },
                  "154": {
                    "title": "Kyoko et Keichiro",
                    "volume": "",
                    "last_updated": "1750456200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wxdqmgyx"
                    }
                  },
                  "155": {
                    "title": "Keichiro et Kyoko",
                    "volume": "",
                    "last_updated": "1751229000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg7356keg4r"
                    }
                  },
                  "156": {
                    "title": "Une Douceur et un Parfum Sucré",
                    "volume": "",
                    "last_updated": "1752321600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/o24a8lneg7l"
                    }
                  },
                  "157": {
                    "title": "Le Festival d'Été de cette Année",
                    "volume": "",
                    "last_updated": "1752701400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jg2ev948"
                    }
                  },
                  "158": {
                    "title": "Étincelles",
                    "volume": "",
                    "last_updated": "1753293600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yx86mgk7q"
                    }
                  },
                  "159": {
                    "title": "Découverte",
                    "volume": "",
                    "last_updated": "1753909200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/bp455abdn45"
                    }
                  },
                  "159.5": {
                    "title": "L'affaire de la glace",
                    "volume": "",
                    "last_updated": "1754838000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvrewak78"
                    }
                  },
                  "2.5": {
                    "title": "La Cliente Régulière",
                    "volume": "",
                    "last_updated": "1751410800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/bp4556b2x45"
                    }
                  },
                  "5.5": {
                    "title": "Extras Volume 1",
                    "volume": "1",
                    "last_updated": "1685577600",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t01-9782373499759/",
                      "22/01/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "13.5": {
                    "title": "Extras Volume 2",
                    "volume": "2",
                    "last_updated": "1694044800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "12.5": {
                    "title": "Après le coup de fil",
                    "volume": "2",
                    "last_updated": "1687132800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t02-9782373499766/",
                      "19/03/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "16.5": {
                    "title": "Après le coup de fil",
                    "volume": "3",
                    "last_updated": "1694304000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "27.5": {
                    "title": "Subaru veut lui dire",
                    "volume": "4",
                    "last_updated": "1707868800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "29.6": {
                    "title": "Extra Twitter volume 4",
                    "volume": "4",
                    "last_updated": "1708560000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwv6lyk"
                    }
                  },
                  "29.5": {
                    "title": "Extra volume 4",
                    "volume": "4",
                    "last_updated": "1707868800",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t04-9782384963904/",
                      "02/07/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "37.5": {
                    "title": "Un jour spécial",
                    "volume": "5",
                    "last_updated": "1682899200",
                    "collab": "BlueSolo",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/a846wjv5oyx"
                    }
                  },
                  "37.6": {
                    "title": "Extra volume 5",
                    "volume": "5",
                    "last_updated": "1707955200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/agyvqkm9j48"
                    }
                  },
                  "37.7": {
                    "title": "Extra Twitter volume 5",
                    "volume": "5",
                    "last_updated": "1708646400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yxrwz8qyq"
                    }
                  },
                  "45.5": {
                    "title": "Extra Twitter volume 6",
                    "volume": "6",
                    "last_updated": "1708992000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkargx78"
                    }
                  },
                  "53.5": {
                    "title": "Les inquiétudes d'une jeune fille",
                    "volume": "7",
                    "last_updated": "1708041600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yxrwz3qyq"
                    }
                  },
                  "53.6": {
                    "title": "Extra volume 7",
                    "volume": "7",
                    "last_updated": "1708041600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9p4nw958m4n"
                    }
                  },
                  "53.7": {
                    "title": "Extra Twitter volume 7",
                    "volume": "7",
                    "last_updated": "1708992000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ne7bdm8qj45"
                    }
                  },
                  "56.5": {
                    "title": "Frère et sœur",
                    "volume": "8",
                    "last_updated": "1708128000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgveoqyx"
                    }
                  },
                  "61.5": {
                    "title": "Extra volume 8",
                    "volume": "8",
                    "last_updated": "1708128000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkare378"
                    }
                  },
                  "61.6": {
                    "title": "Extra Twitter volume 8",
                    "volume": "8",
                    "last_updated": "1709078400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxlnad42"
                    }
                  },
                  "77.5": {
                    "title": "Extra volume 10",
                    "volume": "10",
                    "last_updated": "1708300800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkarn378"
                    }
                  },
                  "76.5": {
                    "title": "Kyouko et Keichiro",
                    "volume": "10",
                    "last_updated": "1708300800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxln5d42"
                    }
                  },
                  "77.6": {
                    "title": "Extra Twitter volume 10",
                    "volume": "10",
                    "last_updated": "1709510400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwvnayk"
                    }
                  },
                  "85.5": {
                    "title": "Les pensées de Sotaro Tsumugi",
                    "volume": "11",
                    "last_updated": "1708387200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/ej7mwxgv9yd"
                    }
                  },
                  "85.6": {
                    "title": "Extra volume 11",
                    "volume": "11",
                    "last_updated": "1708387200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnz6gyr"
                    }
                  },
                  "87.5": {
                    "title": "Kaoruko et l'uniforme scolaire",
                    "volume": "12",
                    "last_updated": "1719014400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/lqye2e9nmyd"
                    }
                  },
                  "93.5": {
                    "title": "Extra volume 12",
                    "volume": "12",
                    "last_updated": "1719014400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qe4gjgopq4j"
                    }
                  },
                  "85.7": {
                    "title": "Extra Twitter volume 11",
                    "volume": "11",
                    "last_updated": "1709683200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qb4zezam54j"
                    }
                  },
                  "100.6": {
                    "title": "Extra volume 13",
                    "volume": "13",
                    "last_updated": "1724198400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/o24aqrznd7l"
                    }
                  },
                  "93.6": {
                    "title": "Extra Twitter volume 12",
                    "volume": "12",
                    "last_updated": "1719014400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/bp45pla6ny5"
                    }
                  },
                  "100.5": {
                    "title": "Le chemin du retour",
                    "volume": "13",
                    "last_updated": "1724198400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/a846wjv6zyx"
                    }
                  },
                  "107.5": {
                    "title": "Le retour de l'anniversaire + Extra volume 14",
                    "volume": "14",
                    "last_updated": "1728432000",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/qe4gjgo8q4j"
                    }
                  },
                  "112.5": {
                    "title": "En route pour l'examen blanc + Extra volume 15",
                    "volume": "15",
                    "last_updated": "1736553600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/m9yxrwzqpyq"
                    }
                  },
                  "124.5": {
                    "title": "Les courses + Extra volume 16",
                    "volume": "16",
                    "last_updated": "1744675200",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/9rydmwv36yk"
                    }
                  },
                  "21.5": {
                    "title": "Extras Volume 3",
                    "volume": "3",
                    "last_updated": "1705968000",
                    "licencied": [
                      "https://www.nobi-nobi.fr/livre/bloom-t03-9782373499773/",
                      "07/05/2025"
                    ],
                    "groups": {
                      "Big_herooooo": ""
                    }
                  },
                  "21.6": {
                    "title": "Extra Twitter volume 2+3",
                    "volume": "3",
                    "last_updated": "1708473600",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgved3yx"
                    }
                  },
                  "64.5": {
                    "title": "La détermination de Kaoruko",
                    "volume": "9",
                    "last_updated": "1708214400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/pg73gnz3oyr"
                    }
                  },
                  "69.5": {
                    "title": "Extra volume 9",
                    "volume": "9",
                    "last_updated": "1708214400",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/n87wd3w2q4x"
                    }
                  },
                  "69.6": {
                    "title": "Extra Twitter volume 9",
                    "volume": "9",
                    "last_updated": "1709164800",
                    "groups": {
                      "Big_herooooo": "/proxy/api/imgchest/chapter/lqye2e9ozyd"
                    }
                  }
                }
              }
            ----------------------------------------


            Fichier : Kiraboshi_no_Meryl.json
            ---------------------------------
              {
              	"title": "Kiraboshi no Meryl",
              	"description": "Dans un monde où les étoiles cachent bien des secrets, Kosei découvre qu'un simple héritage peut bouleverser son destin et celui de la Terre... ",
              	"artist": "Kawaguchi Yuuki",
              	"author": "Kawaguchi Yuuki",
              	"cover": "https://meo.comick.pictures/nbonm.jpg",
              	"manga_type": "Shonen",
                  "magazine": "Shonen Jump Plus",
              	"release_year": 2019,
              	"tags": ["Action", "Fantaisie", "Démons", "Magie", "Drame", "Aliens", "Surnaturel"],
              	"alternative_titles": ["Meryl Of The Glittering Stars", "綺羅星のメリル"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Kiraboshi no Meryl",
              			"volume": "",
              			"last_updated": "1729375200",
              			"collab": "BlueSolo",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/na7km93eb48"
              			}
              		}
              	}
              }
            ---------------------------------


            Fichier : Koyori_no_Kaerimichi.json
            -----------------------------------
              {
              	"title": "Le fil rouge de Koyori",
              	"description": "Un jour, Koyori, une jeune fille, voit soudain un fil rouge s'enrouler autour de son petit doigt. Séchant l'école, elle suit le fil et rencontre Beniko, une jeune fille voyageant seule. Que verront-elles toutes les deux au bout du fil ?",
              	"artist": "Ashioka Rangyo",
              	"author": "Ashioka Rangyo",
              	"cover": "https://meo.comick.pictures/w7pJJX.jpg",
              	"manga_type": "Shonen",
                  "magazine": "Shonen Jump Plus",
              	"release_year": 2024,
              	"tags": ["Drame", "Fantaisie", "Surnaturel"],
              	"alternative_titles": ["Koyori no Kaerimichi", "こよりの帰り道"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Le fil rouge de Koyori",
              			"volume": "",
              			"last_updated": "1714514400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/a846wevbvyx"
              			}
              		}
              	}
              }
            -----------------------------------


            Fichier : Kurage_no_Uta.json
            ----------------------------
              {
              	"title": "Le chant de la méduse",
              	"description": "Kazuma, passionné de course de haies, découvre qu'Otoha, une lycéenne devenue chanteuse populaire. S'encourageant mutuellement à surmonter leurs épreuves !",
              	"artist": "Saka Mikami",
              	"author": "Saka Mikami",
              	"cover": "https://meo.comick.pictures/aOXBLz.png",
              	"manga_type": "Shonen",
                  "magazine": "Pocket Shonen Magazine",
              	"release_year": 2021,
              	"tags": ["Sports", "Drame", "Vie étudiante", "Tranche de vie", "Musique"],
              	"alternative_titles": ["Kurage no Uta", "Song of the Jellyfish", "海月のうた"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Kurage no Uta",
              			"volume": "",
              			"last_updated": "1714946400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9qp8gyp"
              			}
              		}
              	}
              }
            ----------------------------


            Fichier : Succession.json
            -------------------------
              {
              	"title": "Succession",
              	"description": "Séduite par un manga anonyme qui s'efface mystérieusement de sa mémoire, une lectrice se met à en écrire sa propre version pour combattre cet oubli. Elle la publie à son tour, dans l'espoir de retrouver la trace de l'insaisissable auteur original.",
              	"artist": "Tyomevv2",
              	"author": "Tyomevv2",
              	"cover": "https://cdn.imgchest.com/files/45xcv8828o7.png",
              	"manga_type": "Seinen",
              	"magazine": "Twitter",
              	"release_year": 2024,
              	"tags": [
              		"Mystère",
              		"Fantaisie",
              		"Tranche de vie"
              	],
              	"alternative_titles": [
              		"継ぎ穂"
              	],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Succession",
              			"volume": "",
              			"last_updated": "1753214400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/9p4nj99q5yn"
              			}
              		}
              	}
              }
            -------------------------


            Fichier : Takaki_Tsuyoshi_OS.json
            ---------------------------------
              {
              	"title": "Takaki Tsuyoshi - OS",
              	"description": "Compilation de plusieurs One-Shot de l'auteur de Heart Gear & Black Torch.",
              	"artist": "Takaki Tsuyoshi",
              	"author": "Takaki Tsuyoshi",
              	"cover": "https://meo.comick.pictures/5YbrB.jpg",
              	"manga_type": "Shonen",
                  "magazine": "Twitter",
              	"release_year": 2018,
              	"tags": ["Action", "Fantaisie", "Démons", "Magie", "Drame", "Aliens", "Surnaturel"],
              	"alternative_titles": ["Takaki Tsuyoshi - OS"],
              	"release_status": "Finis",
              	"os": true,
              	"chapters": {
              		"1": {
              			"title": "Hardcore Santa and the Spirit's Wail",
              			"volume": "",
              			"last_updated": "1725832800",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/na7km3xzq48"
              			}
              		},
              		"2": {
              			"title": "A Tale of Two Loners",
              			"volume": "",
              			"last_updated": "1725832801",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxng9o42"
              			}
              		},
              		"3": {
              			"title": "A Certain Swordsman's Journey Through Life",
              			"volume": "",
              			"last_updated": "1725832802",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/6eyr9prgeyp"
              			}
              		},
              		"4": {
              			"title": "The Reason Why I Won’t Quit Smoking",
              			"volume": "",
              			"last_updated": "1725832803",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/xny8vbpzo7b"
              			}
              		},
              		"5": {
              			"title": "Thoughts on Christmas",
              			"volume": "",
              			"last_updated": "1726524000",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/bp45pak82y5"
              			}
              		},
              		"6": {
              			"title": "Looks Don't Really Matter Much at the Job",
              			"volume": "",
              			"last_updated": "1726524004",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/agyvqmz6948"
              			}
              		}
              	}
              }
            ---------------------------------


            Fichier : Toumei_to_Zanzou.json
            -------------------------------
              {
              	"title": "Dessiner l'invisible",
              	"description": "Shoko, une artiste en herbe, gagne sa vie en dessinant des portraits. Un jour, un jeune homme enveloppé de bandages lui demande de faire son autoportrait, mais il s'avère qu'il s'agit en fait d'un homme invisible...",
              	"artist": "Ashioka Rangyo",
              	"author": "Ashioka Rangyo",
              	"cover": "https://meo.comick.pictures/EOdwzj.png",
              	"manga_type": "Shonen",
                  "magazine": "Shonen Jump Plus",
              	"release_year": 2025,
              	"tags": ["Drame", "Art", "Psychologie"],
              	"alternative_titles": ["Toumei to Zanzou", "Drawing the Invisible", "透明と残像"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Dessiner l'invisible",
              			"volume": "",
              			"last_updated": "1746655200",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/bp45pwaaxy5"
              			}
              		}
              	}
              }
            -------------------------------


            Fichier : Usemono_Sagashi.json
            ------------------------------
              {
              	"title": "Usemono Sagashi",
              	"description": "Un chercheur d'objets perdus, engagé par un client mystérieux, découvre un secret troublant qui révèle les liens profonds entre humains et objets, mettant à l'épreuve sa propre mission et ses valeurs...",
              	"artist": "Muji Mujina",
              	"author": "Muji Mujina",
              	"cover": "https://meo.comick.pictures/Z8nerl.jpg",
              	"manga_type": "Shonen",
                  "magazine": "Weekly Shonen Jump",
              	"release_year": 2024,
              	"tags": ["Action", "Fantôme", "Samouraï", "Aventure", "Magie", "Surnaturel"],
              	"alternative_titles": ["The Hunt for the Usemono", "失せモノ探し"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Usemono Sagashi",
              			"volume": "",
              			"last_updated": "1722204000",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgnekpyx"
              			}
              		}
              	}
              }
            ------------------------------


            Fichier : Uturu.json
            --------------------
              {
              	"title": "Uturu",
              	"description": "One Shot de Uchida Akira",
              	"artist": "Uchida Akira",
              	"author": "Uchida Akira",
              	"cover": "https://meo.comick.pictures/W8Y5Rr.png",
              	"manga_type": "Seinen",
                  "magazine": "Twitter",
              	"release_year": 2023,
              	"tags": ["Drame", "Fantaisie"],
              	"alternative_titles": ["水いらず"],
              	"release_status": "Fini",
              	"os": true,
              	"chapters": {
              		"0": {
              			"title": "Uturu",
              			"volume": "",
              			"last_updated": "1718481600",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/ne7bdeomn45"
              			}
              		}
              	}
              }
            --------------------


            Fichier : Wakaba-sanchi_no_Aoi_Koi.json
            ---------------------------------------
              {
              	"title": "The Wakaba Home's Green Loves",
              	"description": "Une comédie romantique sur quatre sœurs qui vivent leur premier amour en même temps. Alors que l'aînée a le béguin pour le garçon de son travail à temps partiel, les trois autres font face à leurs premières expériences romantiques avec les garçons de leurs classes et clubs scolaires. Tous les soirs, les quatre sœurs ont des discussions entre filles, à cœur ouvert, sur leurs premiers amours respectifs",
              	"artist": "Ogata Akane",
              	"author": "Ogata Akane",
              	"cover": "https://meo.comick.pictures/Q8z7Lp.png",
              	"manga_type": "Shonen",
                  "magazine": "Sunday Webry",
              	"release_year": 2024,
              	"tags": ["Romance", "comédie", "Ecole", "Tranche de vie"],
              	"alternative_titles": ["若葉さんちの青い恋", "The Wakaba Home's Blue Loves"],
              	"release_status": "En cours",
              	"covers_gallery": [
              		{ "url_hq": "https://meo.comick.pictures/Q8z7Lp.jpg", "url_lq": "https://meo.comick.pictures/Q8z7Lp-s.jpg", "volume": "2" },
              		{ "url_hq": "https://meo.comick.pictures/2NRx7L.jpg", "url_lq": "https://meo.comick.pictures/2NRx7L-s.jpg", "volume": "1" }
              	],
              	"chapters": {
              		"1": {
              			"title": "Les quatre sœurs et leur premier amour",
              			"volume": "1",
              			"last_updated": "1747094400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/ljyqxjeoo42"
              			}
              		},
              		"2": {
              			"title": "Je veux savoir",
              			"volume": "1",
              			"last_updated": "1747094401",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/vj4jkxjb278"
              			}
              		},
              		"3": {
              			"title": "Mauvais perdant",
              			"volume": "1",
              			"last_updated": "1747094402",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/wl7lgndbpyx"
              			}
              		},
              		"4": {
              			"title": "Être franche",
              			"volume": "1",
              			"last_updated": "1751486400",
              			"groups": {
              				"Big_herooooo": "/proxy/api/imgchest/chapter/n87wxjvxbyx"
              			}
              		}
              	}
              }
            ---------------------------------------

    Dossier : fonts/

        Fichier (police) : Urbanist-Bold.ttf

        Fichier (police) : Urbanist-Regular.ttf

        Fichier (police) : Urbanist-SemiBold.ttf
    Dossier : functions/

        Fichier : _middleware.js
        ------------------------
          // functions/_middleware.js
          
          function slugify(text) {
            if (!text) return "";
            return text
              .toString()
              .normalize("NFD") // Sépare les caractères de leurs accents (ex: "é" -> "e" + "´")
              .replace(/[\u0300-\u036f]/g, "") // Supprime les accents et diacritiques
              .toLowerCase()
              .trim()
              .replace(/[\s\u3000]+/g, "_") // Remplace les espaces (normaux et idéographiques) par un underscore
              .replace(/[^\w-]+/g, "") // Supprime les caractères non autorisés
              .replace(/--+/g, "_"); // Nettoie les tirets multiples (au cas où)
          }
          
          function generateMetaTags(meta) {
            const title = meta.title || "BigSolo";
            const description =
              meta.description ||
              "Retrouvez toutes les sorties de Big_herooooo en un seul et unique endroit !";
            const imageUrl =
              meta.image || new URL("/img/banner.jpg", meta.url).toString();
            const url = meta.url || "https://bigsolo.org";
          
            return `
              <title>${title}</title>
              <meta name="description" content="${description}">
              <meta property="og:title" content="${title}" />
              <meta property="og:description" content="${description}" />
              <meta property="og:image" content="${imageUrl}" />
              <meta property="og:image:width" content="1200" />
              <meta property="og:image:height" content="630" />
              <meta property="og:url" content="${url}" />
              <meta name="twitter:title" content="${title}">
              <meta name="twitter:description" content="${description}">
              <meta name="twitter:image" content="${imageUrl}">
            `;
          }
          
          export async function onRequest(context) {
            const { request, env, next } = context;
            const url = new URL(request.url);
            const originalPathname = url.pathname;
            let pathname =
              originalPathname.endsWith("/") && originalPathname.length > 1
                ? originalPathname.slice(0, -1)
                : originalPathname;
            // on retire ".html" si présent
            if (pathname.endsWith(".html")) {
              pathname = pathname.slice(0, -5);
            }
            if (pathname === "/index") pathname = "/"; // Traite "index" comme racine
          
            // --- GESTION SPÉCIFIQUE DES URLS DE LA GALERIE ---
            if (pathname.startsWith("/galerie")) {
              const metaData = {
                title: "Galerie - BigSolo",
                description:
                  "Découvrez toutes les colorisations et fan-arts de la communauté !",
                htmlFile: "/galerie.html",
              };
              const assetUrl = new URL(metaData.htmlFile, url.origin);
              const response = await env.ASSETS.fetch(assetUrl);
              let html = await response.text();
              const tags = generateMetaTags({ ...metaData, url: url.href });
              html = html.replace("<!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->", tags);
              return new Response(html, {
                headers: { "Content-Type": "text/html;charset=UTF-8" },
              });
            }
          
            // Gestion des pages statiques
            const staticPageMeta = {
              "/": {
                title: "Accueil - BigSolo",
                description:
                  "Retrouvez toutes les sorties de Big_herooooo en un seul et unique endroit !",
                htmlFile: "/index.html",
                image: "/img/banner.jpg",
              },
              "/presentation": {
                title: "Questions & Réponses - BigSolo",
                description:
                  "Les réponses de BigSolo à vos questions sur son parcours dans le scantrad.",
                htmlFile: "/presentation.html",
              },
            };
          
            if (staticPageMeta[pathname]) {
              const metaData = staticPageMeta[pathname];
              const assetUrl = new URL(metaData.htmlFile, url.origin);
              const response = await env.ASSETS.fetch(assetUrl);
              let html = await response.text();
              const tags = generateMetaTags({ ...metaData, url: url.href });
              html = html.replace("<!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->", tags);
              return new Response(html, {
                headers: { "Content-Type": "text/html;charset=UTF-8" },
              });
            }
          
            // Ignorer les assets connus pour ne pas faire de traitement inutile
            const knownPrefixes = [
              "/css/",
              "/js/",
              "/img/",
              "/data/",
              "/includes/",
              "/functions/",
              "/api/",
              "/fonts/",
            ];
            if (knownPrefixes.some((prefix) => originalPathname.startsWith(prefix))) {
              return next();
            }
          
            // --- LOGIQUE DE ROUTAGE DYNAMIQUE POUR LES SÉRIES ET LE LECTEUR ---
            try {
              const pathSegments = originalPathname.split("/").filter(Boolean);
              if (pathSegments.length === 0) return next(); // C'est la page d'accueil, déjà gérée
          
              const seriesSlug = pathSegments[0];
          
              // Charger la config et les données de toutes les séries une seule fois
              const config = await env.ASSETS.fetch(
                new URL("/data/config.json", url.origin)
              ).then((res) => res.json());
              const seriesFiles = config.LOCAL_SERIES_FILES || [];
              const allSeriesDataPromises = seriesFiles.map((filename) =>
                env.ASSETS.fetch(new URL(`/data/series/${filename}`, url.origin))
                  .then((res) => res.json().then((data) => ({ data, filename })))
                  .catch((e) => {
                    console.error(`Failed to load ${filename}`, e);
                    return null;
                  })
              );
              const allSeriesResults = (await Promise.all(allSeriesDataPromises)).filter(
                Boolean
              );
              const foundSeries = allSeriesResults.find(
                (s) => s && s.data && slugify(s.data.title) === seriesSlug
              );
          
              if (!foundSeries) return next(); // Laisser Cloudflare Pages gérer la 404
          
              const seriesData = foundSeries.data;
              const jsonFilename = foundSeries.filename;
              const ogImageFilename = jsonFilename.replace(".json", ".png");
              const ogImageUrl = new URL(
                `/img/banner/${ogImageFilename}`,
                url.origin
              ).toString();
          
              // ROUTE 1: LECTEUR DE CHAPITRE (ex: /nom-de-serie/123 ou /nom-de-serie/123/5)
              const isChapterRoute =
                (pathSegments.length === 2 || pathSegments.length === 3) &&
                !isNaN(parseFloat(pathSegments[1]));
          
              if (isChapterRoute) {
                const chapterNumber = pathSegments[1];
                if (seriesData.chapters[chapterNumber]) {
                  const metaData = {
                    title: `${seriesData.title} - Chapitre ${chapterNumber} | BigSolo`,
                    description: `Lisez le chapitre ${chapterNumber} de ${seriesData.title}. ${seriesData.description}`,
                    image: ogImageUrl,
                  };
          
                  // Remplacement ici : on sert le nouveau template
                  const assetUrl = new URL("/templates/MangaReader.html", url.origin);
                  let html = await env.ASSETS.fetch(assetUrl).then((res) => res.text());
          
                  const tags = generateMetaTags({ ...metaData, url: url.href });
                  html = html.replace("<!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->", tags);
          
                  const readerPayload = {
                    series: seriesData,
                    chapterNumber: chapterNumber,
                  };
                  html = html.replace(
                    "<!-- READER_DATA_PLACEHOLDER -->",
                    JSON.stringify(readerPayload)
                  );
          
                  return new Response(html, {
                    headers: { "Content-Type": "text/html;charset=UTF-8" },
                  });
                }
              }
          
              // --- NOUVELLE SECTION POUR GÉRER LES ÉPISODES ---
              const isEpisodeRoute =
                pathSegments.length > 1 && pathSegments[1] === "episodes";
              if (isEpisodeRoute) {
                let metaData;
                const animeInfo =
                  seriesData.anime && seriesData.anime[0] ? seriesData.anime[0] : null;
          
                if (pathSegments.length === 3) {
                  // C'est une page de lecteur d'épisode
                  const episodeNumber = pathSegments[2];
                  metaData = {
                    title: `Épisode ${episodeNumber} de ${seriesData.title} - BigSolo`,
                    description: `Regardez l'épisode ${episodeNumber} de l'anime ${seriesData.title}.`,
                    image: animeInfo?.cover_an || ogImageUrl,
                  };
                } else {
                  // C'est la liste des épisodes
                  metaData = {
                    title: `Épisodes de ${seriesData.title} - BigSolo`,
                    description: `Liste de tous les épisodes de l'anime ${seriesData.title}.`,
                    image: animeInfo?.cover_an || ogImageUrl,
                  };
                }
                // Dans tous les cas (liste ou lecteur), on sert la page de détail qui contient le routeur JS
                const assetUrl = new URL("/series-detail.html", url.origin);
                let html = await env.ASSETS.fetch(assetUrl).then((res) => res.text());
          
                const tags = generateMetaTags({ ...metaData, url: url.href });
                html = html.replace("<!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->", tags);
                html = html.replace(
                  "<!-- SERIES_DATA_PLACEHOLDER -->",
                  JSON.stringify(seriesData)
                );
          
                return new Response(html, {
                  headers: { "Content-Type": "text/html;charset=UTF-8" },
                });
              }
              // --- FIN DE LA NOUVELLE SECTION ---
          
              // ROUTE 2: GALERIE DE COUVERTURES (ex: /nom-de-serie/cover)
              if (pathSegments.length > 1 && pathSegments[1] === "cover") {
                const metaData = {
                  title: `Couvertures de ${seriesData.title} - BigSolo`,
                  description: `Découvrez toutes les couvertures de la série ${seriesData.title} !`,
                  image: ogImageUrl,
                };
                const assetUrl = new URL("/series-covers.html", url.origin);
                let html = await env.ASSETS.fetch(assetUrl).then((res) => res.text());
          
                const tags = generateMetaTags({ ...metaData, url: url.href });
                html = html.replace("<!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->", tags);
                return new Response(html, {
                  headers: { "Content-Type": "text/html;charset=UTF-8" },
                });
              }
          
              // ROUTE 3: PAGE DE DÉTAIL DE LA SÉRIE (ex: /nom-de-serie)
              if (pathSegments.length === 1) {
                const metaData = {
                  title: `${seriesData.title} - BigSolo`,
                  description: seriesData.description,
                  image: ogImageUrl,
                };
                const assetUrl = new URL("/series-detail.html", url.origin);
                let html = await env.ASSETS.fetch(assetUrl).then((res) => res.text());
          
                const tags = generateMetaTags({ ...metaData, url: url.href });
                html = html.replace("<!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->", tags);
                html = html.replace(
                  "<!-- SERIES_DATA_PLACEHOLDER -->",
                  JSON.stringify(seriesData)
                );
          
                return new Response(html, {
                  headers: { "Content-Type": "text/html;charset=UTF-8" },
                });
              }
            } catch (error) {
              console.error(
                `Error during dynamic routing for "${originalPathname}":`,
                error
              );
            }
          
            // Si aucune route ne correspond, on passe la main
            return next();
          }
        ------------------------

        Dossier : api/

            Fichier : imgchest-chapter-pages.js
            -----------------------------------
              export async function onRequest(context) {
                const { request, env } = context;
                const url = new URL(request.url);
                const id = url.searchParams.get("id");
              
                const headers = {
                  "Content-Type": "application/json",
                  "Access-Control-Allow-Origin": "*",
                  "X-Cache": "MISS", // Par défaut, on suppose un cache MISS
                };
              
                if (!id) {
                  return new Response(
                    JSON.stringify({ error: "Le paramètre 'id' est manquant." }),
                    { status: 400, headers }
                  );
                }
              
                // Clé unique pour le cache de ce chapitre
                const cacheKey = `imgchest_chapter_${id}`;
              
                try {
                  // 1. Tenter de lire depuis le cache KV
                  const cachedData = await env.IMG_CHEST_CACHE.get(cacheKey);
                  if (cachedData) {
                    console.log(`[IMG_CHEST_CHAPTER] Cache HIT → key "${cacheKey}"`);
                    headers["X-Cache"] = "HIT";
                    return new Response(cachedData, { headers });
                  }
                  console.log(`[IMG_CHEST_CHAPTER] Cache MISS → key "${cacheKey}"`);
              
                  // 2. Si non trouvé dans le cache, faire la requête à ImgChest
                  const responseText = await fetch(`https://imgchest.com/p/${id}`, {
                    headers: {
                      "User-Agent": "BigSolo-Site-Reader-Worker/1.1 (+https://bigsolo.org)",
                    },
                  }).then((res) => {
                    if (!res.ok)
                      throw new Error(
                        `Erreur HTTP ${res.status} lors de la récupération de la page ImgChest.`
                      );
                    return res.text();
                  });
              
                  // 3. Extraire les données de la page HTML
                  const match = responseText.match(
                    /<div id="app" data-page="([^"]+)"><\/div>/
                  );
                  if (!match || !match[1]) {
                    throw new Error(
                      "Impossible de trouver les données de la page dans la réponse d'ImgChest."
                    );
                  }
              
                  // 4. Nettoyer et parser le JSON
                  const jsonDataString = match[1].replaceAll("&quot;", '"');
                  const pageData = JSON.parse(jsonDataString);
                  const files = pageData?.props?.post?.files;
              
                  if (!files || !Array.isArray(files)) {
                    throw new Error(
                      "Le format des données d'ImgChest a changé, la liste des fichiers est introuvable."
                    );
                  }
              
                  const payload = JSON.stringify(files);
              
                  // 5. Stocker le résultat dans le cache KV pour les prochaines requêtes
                  // Le TTL (Time To Live) est de 86400 secondes (24 heures)
                  await env.IMG_CHEST_CACHE.put(cacheKey, payload, {
                    expirationTtl: 2592000,
                  });
                  console.log(
                    `[IMG_CHEST_CHAPTER] KV PUT SUCCESS → Key "${cacheKey}" stored for 30 days`
                  );
              
                  return new Response(payload, { headers });
                } catch (error) {
                  console.error(
                    `[IMG_CHEST_CHAPTER] Erreur du worker pour l'ID '${id}':`,
                    error.message
                  );
                  const errorResponse = {
                    error: "Impossible de récupérer les données du chapitre.",
                    details: error.message,
                  };
                  return new Response(JSON.stringify(errorResponse), {
                    status: 500,
                    headers,
                  });
                }
              }
            -----------------------------------


            Fichier : imgchest-get-all-pages.js
            -----------------------------------
              export async function onRequest(context) {
                const { env } = context;
                const cacheKey = `imgchest_all_pages_combined`;
                const username = "Big_herooooo";
                const maxPages = 9;
              
                console.log(`[IMG_CHEST] Incoming request → Checking KV key "${cacheKey}"`);
              
                // 🔍 1. Tenter de lire depuis le cache KV
                try {
                  const cached = await env.IMG_CHEST_CACHE.get(cacheKey);
                  if (cached) {
                    console.log(`[IMG_CHEST] Cache HIT → key "${cacheKey}"`);
                    return new Response(cached, {
                      headers: {
                        "Content-Type": "application/json",
                        "Access-Control-Allow-Origin": "*",
                        "X-Cache": "HIT",
                      },
                    });
                  } else {
                    console.log(`[IMG_CHEST] Cache MISS → No value for key "${cacheKey}"`);
                  }
                } catch (err) {
                  console.error(`[IMG_CHEST] KV GET ERROR for key "${cacheKey}":`, err);
                }
              
                // 🛠 2. Si non trouvé, on va chercher les pages et les agréger
                let allPosts = [];
              
                for (let page = 1; page <= maxPages; page++) {
                  const apiUrl = `https://imgchest.com/api/posts?username=${username}&sort=new&page=${page}&status=0`;
                  console.log(`[IMG_CHEST] Fetching ImgChest page ${page} → ${apiUrl}`);
              
                  try {
                    const res = await fetch(apiUrl, {
                      headers: {
                        "User-Agent": "BigSoloSite-PageFetcher/1.2",
                        Accept: "application/json",
                      },
                    });
              
                    if (!res.ok) {
                      console.warn(
                        `[IMG_CHEST] Failed fetch (HTTP ${res.status}) → stopping`
                      );
                      break;
                    }
              
                    const json = await res.json();
                    if (!json.data || json.data.length === 0) {
                      console.log(`[IMG_CHEST] No more data on page ${page}, stopping.`);
                      break;
                    }
              
                    const simplified = json.data.map((post) => ({
                      id: post.slug || post.id,
                      views: post.views,
                      title: post.title,
                      nsfw: post.nsfw,
                    }));
              
                    allPosts.push(...simplified);
              
                    if (json.data.length < 24) {
                      console.log(
                        `[IMG_CHEST] Page ${page} had less than 24 posts → end of data.`
                      );
                      break;
                    }
                  } catch (err) {
                    console.error(`[IMG_CHEST] ERROR fetching page ${page}:`, err);
                    break;
                  }
                }
              
                const payload = JSON.stringify({ posts: allPosts });
                console.log(`[IMG_CHEST] Finished fetching ${allPosts.length} posts.`);
              
                // 3. Stocker dans Cloudflare KV
                try {
                  await env.IMG_CHEST_CACHE.put(cacheKey, payload, { expirationTtl: 3600 });
                  console.log(`[IMG_CHEST] KV PUT SUCCESS → Key "${cacheKey}" stored for 1h`);
                } catch (e) {
                  console.error(
                    `[IMG_CHEST] KV PUT ERROR → Could not store key "${cacheKey}":`,
                    e
                  );
                }
              
                return new Response(payload, {
                  headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "X-Cache": "MISS",
                  },
                });
              }
            -----------------------------------


            Fichier : log-action.js
            -----------------------
              // functions/api/log-action.js
              
              export async function onRequest(context) {
                const { request, env } = context;
              
                if (request.method !== "POST") {
                  return new Response("Méthode non autorisée", { status: 405 });
                }
              
                try {
                  const payload = await request.json();
                  const { seriesSlug, actions } = payload;
              
                  if (!seriesSlug || !Array.isArray(actions) || actions.length === 0) {
                    return new Response(JSON.stringify({ error: "Données invalides." }), {
                      status: 400,
                    });
                  }
              
                  // Ajout : pour chaque action de type 'rate', s'assurer que la valeur est dans payload.value
                  for (const action of actions) {
                    if (action.type === "rate" && action.value !== undefined) {
                      action.payload = { value: action.value };
                    }
                  }
              
                  console.log("[API log-action] Reçu une requête log-action");
              
                  // NOUVELLE LOGIQUE : Créer une clé unique pour chaque envoi de log
                  // Cela évite les race conditions.
                  const uniqueId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                  const logKey = `log:${seriesSlug}:${uniqueId}`;
              
                  // On écrit directement les actions dans cette nouvelle clé unique, sans lire au préalable.
                  await env.INTERACTIONS_LOG.put(logKey, JSON.stringify(actions));
              
                  return new Response(
                    JSON.stringify({ success: true, logged: actions.length }),
                    { status: 200 }
                  );
                } catch (error) {
                  console.error("[API log-action] Erreur:", error);
                  return new Response(
                    JSON.stringify({ error: "Erreur interne du serveur." }),
                    { status: 500 }
                  );
                }
              }
            -----------------------


            Fichier : process-log.js
            ------------------------
              // functions/api/process-log.js
              
              // La fonction peut maintenant être déclenchée par un cron OU par une requête GET/POST manuelle
              export async function onRequest(context) {
                const { env } = context;
                console.log(
                  "CRON/MANUAL: Démarrage du traitement des logs d'interactions..."
                );
              
                try {
                  const list = await env.INTERACTIONS_LOG.list({ prefix: "log:" });
                  if (list.keys.length === 0) {
                    console.log("CRON/MANUAL: Aucun log à traiter. Terminé.");
                    return new Response("Aucun log à traiter.", { status: 200 });
                  }
              
                  const logsBySeries = {};
                  for (const key of list.keys) {
                    const parts = key.name.split(":");
                    if (parts.length >= 2) {
                      const seriesSlug = parts[1];
                      if (!logsBySeries[seriesSlug]) {
                        logsBySeries[seriesSlug] = [];
                      }
                      logsBySeries[seriesSlug].push(key.name);
                    }
                  }
              
                  let totalActionsProcessed = 0;
              
                  for (const seriesSlug in logsBySeries) {
                    const cacheKey = `interactions:${seriesSlug}`;
                    let seriesInteractions =
                      (await env.INTERACTIONS_CACHE.get(cacheKey, "json")) || {};
              
                    for (const logKey of logsBySeries[seriesSlug]) {
                      const logActionsText = await env.INTERACTIONS_LOG.get(logKey);
                      if (logActionsText) {
                        const logActions = JSON.parse(logActionsText);
              
                        for (const action of logActions) {
                          const { chapter, type, payload } = action;
              
                          // ↓↓↓ LA MODIFICATION EST ICI ↓↓↓
                          // On vérifie si l'identifiant est pour un épisode (commence par "ep-")
                          const isEpisode = String(chapter).startsWith("ep-");
              
                          // Initialiser l'objet si nécessaire, avec la bonne structure
                          if (!seriesInteractions[chapter]) {
                            if (isEpisode) {
                              seriesInteractions[chapter] = { likes: 0 }; // Pas de commentaires pour les épisodes
                            } else {
                              seriesInteractions[chapter] = { likes: 0, comments: [] };
                            }
                          }
              
                          // Appliquer les actions
                          if (type === "like") {
                            seriesInteractions[chapter].likes =
                              (seriesInteractions[chapter].likes || 0) + 1;
                          } else if (type === "unlike") {
                            seriesInteractions[chapter].likes = Math.max(
                              0,
                              (seriesInteractions[chapter].likes || 0) - 1
                            );
                          }
                          // Gestion des notes (ratings) au niveau de la série (pas par chapitre)
                          else if (type === "rate") {
                            if (!seriesInteractions.stats) seriesInteractions.stats = {};
                            if (!Array.isArray(seriesInteractions.stats.ratings)) {
                              seriesInteractions.stats.ratings = [];
                            }
                            // On stocke la note dans un tableau temporaire (sera agrégé à la fin)
                            seriesInteractions.stats.ratings.push(
                              payload && payload.value !== undefined
                                ? payload.value
                                : action.value
                            );
                          }
                          // Les actions de commentaires ne seront traitées que si ce n'est pas un épisode
                          else if (!isEpisode) {
                            if (type === "add_comment") {
                              if (
                                !seriesInteractions[chapter].comments.some(
                                  (c) => c.id === payload.id
                                )
                              ) {
                                seriesInteractions[chapter].comments.push(payload);
                              }
                            } else if (type === "like_comment" || type === "unlike_comment") {
                              // Correction: vérifier que payload et payload.commentId existent
                              if (payload && payload.commentId) {
                                const comment = seriesInteractions[chapter].comments.find(
                                  (c) => c.id === payload.commentId
                                );
                                if (comment) {
                                  if (type === "like_comment") {
                                    comment.likes = (comment.likes || 0) + 1;
                                  } else if (type === "unlike_comment") {
                                    comment.likes = Math.max(0, (comment.likes || 0) - 1);
                                  }
                                }
                              }
                              // Sinon, on ignore silencieusement l'action malformée
                            }
                          }
                          // ↑↑↑ FIN DE LA MODIFICATION ↑↑↑
                        }
                        totalActionsProcessed += logActions.length;
                      }
                      await env.INTERACTIONS_LOG.delete(logKey);
                    }
              
                    // Agrégation finale des notes (ratings) pour stats globales
                    if (
                      seriesInteractions.stats &&
                      Array.isArray(seriesInteractions.stats.ratings)
                    ) {
                      const ratingsArr = seriesInteractions.stats.ratings.filter(
                        (v) => typeof v === "number" && !isNaN(v)
                      );
                      const ratingsCount = ratingsArr.length;
                      const avgRating =
                        ratingsCount > 0
                          ? ratingsArr.reduce((a, b) => a + b, 0) / ratingsCount
                          : null;
                      seriesInteractions.stats.ratings = {
                        count: ratingsCount,
                        average:
                          avgRating !== null ? Math.round(avgRating * 100) / 100 : null,
                      };
                    }
                    await env.INTERACTIONS_CACHE.put(
                      cacheKey,
                      JSON.stringify(seriesInteractions)
                    );
                    console.log(
                      `CRON/MANUAL: Traité ${logsBySeries[seriesSlug].length} fichiers de log pour la série "${seriesSlug}".`
                    );
                  }
              
                  console.log(
                    `CRON/MANUAL: Traitement terminé. ${totalActionsProcessed} actions au total.`
                  );
                  return new Response(
                    `Traitement terminé. ${totalActionsProcessed} actions traitées.`,
                    { status: 200 }
                  );
                } catch (error) {
                  console.error(
                    "CRON/MANUAL: Erreur critique lors du traitement des logs:",
                    error && error.stack ? error.stack : error
                  );
                  // Ajout : retourne l'erreur détaillée dans la réponse pour debug local
                  return new Response(
                    "Erreur lors du traitement : " +
                      (error && error.stack ? error.stack : error),
                    { status: 500 }
                  );
                }
              }
            ------------------------


            Fichier : series-stats.js
            -------------------------
              // functions/api/series-stats.js
              
              export async function onRequest(context) {
                  const { request, env } = context;
                  const url = new URL(request.url);
                  const seriesSlug = url.searchParams.get("slug");
              
                  const headers = {
                      "Content-Type": "application/json",
                      "Access-Control-Allow-Origin": "*",
                      "Cache-Control": "public, max-age=60, s-maxage=60" // Cache court
                  };
              
                  if (!seriesSlug) {
                      return new Response(JSON.stringify({ error: "Le paramètre 'slug' est manquant." }), { status: 400, headers });
                  }
              
                  try {
                      const cacheKey = `interactions:${seriesSlug}`;
                      const cachedData = await env.INTERACTIONS_CACHE.get(cacheKey, 'json');
              
                      if (cachedData) {
                          return new Response(JSON.stringify(cachedData), { headers });
                      } else {
                          // Si aucune donnée n'existe, retourner un objet vide
                          return new Response(JSON.stringify({}), { headers });
                      }
                  } catch (error) {
                      console.error(`[API series-stats] Erreur pour le slug '${seriesSlug}':`, error);
                      return new Response(JSON.stringify({ error: "Impossible de récupérer les statistiques de la série." }), { status: 500, headers });
                  }
              }
            -------------------------

            Dossier : admin/

                Fichier : batch-delete.js
                -------------------------
                  // functions/api/admin/batch-delete.js
                  
                  export async function onRequest(context) {
                    const { request, env } = context;
                    console.log("[API /api/admin/batch-delete] Received batch delete request.");
                  
                    // 1. Vérification de la méthode et de l'authentification
                    if (request.method !== "POST") {
                      return new Response("Méthode non autorisée", { status: 405 });
                    }
                    const authToken = request.headers
                      .get("Authorization")
                      ?.replace("Bearer ", "");
                    if (authToken !== env.ADMIN_TOKEN) {
                      console.error("- Auth token check FAILED.");
                      return new Response("Non autorisé", { status: 401 });
                    }
                    console.log("- Auth token check PASSED.");
                  
                    try {
                      const deletions = await request.json();
                      if (!Array.isArray(deletions) || deletions.length === 0) {
                        console.log("- No deletions to process.");
                        return new Response(
                          JSON.stringify({ success: true, message: "Aucune action à traiter." }),
                          { status: 200 }
                        );
                      }
                      console.log(`- Received a batch of ${deletions.length} deletions.`);
                  
                      // 2. Grouper les suppressions par série pour optimiser les écritures KV
                      const deletionsBySeries = deletions.reduce((acc, del) => {
                        if (!acc[del.seriesSlug]) {
                          acc[del.seriesSlug] = new Set();
                        }
                        acc[del.seriesSlug].add(del.commentId);
                        return acc;
                      }, {});
                      console.log(
                        "- Deletions grouped by series:",
                        Object.keys(deletionsBySeries)
                      );
                  
                      // 3. Traiter chaque série
                      for (const seriesSlug in deletionsBySeries) {
                        const cacheKey = `interactions:${seriesSlug}`;
                        const commentIdsToDelete = deletionsBySeries[seriesSlug];
                        let seriesData = await env.INTERACTIONS_CACHE.get(cacheKey, "json");
                  
                        if (seriesData) {
                          console.log(`- Processing series: ${seriesSlug}`);
                          let commentsDeletedCount = 0;
                          // Itérer sur chaque chapitre de la série
                          for (const chapterNumber in seriesData) {
                            if (seriesData[chapterNumber].comments) {
                              const initialCount = seriesData[chapterNumber].comments.length;
                              seriesData[chapterNumber].comments = seriesData[
                                chapterNumber
                              ].comments.filter((comment) => !commentIdsToDelete.has(comment.id));
                              commentsDeletedCount +=
                                initialCount - seriesData[chapterNumber].comments.length;
                            }
                          }
                          await env.INTERACTIONS_CACHE.put(cacheKey, JSON.stringify(seriesData));
                          console.log(
                            `- Deleted ${commentsDeletedCount} comment(s) for series ${seriesSlug} and updated KV.`
                          );
                        } else {
                          console.warn(`- Cache key not found for series: ${seriesSlug}`);
                        }
                      }
                  
                      return new Response(
                        JSON.stringify({ success: true, message: "Traitement par lot réussi." }),
                        { status: 200 }
                      );
                    } catch (error) {
                      console.error(
                        "[API /api/admin/batch-delete] An unexpected error occurred:",
                        error
                      );
                      return new Response("Erreur interne du serveur", { status: 500 });
                    }
                  }
                -------------------------


                Fichier : comments.js
                ---------------------
                  // functions/api/admin/comments.js
                  
                  export async function onRequest(context) {
                    const { request, env } = context;
                    console.log(
                      `[API /api/admin/comments] Received request with method: ${request.method}`
                    );
                  
                    // 1. Vérification du token d'authentification
                    const authToken = request.headers
                      .get("Authorization")
                      ?.replace("Bearer ", "");
                    if (authToken !== env.ADMIN_TOKEN) {
                      console.error("- Auth token check FAILED.");
                      return new Response("Non autorisé", { status: 401 });
                    }
                    console.log("- Auth token check PASSED.");
                  
                    // 2. Gérer la méthode de la requête
                    if (request.method === "GET") {
                      return await handleGetComments(env);
                    } else if (request.method === "POST") {
                      // MODIFIÉ : On utilise POST pour la suppression maintenant
                      return await handleDeleteComment(request, env);
                    }
                  
                    console.warn(`- Method ${request.method} is not allowed.`);
                    return new Response("Méthode non autorisée", { status: 405 });
                  }
                  
                  async function handleGetComments(env) {
                    console.log("- Handling GET request...");
                    try {
                      const list = await env.INTERACTIONS_CACHE.list();
                      console.log(`- Found ${list.keys.length} keys in INTERACTIONS_CACHE.`);
                      const allComments = [];
                  
                      for (const key of list.keys) {
                        const seriesSlug = key.name.replace("interactions:", "");
                        const seriesData = await env.INTERACTIONS_CACHE.get(key.name, "json");
                  
                        for (const chapterNumber in seriesData) {
                          if (
                            seriesData[chapterNumber].comments &&
                            seriesData[chapterNumber].comments.length > 0
                          ) {
                            seriesData[chapterNumber].comments.forEach((comment) => {
                              allComments.push({
                                seriesSlug,
                                chapterNumber,
                                ...comment,
                              });
                            });
                          }
                        }
                      }
                  
                      allComments.sort((a, b) => b.timestamp - a.timestamp);
                      console.log(`- Successfully aggregated ${allComments.length} comments.`);
                  
                      return new Response(JSON.stringify(allComments), {
                        status: 200,
                        headers: { "Content-Type": "application/json" },
                      });
                    } catch (error) {
                      console.error("- [GET] Error while fetching comments:", error);
                      return new Response("Erreur interne du serveur", { status: 500 });
                    }
                  }
                  
                  async function handleDeleteComment(request, env) {
                    console.log("- Handling POST (for deletion) request...");
                    try {
                      const { seriesSlug, chapterNumber, commentId } = await request.json();
                      console.log("- Payload received:", {
                        seriesSlug,
                        chapterNumber,
                        commentId,
                      });
                  
                      if (!seriesSlug || !chapterNumber || !commentId) {
                        console.error("- Deletion failed: Payload is missing required fields.");
                        return new Response("Données manquantes", { status: 400 });
                      }
                  
                      const cacheKey = `interactions:${seriesSlug}`;
                      console.log(`- Accessing cache key: ${cacheKey}`);
                      let seriesData = await env.INTERACTIONS_CACHE.get(cacheKey, "json");
                  
                      if (
                        seriesData &&
                        seriesData[chapterNumber] &&
                        seriesData[chapterNumber].comments
                      ) {
                        const initialCount = seriesData[chapterNumber].comments.length;
                        console.log(
                          `- Found chapter ${chapterNumber}. Initial comment count: ${initialCount}`
                        );
                  
                        seriesData[chapterNumber].comments = seriesData[
                          chapterNumber
                        ].comments.filter((c) => c.id !== commentId);
                        const newCount = seriesData[chapterNumber].comments.length;
                        console.log(`- New comment count after filtering: ${newCount}`);
                  
                        if (newCount < initialCount) {
                          await env.INTERACTIONS_CACHE.put(cacheKey, JSON.stringify(seriesData));
                          console.log(
                            "- Comment successfully deleted from KV. Sending success response."
                          );
                          return new Response(
                            JSON.stringify({ success: true, message: "Commentaire supprimé." }),
                            { status: 200 }
                          );
                        } else {
                          console.warn("- Comment ID not found in the specified chapter.");
                          return new Response(
                            JSON.stringify({
                              success: false,
                              message: "Commentaire non trouvé.",
                            }),
                            { status: 404 }
                          );
                        }
                      }
                  
                      console.error(
                        `- Deletion failed: Chapter or series data not found for key ${cacheKey}`
                      );
                      return new Response("Série ou chapitre non trouvé.", { status: 404 });
                    } catch (error) {
                      console.error("- [DELETE] An unexpected error occurred:", error);
                      return new Response("Erreur interne du serveur", { status: 500 });
                    }
                  }
                ---------------------


                Fichier : login.js
                ------------------
                  // functions/api/admin/login.js
                  
                  export async function onRequest(context) {
                    const { request, env } = context;
                  
                    if (request.method !== "POST") {
                      return new Response("Méthode non autorisée", { status: 405 });
                    }
                  
                    try {
                      const { username, password } = await request.json();
                  
                      // Récupérer les secrets depuis l'environnement
                      const ADMIN_USERNAME = env.ADMIN_USERNAME;
                      const ADMIN_PASSWORD = env.ADMIN_PASSWORD;
                  
                      if (!ADMIN_USERNAME || !ADMIN_PASSWORD || !env.ADMIN_TOKEN) {
                        return new Response(
                          JSON.stringify({
                            success: false,
                            message: "Secrets non configurés sur le serveur.",
                          }),
                          { status: 500 }
                        );
                      }
                  
                      if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
                        const token = env.ADMIN_TOKEN;
                        return new Response(JSON.stringify({ success: true, token: token }), {
                          status: 200,
                        });
                      } else {
                        return new Response(
                          JSON.stringify({ success: false, message: "Identifiants incorrects." }),
                          { status: 401 }
                        );
                      }
                    } catch (error) {
                      return new Response(
                        JSON.stringify({ success: false, message: "Erreur interne." }),
                        { status: 500 }
                      );
                    }
                  }
                ------------------


                Fichier : purge-cache.js
                ------------------------
                  // functions/api/admin/purge-cache.js
                  // LIGNE CORRIGÉE
                  function slugify(text) {
                    if (!text) return "";
                    return text
                      .toString()
                      .normalize("NFD") // Sépare les caractères de leurs accents
                      .replace(/[\u0300-\u036f]/g, "") // Supprime les accents (le '3000' est devenu '0300')
                      .toLowerCase()
                      .trim()
                      .replace(/[\s\u3000]+/g, "_") // Remplace les espaces par un underscore
                      .replace(/[^\w-]+/g, "") // Supprime les caractères non autorisés
                      .replace(/--+/g, "_"); // Nettoie les tirets multiples
                  }
                  
                  export async function onRequest(context) {
                    const { request, env } = context;
                    console.log("[API /api/admin/purge-cache] Received cache purge request.");
                  
                    // 1. Sécurité : Vérification de la méthode et du token
                    if (request.method !== "POST") {
                      return new Response("Méthode non autorisée", { status: 405 });
                    }
                    const authToken = request.headers
                      .get("Authorization")
                      ?.replace("Bearer ", "");
                    if (authToken !== env.ADMIN_TOKEN) {
                      console.error("- Auth token check FAILED.");
                      return new Response("Non autorisé", { status: 401 });
                    }
                    console.log("- Auth token check PASSED.");
                  
                    try {
                      const { seriesSlug, chapterNumber } = await request.json();
                      if (!seriesSlug || !chapterNumber) {
                        return new Response(
                          JSON.stringify({
                            success: false,
                            message: "seriesSlug et chapterNumber sont requis.",
                          }),
                          { status: 400 }
                        );
                      }
                      console.log(
                        `- Purge requested for: ${seriesSlug}, Chapter ${chapterNumber}`
                      );
                  
                      // 2. Trouver le fichier JSON de la série correspondante
                      const config = await env.ASSETS.fetch(
                        new URL("/data/config.json", request.url)
                      ).then((res) => res.json());
                      const seriesFiles = config.LOCAL_SERIES_FILES || [];
                  
                      let seriesData = null;
                      for (const filename of seriesFiles) {
                        const data = await env.ASSETS.fetch(
                          new URL(`/data/series/${filename}`, request.url)
                        ).then((res) => res.json());
                        if (slugify(data.title) === seriesSlug) {
                          seriesData = data;
                          break;
                        }
                      }
                  
                      if (!seriesData) {
                        console.error(`- Series not found for slug: ${seriesSlug}`);
                        return new Response(
                          JSON.stringify({ success: false, message: "Série non trouvée." }),
                          { status: 404 }
                        );
                      }
                  
                      // 3. Extraire l'ID ImgChest du chapitre
                      const chapterData = seriesData.chapters[chapterNumber];
                      if (!chapterData || !chapterData.groups?.Big_herooooo) {
                        console.error(
                          `- Chapter ${chapterNumber} not found or has no ImgChest link in series ${seriesSlug}.`
                        );
                        return new Response(
                          JSON.stringify({
                            success: false,
                            message: "Chapitre non trouvé ou sans lien ImgChest.",
                          }),
                          { status: 404 }
                        );
                      }
                  
                      const imgChestUrl = chapterData.groups.Big_herooooo;
                      const imgChestId = imgChestUrl.split("/").pop();
                  
                      if (!imgChestId) {
                        console.error(`- Could not extract ImgChest ID from URL: ${imgChestUrl}`);
                        return new Response(
                          JSON.stringify({
                            success: false,
                            message: "Impossible d'extraire l'ID ImgChest.",
                          }),
                          { status: 500 }
                        );
                      }
                  
                      // 4. Construire la clé KV et la supprimer
                      const cacheKey = `imgchest_chapter_${imgChestId}`;
                      await env.IMG_CHEST_CACHE.delete(cacheKey);
                  
                      console.log(`- SUCCESS: Deleted KV key "${cacheKey}"`);
                      return new Response(
                        JSON.stringify({
                          success: true,
                          message: `Cache pour le chapitre ${chapterNumber} vidé.`,
                        }),
                        { status: 200 }
                      );
                    } catch (error) {
                      console.error(
                        "[API /api/admin/purge-cache] An unexpected error occurred:",
                        error
                      );
                      return new Response("Erreur interne du serveur.", { status: 500 });
                    }
                  }
                ------------------------

    Dossier : img/
        Dossier : banner/
        Dossier : emojis/
        Dossier : profilpicture/
        Dossier : reco/
    Dossier : includes/

        Fichier : header.html
        ---------------------
          <div class="header-container">
            <div class="header-logo-center">
              <a href="/" class="site-title-link desktop-only">BigSolo</a>
            </div>
            <div class="header-left-group">
              <button class="hamburger-menu-btn" aria-label="Ouvrir le menu">
                <i class="fas fa-bars"></i>
              </button>
              <a href="/" class="site-title-link mobile-nav-title-link">BigSolo</a>
              <nav class="desktop-navigation-wrapper">
                <ul id="desktop-nav-main" class="desktop-nav desktop-nav-main">
                </ul>
                <div id="nav-separator" class="nav-separator" style="display: none;">|</div>
                <ul id="desktop-nav-sub" class="desktop-nav desktop-nav-sub">
                </ul>
              </nav>
            </div>
          
            <div class="header-actions">
              <div class="social-icons desktop-social-icons">
                <a href="https://discord.com/invite/wGTmFarxNY" target="_blank" rel="noopener noreferrer"
                  aria-label="Discord">
                  <i class="fab fa-discord"></i>
                </a>
                <a href="https://x.com/BHerooooo" target="_blank" rel="noopener noreferrer" aria-label="X">
                  <i class="fab fa-twitter"></i>
                </a>
              </div>
              <div id="nav-separator" class="nav-separator">|</div>
              <button id="theme-toggle" class="theme-toggle" aria-label="Changer de thème">
                <i class="fas fa-moon"></i>
              </button>
            </div>
          </div>
        ---------------------


        Fichier : mobile-menu.html
        --------------------------
          <div class="mobile-menu-content">
            <button class="close-mobile-menu-btn" aria-label="Fermer le menu">
              <i class="fas fa-times"></i>
            </button>
            
            <h3>Navigation</h3>
            <ul class="mobile-nav-links" id="mobile-nav-main">
            </ul>
          
            <div id="mobile-sub-nav-section">
              <h3 id="mobile-sub-nav-title" style="display: none;"></h3>
              <ul class="mobile-nav-links" id="mobile-nav-sub">
              </ul>
            </div>
          
            <h3>Réseaux</h3>
            <ul class="mobile-social-links-menu" id="mobile-social-links">
              <li>
                <a href="https://discord.com/invite/wGTmFarxNY" target="_blank" rel="noopener noreferrer"
                  aria-label="Discord">
                  <i class="fab fa-discord"></i> Discord
                </a>
              </li>
              <li>
                <a href="https://x.com/BHerooooo" target="_blank" rel="noopener noreferrer" aria-label="X">
                  <i class="fab fa-twitter"></i> Twitter
                </a>
              </li>
            </ul>
          </div>
        --------------------------

    Dossier : js/

        Fichier : index.js
        ------------------
          // --- File: js/index.js ---
          
          import { loadComponent, qs } from "./utils/domUtils.js";
          import {
            initHeader,
            setupMobileMenuInteractions,
          } from "./components/header.js";
          import { initMainScrollObserver } from "./components/observer.js";
          
          async function initCommonComponents() {
            const headerPlaceholder = qs("#main-header");
            const mobileMenuPlaceholder = qs("#main-mobile-menu-overlay");
            const loadPromises = [];
          
            if (headerPlaceholder) {
              loadPromises.push(
                loadComponent(headerPlaceholder, "/includes/header.html")
              );
            } else {
              console.warn("Placeholder #main-header not found. Cannot load header.");
            }
          
            if (mobileMenuPlaceholder) {
              loadPromises.push(
                loadComponent(mobileMenuPlaceholder, "/includes/mobile-menu.html")
              );
            } else {
              console.warn(
                "Placeholder #main-mobile-menu-overlay not found. Cannot load mobile menu."
              );
            }
          
            if (loadPromises.length > 0) {
              try {
                await Promise.all(loadPromises);
                console.log("Common components (header/menu) loaded.");
              } catch (error) {
                console.error("Error loading one or more common components:", error);
              }
            }
          
            if (headerPlaceholder && headerPlaceholder.innerHTML.trim() !== "") {
              try {
                initHeader();
              } catch (e) {
                console.error("Error initializing header:", e);
              }
            }
          
            if (mobileMenuPlaceholder && mobileMenuPlaceholder.innerHTML.trim() !== "") {
              if (typeof setupMobileMenuInteractions === "function") {
                try {
                  setupMobileMenuInteractions();
                } catch (e) {
                  console.error("Error setting up mobile menu interactions:", e);
                }
              } else {
                console.error(
                  "setupMobileMenuInteractions is not available or was not loaded correctly."
                );
              }
            }
          }
          
          function getSeriesData() {
            const dataElement = document.getElementById("series-data-placeholder");
            if (
              dataElement &&
              dataElement.textContent.trim() !== "<!-- SERIES_DATA_PLACEHOLDER -->"
            ) {
              try {
                return JSON.parse(dataElement.textContent);
              } catch (e) {
                console.error("Erreur lors du parsing des données JSON de la série.", e);
                return null;
              }
            }
            return null;
          }
          
          /**
           * Gère la navigation interne pour la SPA (Single Page Application) sur la page de détail.
           * @param {Event} event - L'événement de clic.
           * @param {object} seriesData - Les données de la série.
           */
          function handleInternalNavigation(event, seriesData) {
            // Ignore les clics sur les boutons de like pour ne pas interférer
            if (event.target.closest(".chapter-card-list-likes")) {
              return;
            }
          
            const link = event.target.closest("a");
          
            // Si le lien n'existe pas, on arrête
            if (!link) {
              return;
            }
          
            // ***** CORRECTION ICI *****
            // Si le lien est une carte de chapitre OU un bouton d'action ("Continuer", "Dernier"),
            // on laisse le navigateur faire un rechargement complet.
            if (
              link.classList.contains("chapter-card-list-item") ||
              link.classList.contains("detail-action-btn")
            ) {
              console.log(
                "[Index] Clic sur un lien de lecture, on laisse le navigateur gérer le rechargement."
              );
              return;
            }
          
            // Vérifie si c'est un lien de navigation SPA (les onglets Manga/Episodes)
            const isSpaLink =
              link.href.startsWith(window.location.origin) &&
              !link.hasAttribute("target") &&
              !link.getAttribute("href")?.startsWith("#") &&
              link.href.includes(seriesData.slug);
          
            if (isSpaLink) {
              event.preventDefault();
              if (link.href !== window.location.href) {
                history.pushState({}, "", link.href);
                console.log("[Index] Navigation SPA (onglet) vers :", link.href);
              }
          
              import("./pages/series-detail/router.js").then(({ handleRouteChange }) => {
                handleRouteChange(seriesData);
              });
            }
          }
          
          async function routeAndInitPage() {
            const path = window.location.pathname;
            const bodyId = document.body.id;
            console.log(`[Index] Routing for path: "${path}", bodyId: "${bodyId}"`);
          
            switch (bodyId) {
              case "homepage":
                console.log("[Index] Initializing homepage.");
                const { initHomepage } = await import("./pages/homepage.js");
                await initHomepage();
                initMainScrollObserver();
                break;
          
              case "galeriepage":
                console.log("[Index] Initializing galerie page.");
                const { initGaleriePage } = await import("./pages/galerie.js");
                await initGaleriePage();
                initMainScrollObserver();
                break;
          
              case "presentationpage":
                console.log("[Index] Initializing presentation page.");
                const { initPresentationPage } = await import("./pages/presentation.js");
                initPresentationPage();
                initMainScrollObserver();
                break;
          
              case "seriescoverspage":
                console.log("[Index] Initializing series covers page.");
                const { initSeriesCoversPage } = await import("./pages/series-covers.js");
                await initSeriesCoversPage();
                initMainScrollObserver();
                break;
          
              case "seriesdetailpage":
                console.log("[Index] Initializing series detail page (SPA routing).");
                const seriesData = getSeriesData();
                if (seriesData) {
                  const { handleRouteChange } = await import(
                    "./pages/series-detail/router.js"
                  );
                  handleRouteChange(seriesData);
          
                  document.body.addEventListener("click", (e) =>
                    handleInternalNavigation(e, seriesData)
                  );
                  window.addEventListener("popstate", () =>
                    handleRouteChange(seriesData)
                  );
                } else {
                  const mainContainer = document.getElementById("series-detail-main");
                  if (mainContainer) {
                    mainContainer.innerHTML =
                      "<p class='loading-message'>Erreur: Impossible de charger les informations de la série.</p>";
                  }
                }
                break;
          
              case "readerpage":
                console.log("[Index] Initializing Manga Reader page.");
                const { initMangaReader } = await import(
                  "./pages/series-detail/MangaReader/reader.js"
                );
                await initMangaReader();
                break;
          
              case "dashboardpage":
                console.log("[Index] Initializing Admin Dashboard page.");
                const { initDashboardPage } = await import("./pages/dashboard.js");
                await initDashboardPage();
                break;
          
              default:
                console.log(
                  `[Index] No specific JS logic for bodyId "${bodyId}" or route not recognized.`
                );
                initMainScrollObserver();
                break;
            }
          }
          
          document.addEventListener("DOMContentLoaded", async () => {
            const bodyId = document.body.id;
            console.log("[Index] DOMContentLoaded event fired.");
          
            const isAdminPage =
              bodyId === "dashboardpage" ||
              window.location.pathname.startsWith("/admins");
          
            try {
              if (!isAdminPage) {
                await initCommonComponents();
              }
              await routeAndInitPage();
              console.log("[Index] Page initialization complete.");
            } catch (error) {
              console.error("[Index] Error during page initialization process:", error);
            }
          });
        ------------------


        Fichier : theme-init.js
        -----------------------
          // js/theme-init.js
          
          // La partie IIFE (Immediately Invoked Function Expression) reste la même pour l'anti-flash
          (function () {
            try {
              const savedTheme = localStorage.getItem('mv-theme');
              const prefersDarkSys = window.matchMedia('(prefers-color-scheme: dark)').matches;
              const htmlEl = document.documentElement;
              // Il est possible que document.body soit null ici si le script est dans le <head>
              // et exécuté avant que le <body> ne soit parsé.
              // La synchro se fera plus tard avec syncBodyThemeClass.
          
              const applyDarkTheme = () => {
                htmlEl.classList.add('dark');
                // htmlEl.style.backgroundColor = '#15171a'; // Géré par CSS
                // htmlEl.style.color = '#eceff4'; // Géré par CSS
              };
          
              const applyLightTheme = () => {
                htmlEl.classList.remove('dark');
                // htmlEl.style.backgroundColor = '#f7f8fc'; // Géré par CSS
                // htmlEl.style.color = '#222831'; // Géré par CSS
              };
          
              if (savedTheme === 'dark' || (!savedTheme && prefersDarkSys)) {
                applyDarkTheme();
              } else {
                applyLightTheme();
              }
            } catch (e) {
              console.error("Error applying initial theme:", e);
            }
          })();
          
          function syncBodyThemeClass() {
              if (document.body) { // Vérifier que document.body existe
                  if (document.documentElement.classList.contains('dark')) {
                      if (!document.body.classList.contains('dark')) {
                          document.body.classList.add('dark');
                      }
                  } else {
                      if (document.body.classList.contains('dark')) {
                          document.body.classList.remove('dark');
                      }
                  }
              }
          }
          
          if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', syncBodyThemeClass);
          } else {
              syncBodyThemeClass();
          }
          
          // Attacher les fonctions à l'objet window pour les rendre globales
          window.themeUtils = {
            toggleTheme: function() {
              const htmlEl = document.documentElement;
              const bodyEl = document.body;
              const isDark = htmlEl.classList.toggle('dark');
              
              if (bodyEl) bodyEl.classList.toggle('dark', isDark);
          
              localStorage.setItem("mv-theme", isDark ? "dark" : "light");
          
              // Les styles inline ne sont plus nécessaires ici, car les variables CSS s'en chargent.
              // if (isDark) {
              //   htmlEl.style.backgroundColor = '#15171a';
              //   htmlEl.style.color = '#eceff4';
              // } else {
              //   htmlEl.style.backgroundColor = '#f7f8fc';
              //   htmlEl.style.color = '#222831';
              // }
              return isDark;
            },
          
            getCurrentTheme: function() {
              const savedTheme = localStorage.getItem('mv-theme');
              const prefersDarkSys = window.matchMedia('(prefers-color-scheme: dark)').matches;
              if (savedTheme === 'dark' || (!savedTheme && prefersDarkSys)) {
                return 'dark';
              }
              return 'light';
            }
          };
        -----------------------

        Dossier : components/

            Fichier : carousel.js
            ---------------------
              // js/components/carousel.js
              import { qs } from '../utils/domUtils.js';
              
              /**
               * Initialise un carrousel.
               * @param {string} trackSelector - Sélecteur CSS pour le conteneur des éléments du carrousel.
               * @param {string} prevBtnSelector - Sélecteur CSS pour le bouton "précédent".
               * @param {string} nextBtnSelector - Sélecteur CSS pour le bouton "suivant".
               */
              export function initCarousel(trackSelector, prevBtnSelector, nextBtnSelector) {
                const track = qs(trackSelector);
                const prevBtn = qs(prevBtnSelector);
                const nextBtn = qs(nextBtnSelector);
              
                if (!track) {
                  // console.warn(`Carousel track not found with selector: ${trackSelector}`);
                  return;
                }
              
                const items = track.children;
              
                if (items.length <= 1) { // Ou un seuil pour justifier les boutons
                  if (prevBtn) prevBtn.style.display = 'none';
                  if (nextBtn) nextBtn.style.display = 'none';
                  return;
                }
              
                if (prevBtn) prevBtn.style.display = 'flex';
                if (nextBtn) nextBtn.style.display = 'flex';
              
                const scrollAmount = () => track.clientWidth * 0.8; // Scrolle 80% de la largeur visible
              
                if (nextBtn) {
                  nextBtn.addEventListener("click", () => track.scrollBy({ left: scrollAmount(), behavior: "smooth" }));
                }
                if (prevBtn) {
                  prevBtn.addEventListener("click", () => track.scrollBy({ left: -scrollAmount(), behavior: "smooth" }));
                }
              
                // Drag-to-scroll
                let isDragging = false, startX, scrollLeftVal;
                
                const startDragging = (e) => {
                  isDragging = true;
                  startX = (e.pageX || e.touches[0].pageX) - track.offsetLeft;
                  scrollLeftVal = track.scrollLeft;
                  track.classList.add("active"); // Pour le style du curseur
                  track.style.scrollSnapType = 'none'; // Désactiver le snap pendant le drag
                  track.style.scrollBehavior = 'auto'; // Désactiver le smooth scroll pendant le drag manuel
              
                };
              
                const stopDragging = () => {
                  if (!isDragging) return;
                  isDragging = false;
                  track.classList.remove("active");
                  track.style.scrollSnapType = 'x mandatory'; // Réactiver le snap
                  track.style.scrollBehavior = 'smooth'; // Réactiver le smooth scroll
                  // Optionnel: implémenter un "snap to item" après le drag
                };
              
                const drag = (e) => {
                  if (!isDragging) return;
                  e.preventDefault(); // Empêche le scroll de la page sur mobile
                  const x = (e.pageX || e.touches[0].pageX) - track.offsetLeft;
                  const walk = (x - startX) * 1.5; // Le multiplicateur ajuste la "vitesse" du drag
                  track.scrollLeft = scrollLeftVal - walk;
                };
              
                track.addEventListener('mousedown', startDragging);
                track.addEventListener('touchstart', startDragging, { passive: true }); // passive:true si e.preventDefault() n'est pas utilisé dans le drag pour touchstart
              
                document.addEventListener('mousemove', drag); // Écouter sur document pour un drag plus fluide
                document.addEventListener('touchmove', drag, { passive: false }); // passive:false car on utilise e.preventDefault()
              
                document.addEventListener('mouseup', stopDragging);
                document.addEventListener('touchend', stopDragging);
              }
            ---------------------


            Fichier : header.js
            -------------------
              import { qs, qsa, slugify } from "../utils/domUtils.js";
              
              const mainNavLinksConfig = [
                { text: "Accueil", href: "/", icon: "fas fa-home", id: "home" },
                {
                  text: "Fan-Arts",
                  href: "/galerie",
                  icon: "fa-solid fa-palette",
                  id: "gallery",
                },
                { text: "À propos", href: "/presentation", icon: "fas fa-user", id: "about" },
              ];
              
              const subNavTitlesConfig = {
                homepage: "Sur cette page",
                seriesdetailpage: "Navigation Série",
                seriescoverspage: "Navigation Série",
              };
              
              const subNavLinksConfig = {
                homepage: [
                  { text: "À la une", href: "#hero-section", id: "hero" },
                  { text: "Séries", href: "#on-going-section", id: "series" },
                  { text: "One-Shot", href: "#one-shot-section", id: "oneshots" },
                ],
                galeriepage: [],
                presentationpage: [],
                seriesdetailpage: [],
                seriescoverspage: [],
              };
              
              function updateAllNavigation() {
                populateDesktopNavigation();
                populateMobileNavigation(); // Assure la cohérence si le menu mobile est ouvert pendant la navigation
                updateActiveNavLinks();
              }
              
              function getCurrentPageId() {
                return document.body.id || null;
              }
              
              function getCurrentSeriesSlugFromPath() {
                const path = window.location.pathname;
                const segments = path.split("/").filter(Boolean);
                if (segments.length > 0) {
                  return segments[0];
                }
                return null;
              }
              
              function getCurrentSeriesViewFromPath() {
                const path = window.location.pathname;
                if (path.includes("/episodes")) {
                  return "anime";
                }
                return "manga";
              }
              
              function renderNavLinks(container, links, isMobile = false) {
                if (!container) return;
                container.innerHTML = "";
              
                links.forEach((link) => {
                  const li = document.createElement("li");
                  const a = document.createElement("a");
                  a.href = link.href;
                  if (link.id) {
                    a.id = `navlink-${link.id}${isMobile ? "-mobile" : "-desktop"}`;
                  }
              
                  if (link.icon) {
                    const i = document.createElement("i");
                    i.className = link.icon;
                    a.appendChild(i);
                    a.appendChild(document.createTextNode(" "));
                  }
                  a.appendChild(document.createTextNode(link.text));
                  li.appendChild(a);
                  container.appendChild(li);
                });
              }
              
              function getSubNavLinksForPage(pageId) {
                let baseLinks = [...(subNavLinksConfig[pageId] || [])];
              
                if (pageId === "seriesdetailpage" || pageId === "seriescoverspage") {
                  const seriesSlug = getCurrentSeriesSlugFromPath();
                  if (seriesSlug) {
                    const coversLink = {
                      text: "Galerie des Couvertures",
                      href: `/${seriesSlug}/cover`,
                      id: "series-covers-gallery",
                    };
              
                    if (pageId === "seriescoverspage") {
                      baseLinks = [
                        {
                          text: "Retour à la Série",
                          href: `/${seriesSlug}`,
                          id: "back-to-series",
                        },
                      ];
                    } else if (pageId === "seriesdetailpage") {
                      const currentView = getCurrentSeriesViewFromPath();
              
                      if (currentView === "anime") {
                        baseLinks = [
                          {
                            text: "Informations",
                            href: `#series-detail-section`,
                            id: "series-info",
                          },
                          {
                            text: "Épisodes",
                            href: `#chapters-list-section`,
                            id: "series-episodes",
                          },
                        ];
                      } else {
                        baseLinks = [
                          {
                            text: "Informations",
                            href: `#series-detail-section`,
                            id: "series-info",
                          },
                          {
                            text: "Galerie des Couvertures",
                            href: `/${seriesSlug}/cover`,
                            id: "series-covers-gallery",
                          },
                          {
                            text: "Chapitres",
                            href: `#chapters-list-section`,
                            id: "series-chapters",
                          },
                        ];
                      }
                    }
                  }
                }
                return baseLinks;
              }
              
              function populateDesktopNavigation() {
                const mainNavContainer = qs("#desktop-nav-main");
                const subNavContainer = qs("#desktop-nav-sub");
                const separator = qs("#nav-separator");
                const currentPageId = getCurrentPageId();
              
                renderNavLinks(mainNavContainer, mainNavLinksConfig, false);
              
                const subLinksForCurrentPage = getSubNavLinksForPage(currentPageId);
                renderNavLinks(subNavContainer, subLinksForCurrentPage, false);
              
                if (mainNavContainer && subNavContainer && separator) {
                  if (
                    mainNavContainer.children.length > 0 &&
                    subNavContainer.children.length > 0
                  ) {
                    separator.style.display = "inline-block";
                  } else {
                    separator.style.display = "none";
                  }
                }
              }
              
              function populateMobileNavigation() {
                const mobileMainNavContainer = qs("#mobile-nav-main");
                const mobileSubNavContainer = qs("#mobile-nav-sub");
                const mobileSubNavTitleElement = qs("#mobile-sub-nav-title");
                const mobileSubNavSection = qs("#mobile-sub-nav-section");
              
                const currentPageId = getCurrentPageId();
              
                renderNavLinks(mobileMainNavContainer, mainNavLinksConfig, true);
              
                const subLinksForCurrentPage = getSubNavLinksForPage(currentPageId);
                if (subLinksForCurrentPage.length > 0) {
                  renderNavLinks(mobileSubNavContainer, subLinksForCurrentPage, true);
                  if (mobileSubNavTitleElement) {
                    mobileSubNavTitleElement.textContent =
                      subNavTitlesConfig[currentPageId] || "Navigation rapide";
                    mobileSubNavTitleElement.style.display = "block";
                  }
                  if (mobileSubNavSection) mobileSubNavSection.style.display = "block";
                } else {
                  if (mobileSubNavTitleElement)
                    mobileSubNavTitleElement.style.display = "none";
                  if (mobileSubNavContainer) mobileSubNavContainer.innerHTML = "";
                  if (mobileSubNavSection) mobileSubNavSection.style.display = "none";
                }
              }
              
              function updateThemeToggleIcon() {
                const toggleBtn = qs("#theme-toggle");
                if (toggleBtn) {
                  const icon = toggleBtn.querySelector("i");
                  if (icon && window.themeUtils) {
                    icon.className =
                      window.themeUtils.getCurrentTheme() === "dark"
                        ? "fas fa-sun"
                        : "fas fa-moon";
                  }
                }
              }
              
              function setupThemeToggle() {
                const toggleBtn = qs("#theme-toggle");
                if (toggleBtn && window.themeUtils) {
                  updateThemeToggleIcon();
                  toggleBtn.addEventListener("click", () => {
                    window.themeUtils.toggleTheme();
                    updateThemeToggleIcon();
                  });
                } else if (toggleBtn) {
                  console.warn(
                    "themeUtils non trouvé, le bouton de thème ne sera pas fonctionnel."
                  );
                }
              }
              
              function handleAnchorLinkClick(e, linkElement) {
                const href = linkElement.getAttribute("href");
                if (!href.startsWith("#")) return;
              
                const targetId = href.substring(1);
                const targetElement = document.getElementById(targetId);
              
                if (targetElement) {
                  e.preventDefault();
                  const headerHeight = qs("#main-header")?.offsetHeight || 60;
                  const elementPosition = targetElement.getBoundingClientRect().top;
                  const offsetPosition =
                    elementPosition + window.pageYOffset - headerHeight - 20;
              
                  window.scrollTo({
                    top: offsetPosition,
                    behavior: "smooth",
                  });
              
                  if (history.pushState) {
                    history.pushState(null, null, href);
                  } else {
                    window.location.hash = href;
                  }
                }
              }
              
              function initAnchorLinks() {
                document.addEventListener("click", function (e) {
                  const linkElement = e.target.closest("a");
                  if (linkElement && linkElement.getAttribute("href")?.startsWith("#")) {
                    handleAnchorLinkClick(e, linkElement);
                  }
                });
              
                window.addEventListener("load", () => {
                  if (window.location.hash) {
                    const targetElement = document.getElementById(
                      window.location.hash.substring(1)
                    );
                    if (targetElement) {
                      setTimeout(() => {
                        const headerHeight = qs("#main-header")?.offsetHeight || 60;
                        const elementPosition = targetElement.getBoundingClientRect().top;
                        const offsetPosition =
                          elementPosition + window.pageYOffset - headerHeight - 20;
                        window.scrollTo({ top: offsetPosition, behavior: "auto" });
                      }, 100);
                    }
                  }
                });
              }
              
              function updateActiveNavLinks() {
                // Normalise un chemin : supprime ".html", et transforme "/index.html" en "/"
                const normalizePath = (p) =>
                  p.replace(/\/index\.html$/, "/").replace(/\.html$/, "");
              
                const currentPath = normalizePath(window.location.pathname);
                const navLinks = qsa("#desktop-nav-main a, #mobile-nav-main a");
              
                navLinks.forEach((a) => {
                  const linkHref = a.getAttribute("href");
                  if (linkHref) {
                    const linkPath = normalizePath(linkHref);
                    // La page d'accueil ('/') est active même si on est sur une sous-page qui n'a pas son propre bouton de nav
                    if (linkPath === "/" && currentPath === "/") {
                      a.classList.add("active-nav-link");
                    } else if (linkPath !== "/" && currentPath.startsWith(linkPath)) {
                      a.classList.add("active-nav-link");
                    } else {
                      a.classList.remove("active-nav-link");
                    }
                  }
                });
              }
              
              function setupMobileMenuInteractions() {
                const hamburgerBtn = qs(".hamburger-menu-btn");
                const mobileMenuOverlayContainer = qs("#main-mobile-menu-overlay");
              
                function openMobileMenu() {
                  if (mobileMenuOverlayContainer) {
                    populateMobileNavigation();
                    updateActiveNavLinks();
                    mobileMenuOverlayContainer.classList.add("open");
                    document.body.classList.add("mobile-menu-open");
                  }
                  if (hamburgerBtn) hamburgerBtn.setAttribute("aria-expanded", "true");
                }
              
                function closeMobileMenu() {
                  if (mobileMenuOverlayContainer)
                    mobileMenuOverlayContainer.classList.remove("open");
                  if (hamburgerBtn) hamburgerBtn.setAttribute("aria-expanded", "false");
                  document.body.classList.remove("mobile-menu-open");
                }
              
                if (hamburgerBtn && mobileMenuOverlayContainer) {
                  hamburgerBtn.addEventListener("click", (e) => {
                    e.stopPropagation();
                    if (mobileMenuOverlayContainer.classList.contains("open")) {
                      closeMobileMenu();
                    } else {
                      openMobileMenu();
                    }
                  });
              
                  mobileMenuOverlayContainer.addEventListener("click", (e) => {
                    if (e.target === mobileMenuOverlayContainer) closeMobileMenu();
                  });
              
                  mobileMenuOverlayContainer.addEventListener("click", (e) => {
                    if (e.target.closest(".close-mobile-menu-btn")) {
                      closeMobileMenu();
                    } else if (e.target.closest("a")) {
                      setTimeout(closeMobileMenu, 150);
                    }
                  });
                }
              }
              
              export function initHeader() {
                setupThemeToggle();
                populateDesktopNavigation();
                initAnchorLinks();
                document.body.addEventListener("routeChanged", () => {
                  console.log(
                    "Header a détecté un changement de route. Mise à jour de la navigation..."
                  );
                  updateAllNavigation();
                });
              }
              
              export { setupMobileMenuInteractions };
            -------------------


            Fichier : observer.js
            ---------------------
              // js/components/observer.js
              import { qs, qsa } from '../utils/domUtils.js';
              
              let mainScrollObserverInstance; // Instance unique pour l'animation d'apparition
              let galleryImageObserverInstance; // Instance unique pour le lazy load
              
              /**
               * Initialise ou met à jour l'IntersectionObserver pour l'animation d'apparition générale.
               * Si l'observer n'existe pas, il est créé.
               * Si un sélecteur est fourni, seuls les nouveaux éléments correspondant à ce sélecteur sont ajoutés à l'observation.
               * Si aucun sélecteur n'est fourni, il essaie d'observer les éléments par défaut (ceux définis dans la liste).
               *
               * @param {string|null} [specificSelector=null] - Un sélecteur CSS pour les nouveaux éléments à observer.
               *                                                Si null, observe les éléments par défaut.
               */
              export function initMainScrollObserver(specificSelector = null) {
                const defaultSelectors = ".chapter-card, .series-card, .section-title, .presentation-content, .profile-pic, .gallery-controls, .series-detail-container, .colo-card";
              
                const elementsToObserve = qsa(specificSelector || defaultSelectors);
              
                if (elementsToObserve.length === 0 && !specificSelector) {
                  // console.warn("[Observer] Aucun élément par défaut trouvé à observer initialement.");
                  return;
                }
                if (elementsToObserve.length === 0 && specificSelector) {
                  // console.warn(`[Observer] Aucun élément trouvé pour le sélecteur spécifique: ${specificSelector}`);
                  return;
                }
              
                // Crée l'instance de l'observer si elle n'existe pas
                if (!mainScrollObserverInstance) {
                  // console.log("[Observer] Création de mainScrollObserverInstance.");
                  mainScrollObserverInstance = new IntersectionObserver(
                    (entries, observerInstance) => { // Renommé 'observer' en 'observerInstance' pour éviter conflit
                      entries.forEach((entry) => {
                        if (entry.isIntersecting) {
                          // console.log("[Observer] Element intersecting:", entry.target);
                          entry.target.style.opacity = 1;
                          entry.target.style.transform = "translateY(0px)"; // Ou "none", "initial", "unset"
                          observerInstance.unobserve(entry.target); // Arrêter d'observer une fois animé
                        }
                      });
                    },
                    { threshold: 0.1 }
                  );
                }
              
                // Observer les éléments
                elementsToObserve.forEach((el) => {
                  // S'assurer que les styles initiaux sont appliqués par CSS (opacity: 0, transform: translateY(20px))
                  // On ne réapplique pas les styles ici pour éviter de forcer l'opacité à 0 sur des éléments déjà visibles.
                  // Le CSS doit être la source de vérité pour l'état initial "caché".
                  // console.log("[Observer] Observation de l'élément:", el);
                  mainScrollObserverInstance.observe(el);
                });
              }
              
              /**
               * Initialise l'IntersectionObserver pour le lazy loading des images.
               * @param {string} selector - Le sélecteur pour les images lazy. Default 'img.lazy-load-gallery'
               */
              export function initLazyLoadObserver(selector = 'img.lazy-load-gallery') {
                if (galleryImageObserverInstance) {
                  // console.log("[LazyLoad] Déconnexion de l'ancien galleryImageObserverInstance.");
                  galleryImageObserverInstance.disconnect(); // Nettoyer l'ancien pour éviter les observations multiples du même élément
                }
              
                const lazyImages = qsa(selector);
                if (!lazyImages.length) {
                  // console.warn("[LazyLoad] Aucune image lazy à observer.");
                  return;
                }
                // console.log(`[LazyLoad] Initialisation de l'observer pour ${lazyImages.length} images.`);
              
                const lazyLoadOptions = {
                  rootMargin: '0px 0px 200px 0px',
                  threshold: 0.01
                };
              
                galleryImageObserverInstance = new IntersectionObserver((entries, observerInstance) => {
                  entries.forEach(entry => {
                    if (entry.isIntersecting) {
                      const img = entry.target;
                      const src = img.dataset.src;
                      if (!src) {
                        // console.warn("[LazyLoad] Image sans data-src:", img);
                        observerInstance.unobserve(img); // Arrêter d'observer si pas de source
                        return;
                      }
              
                      // console.log("[LazyLoad] Image intersecting, chargement de:", src);
                      img.onload = () => {
                        img.classList.add('image-loaded-fade-in');
                        // console.log("[LazyLoad] Image chargée:", src);
                      };
                      img.onerror = () => {
                        console.warn(`[LazyLoad] Échec du chargement de l'image: ${src}`);
                        // img.src = 'img/placeholder_error.png'; // Optionnel: image d'erreur
                      };
                      img.src = src;
                      img.removeAttribute('data-src');
                      observerInstance.unobserve(img);
                    }
                  });
                }, lazyLoadOptions);
              
                lazyImages.forEach(img => {
                  galleryImageObserverInstance.observe(img);
                });
              }
            ---------------------


            Fichier : seriesCardTooltip.js
            ------------------------------
              /**
               * Ce fichier n'est plus nécessaire avec le nouveau design vertical interactif.
               * Supprimez toute la logique de tooltip et de gestion des tags overflow pour les cartes de séries.
               */
              
              /**
               * Initialise les tooltips dynamiques pour les cartes de séries
               */
              export function setupSeriesCardTooltips() {
                // Crée l'élément tooltip qui suivra le curseur
                const tooltip = document.createElement('div');
                tooltip.className = 'series-tooltip';
                document.body.appendChild(tooltip);
              
                // Sélectionne toutes les cartes
                const seriesCards = document.querySelectorAll('.series-card');
              
                seriesCards.forEach(card => {
                  // Récupère la description de la série
                  const description = card.querySelector('.series-description')?.textContent || 'Pas de description disponible.';
                  let isOverButton = false;
                  
                  // Événements de survol pour la carte
                  card.addEventListener('mouseenter', () => {
                    if (!isOverButton) {
                      tooltip.textContent = description;
                      tooltip.style.opacity = '1';
                    }
                  });
                  
                  card.addEventListener('mouseleave', () => {
                    tooltip.style.opacity = '0';
                  });
                  
                  // Événement pour suivre le curseur
                  card.addEventListener('mousemove', (e) => {
                    // Ne pas afficher le tooltip si on survole un bouton d'action
                    const targetButton = e.target.closest('.action-button');
                    if (targetButton) {
                      isOverButton = true;
                      tooltip.style.opacity = '0';
                      return;
                    } else {
                      isOverButton = false;
                      tooltip.style.opacity = '1';
                    }
                    
                    // Positionne le tooltip à côté du curseur
                    tooltip.style.left = (e.clientX + 15) + 'px';
                    tooltip.style.top = (e.clientY) + 'px';
                    
                    // Évite que le tooltip sorte de l'écran sur la droite
                    const tooltipRect = tooltip.getBoundingClientRect();
                    if (tooltipRect.right > window.innerWidth) {
                      tooltip.style.left = (e.clientX - tooltipRect.width - 10) + 'px';
                    }
                    
                    // Évite que le tooltip sorte de l'écran en bas
                    if (tooltipRect.bottom > window.innerHeight) {
                      tooltip.style.top = (e.clientY - tooltipRect.height - 10) + 'px';
                    }
                  });
              
                  // Gestion spécifique pour les boutons d'action
                  const actionButtons = card.querySelectorAll('.action-button');
                  actionButtons.forEach(button => {
                    button.addEventListener('mouseenter', () => {
                      isOverButton = true;
                      tooltip.style.opacity = '0';
                    });
                    
                    button.addEventListener('mouseleave', () => {
                      isOverButton = false;
                    });
                  });
                });
              }
              
              /**
               * Gère le dépassement des tags dans les cartes de séries
               * Si les tags dépassent la largeur disponible, ajoute un tag "+N" pour indiquer le nombre de tags cachés
               */
              export function handleTagsOverflow() {
                const seriesCards = document.querySelectorAll('.series-card');
                
                seriesCards.forEach(card => {
                  const tagsContainer = card.querySelector('.series-tags');
                  if (!tagsContainer) return;
                  
                  const tags = Array.from(tagsContainer.querySelectorAll('.tag'));
                  if (tags.length <= 1) return;
                  
                  // Réinitialiser - on affiche tous les tags et on supprime le tag de dépassement s'il existe
                  tags.forEach(tag => tag.style.display = '');
                  const existingOverflow = tagsContainer.querySelector('.tags-overflow');
                  if (existingOverflow) existingOverflow.remove();
                  
                  // On attend que le rendu soit fait pour vérifier les dimensions
                  setTimeout(() => {
                    const containerRect = tagsContainer.getBoundingClientRect();
                    const containerWidth = containerRect.width;
                    
                    let currentWidth = 0;
                    let hiddenTags = 0;
                    
                    // Calculer combien de tags peuvent tenir dans la largeur disponible
                    for (let i = 0; i < tags.length; i++) {
                      const tagRect = tags[i].getBoundingClientRect();
                      currentWidth += tagRect.width + 8; // 8px pour le gap entre les tags
                      
                      if (currentWidth > containerWidth) {
                        tags[i].style.display = 'none';
                        hiddenTags++;
                      }
                    }
                    
                    // Si des tags sont cachés, ajouter un tag "+N"
                    if (hiddenTags > 0) {
                      const overflowTag = document.createElement('span');
                      overflowTag.className = 'tags-overflow';
                      overflowTag.textContent = `+${hiddenTags}`;
                      tagsContainer.appendChild(overflowTag);
                    }
                  }, 0);
                });
              }
              
              // Pour compatibilité avec le code existant
              export const initSeriesCardTooltips = () => {
                setupSeriesCardTooltips();
                handleTagsOverflow();
              };
            ------------------------------

        Dossier : pages/

            Fichier : cache-management.js
            -----------------------------
              // js/pages/cache-management.js
              import { fetchData, fetchAllSeriesData } from "../utils/fetchUtils.js";
              import { slugify, qs } from "../utils/domUtils.js";
              
              function renderChapterList(allSeries) {
                const container = qs("#cache-list-container");
                const statusEl = qs("#status");
                if (!container || !statusEl) return;
              
                statusEl.style.display = "none";
                container.innerHTML = ""; // Vide le conteneur
              
                // Trier les séries par ordre alphabétique
                allSeries.sort((a, b) => a.title.localeCompare(b.title));
              
                allSeries.forEach((series) => {
                  const seriesSlug = slugify(series.title);
                  const chapters = Object.entries(series.chapters)
                    .filter(([, chapData]) => chapData.groups?.Big_herooooo) // Ne montrer que les chapitres hébergés
                    .sort((a, b) => parseFloat(b[0]) - parseFloat(a[0])); // Trier chapitres du plus récent au plus ancien
              
                  if (chapters.length === 0) return;
              
                  const seriesGroupEl = document.createElement("div");
                  seriesGroupEl.className = "series-group";
              
                  let chaptersHtml = "";
                  chapters.forEach(([chapterNumber, chapterData]) => {
                    chaptersHtml += `
                              <li class="chapter-item" data-series-slug="${seriesSlug}" data-chapter-number="${chapterNumber}">
                                  <div class="chapter-info">
                                      Chapitre ${chapterNumber}
                                      <span class="chapter-title">${
                                        chapterData.title || ""
                                      }</span>
                                  </div>
                                  <button class="purge-btn">
                                      <i class="fas fa-sync-alt"></i> Vider le cache
                                  </button>
                              </li>
                          `;
                  });
              
                  seriesGroupEl.innerHTML = `
                          <div class="series-header">${series.title}</div>
                          <ul class="chapters-list">${chaptersHtml}</ul>
                      `;
                  container.appendChild(seriesGroupEl);
                });
              }
              
              async function handlePurgeClick(event) {
                const button = event.target.closest(".purge-btn");
                if (!button) return;
              
                const item = button.closest(".chapter-item");
                const { seriesSlug, chapterNumber } = item.dataset;
                const token = sessionStorage.getItem("admin_token");
              
                if (
                  !confirm(`Vider le cache pour "${seriesSlug}", chapitre ${chapterNumber} ?`)
                )
                  return;
              
                button.disabled = true;
                button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Purge...`;
              
                try {
                  const response = await fetch("/api/admin/purge-cache", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: `Bearer ${token}`,
                    },
                    body: JSON.stringify({ seriesSlug, chapterNumber }),
                  });
                  const result = await response.json();
              
                  if (!response.ok)
                    throw new Error(result.message || `Erreur ${response.status}`);
              
                  button.style.backgroundColor = "#28a745"; // Vert succès
                  button.innerHTML = `<i class="fas fa-check"></i> Cache vidé !`;
                } catch (error) {
                  console.error("Erreur de purge:", error);
                  button.style.backgroundColor = "#dc3545"; // Rouge erreur
                  button.innerHTML = `<i class="fas fa-times"></i> Erreur`;
                  alert(`Erreur: ${error.message}`);
                } finally {
                  setTimeout(() => {
                    button.disabled = false;
                    button.style.backgroundColor = ""; // Rétablit la couleur par défaut
                    button.innerHTML = `<i class="fas fa-sync-alt"></i> Vider le cache`;
                  }, 3000);
                }
              }
              
              export async function initCacheManagementPage() {
                const token = sessionStorage.getItem("admin_token");
                if (!token) {
                  window.location.href = "/admins.html";
                  return;
                }
              
                qs("#logout-btn").addEventListener("click", () => {
                  sessionStorage.removeItem("admin_token");
                  window.location.href = "/admins.html";
                });
              
                try {
                  const allSeries = await fetchAllSeriesData();
                  renderChapterList(allSeries);
                  qs("#cache-list-container").addEventListener("click", handlePurgeClick);
                } catch (error) {
                  qs(
                    "#status"
                  ).textContent = `Erreur lors du chargement des données : ${error.message}`;
                  console.error(error);
                }
              }
            -----------------------------


            Fichier : dashboard.js
            ----------------------
              // js/pages/dashboard.js
              import { fetchAllSeriesData } from "../utils/fetchUtils.js";
              import { slugify, qs, qsa } from "../utils/domUtils.js";
              
              const token = sessionStorage.getItem("admin_token");
              let deletionQueue = [];
              
              // --- FONCTIONS DE RENDU DES VUES ---
              
              function renderModerationView() {
                const contentArea = qs("#admin-content");
                qs("#save-changes-btn").style.display = "none"; // Cacher le bouton par défaut
              
                contentArea.innerHTML = `
                      <p id="status">Chargement des commentaires...</p>
                      <table id="comments-table" style="display: none">
                          <thead>
                              <tr>
                                  <th>Série / Chapitre</th>
                                  <th>Auteur</th>
                                  <th>Commentaire</th>
                                  <th>Date</th>
                                  <th>Action</th>
                              </tr>
                          </thead>
                          <tbody id="comments-tbody"></tbody>
                      </table>
                  `;
                loadAndDisplayComments();
              }
              
              function renderCacheManagementView() {
                const contentArea = qs("#admin-content");
                qs("#save-changes-btn").style.display = "none"; // Pas besoin de ce bouton ici
              
                contentArea.innerHTML = `
                      <p id="status">Chargement de la liste des séries et chapitres...</p>
                      <div id="cache-list-container"></div>
                  `;
                loadAndDisplayCacheList();
              }
              
              // --- LOGIQUE SPÉCIFIQUE À LA VUE MODÉRATION ---
              
              async function loadAndDisplayComments() {
                const statusEl = qs("#status");
                const tableEl = qs("#comments-table");
                const tbodyEl = qs("#comments-tbody");
              
                try {
                  const response = await fetch("/api/admin/comments", {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                  if (!response.ok) throw new Error(`Erreur serveur: ${response.status}`);
                  const comments = await response.json();
              
                  statusEl.style.display = "none";
                  tableEl.style.display = "table";
                  tbodyEl.innerHTML = "";
              
                  if (comments.length === 0) {
                    statusEl.textContent = "Aucun commentaire à modérer.";
                    statusEl.style.display = "block";
                    tableEl.style.display = "none";
                    return;
                  }
              
                  comments.sort((a, b) => b.timestamp - a.timestamp);
              
                  comments.forEach((comment) => {
                    const row = document.createElement("tr");
                    row.dataset.commentId = comment.id;
                    row.dataset.seriesSlug = comment.seriesSlug;
                    row.dataset.chapterNumber = comment.chapterNumber;
              
                    const date = new Date(comment.timestamp).toLocaleString("fr-FR");
              
                    // Cellule Série / Chapitre (construite de manière sécurisée)
                    const cellSeries = document.createElement("td");
                    const strong = document.createElement("strong");
                    strong.innerText = `Ch. ${comment.chapterNumber}`;
                    cellSeries.append(
                      comment.seriesSlug,
                      document.createElement("br"),
                      strong
                    );
              
                    // Cellule Auteur (sécurisée avec .innerText)
                    const cellUsername = document.createElement("td");
                    cellUsername.innerText = comment.username;
              
                    // Cellule Commentaire (sécurisée avec .innerText)
                    const cellComment = document.createElement("td");
                    cellComment.innerText = comment.comment;
                    cellComment.className = "comment-content";
              
                    // Cellule Date (sécurisée avec .innerText)
                    const cellDate = document.createElement("td");
                    cellDate.innerText = date;
              
                    // Cellule Actions (HTML statique donc sûr, créé par élément pour la cohérence)
                    const cellActions = document.createElement("td");
                    const deleteButton = document.createElement("button");
                    deleteButton.className = "action-btn delete-btn";
                    deleteButton.title = "Marquer pour suppression";
                    deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>'; // Sûr car c'est une chaîne statique
                    cellActions.appendChild(deleteButton);
              
                    row.append(cellSeries, cellUsername, cellComment, cellDate, cellActions);
                    tbodyEl.appendChild(row);
                  });
                } catch (error) {
                  statusEl.textContent = `Erreur: ${error.message}`;
                }
              }
              
              // --- LOGIQUE SPÉCIFIQUE À LA VUE GESTION DU CACHE ---
              
              async function loadAndDisplayCacheList() {
                const statusEl = qs("#status");
                const container = qs("#cache-list-container");
                try {
                  const allSeries = await fetchAllSeriesData();
                  statusEl.style.display = "none";
                  container.innerHTML = "";
                  allSeries.sort((a, b) => a.title.localeCompare(b.title));
              
                  allSeries.forEach((series) => {
                    const seriesSlug = slugify(series.title);
                    const chapters = Object.entries(series.chapters)
                      .filter(([, chapData]) => chapData.groups?.Big_herooooo)
                      .sort((a, b) => parseFloat(b[0]) - parseFloat(a[0]));
                    if (chapters.length === 0) return;
                    const seriesGroupEl = document.createElement("div");
                    seriesGroupEl.className = "series-group";
                    seriesGroupEl.innerHTML = `
                              <div class="series-header">${series.title}</div>
                              <ul class="chapters-list">
                                  ${chapters
                                    .map(
                                      ([num, data]) => `
                                      <li class="chapter-item" data-series-slug="${seriesSlug}" data-chapter-number="${num}">
                                          <div class="chapter-info">
                                              Chapitre ${num}
                                              <span class="chapter-title">${
                                                data.title || ""
                                              }</span>
                                          </div>
                                          <button class="purge-btn"><i class="fas fa-sync-alt"></i> Vider le cache</button>
                                      </li>
                                  `
                                    )
                                    .join("")}
                              </ul>
                          `; // .innerHTML sûr ici car series.title et data.title viennent de vos fichiers JSON
                    container.appendChild(seriesGroupEl);
                  });
                } catch (error) {
                  statusEl.textContent = `Erreur: ${error.message}`;
                }
              }
              
              // --- ROUTEUR ET LOGIQUE PRINCIPALE ---
              
              function updateActiveNav(view) {
                qsa(".nav-btn").forEach((btn) => {
                  btn.classList.toggle("active", btn.dataset.view === view);
                });
              }
              
              function router() {
                const view = window.location.hash.substring(1) || "moderation";
                updateActiveNav(view);
              
                switch (view) {
                  case "cache":
                    renderCacheManagementView();
                    break;
                  case "moderation":
                  default:
                    renderModerationView();
                    break;
                }
              }
              
              export function initDashboardPage() {
                if (!token) {
                  window.location.href = "/admins.html";
                  return;
                }
              
                const contentArea = qs("#admin-content");
                const saveBtn = qs("#save-changes-btn");
                const pendingCountSpan = qs("#pending-count");
              
                qs("#logout-btn").addEventListener("click", () => {
                  sessionStorage.removeItem("admin_token");
                  window.location.href = "/admins.html";
                });
              
                qsa(".nav-btn").forEach((btn) => {
                  btn.addEventListener("click", () => {
                    const view = btn.dataset.view;
                    if (view) window.location.hash = view;
                  });
                });
              
                contentArea.addEventListener("click", async (e) => {
                  const purgeBtn = e.target.closest(".purge-btn");
                  if (purgeBtn) {
                    const item = purgeBtn.closest(".chapter-item");
                    const { seriesSlug, chapterNumber } = item.dataset;
                    if (
                      !confirm(
                        `Vider le cache pour "${seriesSlug}", chapitre ${chapterNumber} ?`
                      )
                    )
                      return;
              
                    purgeBtn.disabled = true;
                    purgeBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Purge...`;
              
                    try {
                      const res = await fetch("/api/admin/purge-cache", {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          Authorization: `Bearer ${token}`,
                        },
                        body: JSON.stringify({ seriesSlug, chapterNumber }),
                      });
                      const result = await res.json();
                      if (!res.ok) throw new Error(result.message || `Erreur ${res.status}`);
                      purgeBtn.style.backgroundColor = "#28a745";
                      purgeBtn.innerHTML = `<i class="fas fa-check"></i> Cache vidé !`;
                    } catch (err) {
                      purgeBtn.style.backgroundColor = "#dc3545";
                      purgeBtn.innerHTML = `<i class="fas fa-times"></i> Erreur`;
                      alert(`Erreur: ${err.message}`);
                    } finally {
                      setTimeout(() => {
                        purgeBtn.disabled = false;
                        purgeBtn.style.backgroundColor = "";
                        purgeBtn.innerHTML = `<i class="fas fa-sync-alt"></i> Vider le cache`;
                      }, 3000);
                    }
                  }
              
                  const actionBtn = e.target.closest(".action-btn");
                  if (actionBtn) {
                    const row = actionBtn.closest("tr");
                    const { commentId, seriesSlug, chapterNumber } = row.dataset;
              
                    if (actionBtn.classList.contains("delete-btn")) {
                      deletionQueue.push({ commentId, seriesSlug, chapterNumber });
                      row.classList.add("marked-for-deletion");
                      actionBtn.classList.replace("delete-btn", "undo-btn");
                      actionBtn.title = "Annuler la suppression";
                      actionBtn.innerHTML = `<i class="fas fa-undo"></i>`;
                    } else if (actionBtn.classList.contains("undo-btn")) {
                      deletionQueue = deletionQueue.filter(
                        (item) => item.commentId !== commentId
                      );
                      row.classList.remove("marked-for-deletion");
                      actionBtn.classList.replace("undo-btn", "delete-btn");
                      actionBtn.title = "Marquer pour suppression";
                      actionBtn.innerHTML = `<i class="fas fa-trash-alt"></i>`;
                    }
                    pendingCountSpan.textContent = deletionQueue.length;
                    saveBtn.style.display =
                      deletionQueue.length > 0 ? "inline-block" : "none";
                  }
                });
              
                window.addEventListener("hashchange", router);
                router();
              }
            ----------------------


            Fichier : galerie.js
            --------------------
              // js/pages/galerie.js
              import { fetchData } from '../utils/fetchUtils.js';
              import { parseDateToTimestamp, formatDateForGallery } from '../utils/dateUtils.js';
              import { initLazyLoadObserver, initMainScrollObserver } from '../components/observer.js';
              import { qs, qsa } from '../utils/domUtils.js';
              
              // --- VARIABLES GLOBALES DU MODULE ---
              let allColosData = [];
              let authorsInfoData = {};
              let selectedArtistIds = new Set();
              let currentSortMode = 'date-desc'; // 'date-desc', 'date-asc', 'chapter-desc', 'chapter-asc'
              
              // --- SÉLECTEURS DOM ---
              const galleryGridContainer = qs('#gallery-grid-container');
              const totalCountSpan = qs('#colo-total-count');
              
              // Nouveaux sélecteurs pour le filtre custom
              const customFilter = qs('#custom-artist-filter');
              const filterToggleBtn = qs('.custom-dropdown-toggle', customFilter);
              const filterMenu = qs('.custom-dropdown-menu', customFilter);
              const filterText = qs('#custom-filter-text', customFilter);
              
              // Sélecteurs Lightbox
              const lightboxModal = qs('#lightbox-modal');
              const lightboxImg = qs('#lightbox-img');
              const lightboxCloseBtn = qs('.lightbox-close');
              
              // --- FONCTIONS DE RENDU ---
              
              function renderColoCard(colo, author) {
                const authorName = author?.username || 'Artiste inconnu';
                const previewUrl = `https://file.garden/aDmcfobZthZjQO3m/previews/${colo.id}_preview.webp`;
              
                return `
                  <div class="colo-card" data-colo-id="${colo.id}"> 
                    <img class="lazy-load-gallery" 
                         src="/img/placeholder_preview.png" 
                         alt="Colorisation Chap. ${colo.chapitre || 'N/A'} par ${authorName}" 
                         data-src="${previewUrl}"> 
                    <div class="colo-card-overlay">
                      <p>Chap. ${colo.chapitre || 'N/A'}${colo.page ? `, Page ${colo.page}` : ''}</p>
                      <p>Par ${authorName}</p>
                    </div>
                  </div>`;
              }
              
              function getSocialsHTML(links, typeClassPrefix) {
                if (!links || Object.values(links).every(val => !val)) return '';
                let html = `<div class="${typeClassPrefix}-socials">`;
                if (links.twitter) html += `<a href="${links.twitter}" target="_blank" rel="noopener noreferrer"><i class="fab fa-twitter"></i> Twitter</a>`;
                if (links.instagram) html += `<a href="${links.instagram}" target="_blank" rel="noopener noreferrer"><i class="fab fa-instagram"></i> Instagram</a>`;
                if (links.tiktok) html += `<a href="${links.tiktok}" target="_blank" rel="noopener noreferrer"><i class="fab fa-tiktok"></i> TikTok</a>`;
                if (links.reddit) html += `<a href="${links.reddit}" target="_blank" rel="noopener noreferrer"><i class="fab fa-reddit"></i> Reddit</a>`;
                html += '</div>';
                return html;
              }
              
              // --- LOGIQUE LIGHTBOX ---
              
              function displayLightboxInfo(colo, author) {
                const desktopArtistBlock = qs('.lightbox-info-panel-desktop .lightbox-artist-info-block');
                const desktopColoBlock = qs('.lightbox-info-panel-desktop .lightbox-colo-info-block');
                const mobileArtistInfoContainer = qs('.lightbox-info-panel-mobile .lightbox-artist-info');
                const mobileColoInfoContainer = qs('.lightbox-info-panel-mobile .lightbox-colo-info');
              
                let artistHtmlContent = '<p class="lightbox-info-placeholder">Infos artiste non disponibles.</p>';
                if (author && colo) {
                  const occurrenceCount = allColosData.filter(c => String(c.author_id) === String(colo.author_id)).length;
                  artistHtmlContent = `
                    <div class="artist-header">
                      <img src="${author.profile_img || '/img/profil.png'}" alt="Photo de profil de ${author.username}" class="lightbox-artist-pfp" loading="lazy">
                      <div class="artist-text-details">
                        <h3 class="lightbox-artist-name">${author.username}</h3>
                        <span class="artist-occurrence-count">(${occurrenceCount} colo${occurrenceCount > 1 ? 's' : ''})</span>
                      </div>
                    </div>
                    ${getSocialsHTML(author, 'lightbox-artist')}
                  `;
                }
              
                let coloHtmlContent = '<p class="lightbox-info-placeholder">Infos colorisation non disponibles.</p>';
                if (colo) {
                  coloHtmlContent = `
                    <p><strong>Chapitre :</strong> ${colo.chapitre || 'N/A'}${colo.page ? `, Page ${colo.page}` : ''}</p>
                    <p><strong>Date :</strong> ${formatDateForGallery(colo.date)}</p>
                    <p><strong>ID :</strong> ${colo.id}</p>
                    ${getSocialsHTML(colo, 'lightbox-colo')}
                  `;
                }
              
                if (desktopArtistBlock) desktopArtistBlock.innerHTML = artistHtmlContent;
                if (desktopColoBlock) desktopColoBlock.innerHTML = coloHtmlContent;
                if (mobileArtistInfoContainer) mobileArtistInfoContainer.innerHTML = artistHtmlContent;
                if (mobileColoInfoContainer) mobileColoInfoContainer.innerHTML = coloHtmlContent;
              }
              
              function openLightboxForId(coloId) {
                if (!coloId) return;
                const selectedColo = allColosData.find(c => c.id.toString() === coloId.toString());
              
                if (selectedColo && lightboxModal && lightboxImg) {
                  lightboxImg.src = `https://file.garden/aDmcfobZthZjQO3m/images/${selectedColo.id}.webp`;
                  const author = authorsInfoData[selectedColo.author_id];
                  displayLightboxInfo(selectedColo, author);
                  lightboxModal.style.display = 'flex';
                  document.body.style.overflow = 'hidden';
              
                  history.replaceState({ coloId: coloId }, '', `/galerie/${coloId}`);
                }
              }
              
              function closeLightbox() {
                if (lightboxModal) lightboxModal.style.display = 'none';
                if (lightboxImg) lightboxImg.src = "";
                document.body.style.overflow = 'auto';
              
                if (window.location.pathname !== '/galerie' && window.location.pathname !== '/galerie/') {
                  history.replaceState(null, '', '/galerie');
                }
              }
              
              // --- LOGIQUE FILTRE & AFFICHAGE ---
              
              function updateFilterText() {
                if (!filterText) return;
              
                if (selectedArtistIds.size === 0) {
                  filterText.textContent = "Tous les artistes";
                } else if (selectedArtistIds.size === 1) {
                  const artistId = selectedArtistIds.values().next().value;
                  filterText.textContent = authorsInfoData[artistId]?.username || "1 artiste sélectionné";
                } else {
                  filterText.textContent = `${selectedArtistIds.size} artistes sélectionnés`;
                }
              }
              
              function populateCustomArtistFilter() {
                if (!filterMenu) return;
              
                const artistCounts = allColosData.reduce((acc, colo) => {
                  acc[colo.author_id] = (acc[colo.author_id] || 0) + 1;
                  return acc;
                }, {});
              
                const sortedAuthors = Object.entries(authorsInfoData)
                  .sort(([, a], [, b]) => (a.username || "").localeCompare(b.username || ""));
              
                filterMenu.innerHTML = sortedAuthors.map(([id, author]) => {
                  const count = artistCounts[id] || 0;
                  if (count === 0) return '';
              
                  // CORRECTION: L'input est maintenant un sibling avant le label.
                  // L'id et le for les lient.
                  return `
                    <div class="custom-dropdown-option" role="option">
                      <input type="checkbox" value="${id}" id="artist-filter-${id}">
                      <label for="artist-filter-${id}">
                        <img src="${author.profile_img || '/img/profil.png'}" class="artist-pfp" alt="Profil de ${author.username}" loading="lazy">
                        <span class="artist-name">${author.username}</span>
                        <span class="artist-count">${count}</span>
                      </label>
                    </div>`;
                }).join('');
              
                // L'event listener reste le même et fonctionnera correctement avec la nouvelle structure.
                qsa('input[type="checkbox"]', filterMenu).forEach(checkbox => {
                  checkbox.addEventListener('change', (e) => {
                    const artistId = e.target.value;
                    if (e.target.checked) {
                      selectedArtistIds.add(artistId);
                    } else {
                      selectedArtistIds.delete(artistId);
                    }
                    updateFilterText();
                    displayColos();
                  });
                });
              }
              
              function displayColos() {
                if (!galleryGridContainer || !allColosData.length || !Object.keys(authorsInfoData).length) {
                  if (galleryGridContainer) galleryGridContainer.innerHTML = "<p>Aucune colorisation à afficher.</p>";
                  return;
                }
              
                let colosToDisplay = [...allColosData];
              
                if (selectedArtistIds.size > 0) {
                  colosToDisplay = colosToDisplay.filter(c => selectedArtistIds.has(String(c.author_id)));
                }
              
                // Tri selon le mode sélectionné
                switch (currentSortMode) {
                  case 'date-desc':
                    colosToDisplay.sort((a, b) => parseDateToTimestamp(b.date) - parseDateToTimestamp(a.date));
                    break;
                  case 'date-asc':
                    colosToDisplay.sort((a, b) => parseDateToTimestamp(a.date) - parseDateToTimestamp(b.date));
                    break;
                  case 'chapter-desc':
                    colosToDisplay.sort((a, b) => {
                      const chapA = parseInt(a.chapitre) || 0;
                      const chapB = parseInt(b.chapitre) || 0;
                      return chapB - chapA;
                    });
                    break;
                  case 'chapter-asc':
                    colosToDisplay.sort((a, b) => {
                      const chapA = parseInt(a.chapitre) || 0;
                      const chapB = parseInt(b.chapitre) || 0;
                      return chapA - chapB;
                    });
                    break;
                }
              
                galleryGridContainer.innerHTML = colosToDisplay.map(colo => {
                  const author = authorsInfoData[colo.author_id];
                  return renderColoCard(colo, author);
                }).join('');
              
                qsa('.colo-card', galleryGridContainer).forEach(card => {
                  if (!card.dataset.lightboxListenerAttached) {
                    card.addEventListener('click', () => openLightboxForId(card.dataset.coloId));
                    card.dataset.lightboxListenerAttached = 'true';
                  }
                });
              
                initLazyLoadObserver('img.lazy-load-gallery');
                initMainScrollObserver('#gallery-grid-container .colo-card');
              
                // Initialize Masonry if not already done
                const masonry = new Masonry(galleryGridContainer, {
                  itemSelector: '.colo-card',
                  columnWidth: '.colo-card',
                  percentPosition: true,
                  gutter: 8,
                  // horizontalOrder: true,
                  transitionDuration: 0,
                  initLayout: false,
                });
                
                imagesLoaded(galleryGridContainer)
                  .on('progress', () => {
                    masonry.layout();
                  });
              
                // relayout masonry each .5s for the first 5 seconds
                let relayoutInterval = setInterval(() => {
                  masonry.layout();
                }, 500);
                setTimeout(() => {
                  clearInterval(relayoutInterval);
                }, 5000);
              }
              
              function getSortModeText(mode) {
                switch(mode) {
                  case 'date-desc': return 'Date (récent)';
                  case 'date-asc': return 'Date (ancien)';
                  case 'chapter-desc': return 'Chapitre (décroissant)';
                  case 'chapter-asc': return 'Chapitre (croissant)';
                  default: return 'Date (récent)';
                }
              }
              
              function updateSortMode(newMode) {
                if (['date-desc', 'date-asc', 'chapter-desc', 'chapter-asc'].includes(newMode)) {
                  currentSortMode = newMode;
                  // Update sort text and active state
                  const sortText = qs('#custom-sort-text');
                  if (sortText) {
                    sortText.textContent = getSortModeText(newMode);
                  }
                  // Update active state in dropdown
                  qsa('#custom-sort-filter .custom-dropdown-option').forEach(option => {
                    option.classList.toggle('active', option.dataset.sort === newMode);
                  });
                  displayColos();
                }
              }
              
              // --- FONCTION D'INITIALISATION ---
              
              export async function initGaleriePage() {
                if (!galleryGridContainer) {
                  console.warn("[Galerie] Initialisation annulée: conteneur de la galerie non trouvé.");
                  return;
                }
              
                try {
                  const [colos, authors] = await Promise.all([
                    fetchData('/data/colos/colos.json', { noCache: true }),
                    fetchData('/data/colos/author_info.json', { noCache: true })
                  ]);
              
                  if (!colos || !authors) throw new Error("Données de colos ou d'auteurs manquantes.");
              
                  allColosData = colos;
                  authorsInfoData = authors;
              
                  if (totalCountSpan) {
                    totalCountSpan.textContent = `(${allColosData.length})`;
                  }
              
                  // Set up sort dropdown
                  const sortFilter = qs('#custom-sort-filter');
                  const sortToggleBtn = qs('.custom-dropdown-toggle', sortFilter);
                  const sortMenu = qs('.custom-dropdown-menu', sortFilter);
              
                  if (sortToggleBtn && sortMenu) {
                    // Toggle dropdown
                    sortToggleBtn.addEventListener('click', () => {
                      const isExpanded = sortToggleBtn.getAttribute('aria-expanded') === 'true';
                      sortToggleBtn.setAttribute('aria-expanded', !isExpanded);
                      sortMenu.classList.toggle('show');
                    });
              
                    // Handle option clicks
                    qsa('.custom-dropdown-option', sortMenu).forEach(option => {
                      option.addEventListener('click', () => {
                        updateSortMode(option.dataset.sort);
                        sortToggleBtn.setAttribute('aria-expanded', 'false');
                        sortMenu.classList.remove('show');
                      });
                    });
              
                    // Close dropdown when clicking outside
                    document.addEventListener('click', (e) => {
                      if (!sortFilter.contains(e.target)) {
                        sortToggleBtn.setAttribute('aria-expanded', 'false');
                        sortMenu.classList.remove('show');
                      }
                    });
                  }
              
                  // Initialize sort state
                  updateSortMode(currentSortMode);
              
                  populateCustomArtistFilter();
              
                  if (filterToggleBtn && filterMenu) {
                    filterToggleBtn.addEventListener('click', () => {
                      const isExpanded = filterToggleBtn.getAttribute('aria-expanded') === 'true';
                      filterToggleBtn.setAttribute('aria-expanded', !isExpanded);
                      filterMenu.classList.toggle('show');
                    });
              
                    document.addEventListener('click', (e) => {
                      if (!customFilter.contains(e.target)) {
                        filterToggleBtn.setAttribute('aria-expanded', 'false');
                        filterMenu.classList.remove('show');
                      }
                    });
                  }
              
                  if (lightboxModal && lightboxCloseBtn) {
                    lightboxCloseBtn.addEventListener('click', closeLightbox);
                    lightboxModal.addEventListener('click', (e) => {
                      if (e.target === lightboxModal) closeLightbox();
                    });
                  }
              
                  window.addEventListener('popstate', (event) => {
                    const path = window.location.pathname;
                    const galleryPathMatch = path.match(/^\/galerie\/(\d+)\/?$/);
                    if (galleryPathMatch) {
                      openLightboxForId(galleryPathMatch[1]);
                    } else {
                      closeLightbox();
                    }
                  });
              
                  displayColos();
              
                  const galleryPathMatch = window.location.pathname.match(/^\/galerie\/(\d+)\/?$/);
                  if (galleryPathMatch) {
                    const coloIdFromUrl = galleryPathMatch[1];
                    setTimeout(() => openLightboxForId(coloIdFromUrl), 100);
                  }
              
                } catch (error) {
                  console.error("Erreur d'initialisation de la galerie:", error);
                  if (galleryGridContainer) {
                    galleryGridContainer.innerHTML = `<p>Erreur lors du chargement de la galerie. Détails : ${error.message}</p>`;
                  }
                }
              }
            --------------------


            Fichier : homepage.js
            ---------------------
              // js/pages/homepage.js
              import { fetchData, fetchAllSeriesData } from "../utils/fetchUtils.js";
              import { slugify, qs, qsa, limitVisibleTags } from "../utils/domUtils.js";
              import { parseDateToTimestamp, timeAgo } from "../utils/dateUtils.js";
              import { initSeriesCardTooltips } from "../components/seriesCardTooltip.js";
              
              /**
               * Convertit une couleur HEX en une chaîne de valeurs R, G, B.
               * @param {string} hex - La couleur au format #RRGGBB.
               * @returns {string} Une chaîne comme "255, 100, 50".
               */
              function hexToRgb(hex) {
                let c = hex.substring(1).split("");
                if (c.length === 3) {
                  c = [c[0], c[0], c[1], c[1], c[2], c[2]];
                }
                c = "0x" + c.join("");
                return [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(",");
              }
              
              // CORRECTION : La fonction est maintenant à la racine du module
              function truncateText(text, maxLength) {
                if (typeof text !== "string") return "";
                if (text.length > maxLength) {
                  return text.substring(0, maxLength - 3) + "...";
                }
                return text;
              }
              
              // --- LOGIQUE DU HERO CAROUSEL ---
              
              function renderHeroSlide(series) {
                const seriesData = series.data;
                const jsonFilename = series.filename;
                const heroColor = series.color;
                const heroColorRgb = hexToRgb(heroColor);
              
                const seriesSlug = slugify(seriesData.title);
              
                const chaptersArray = Object.entries(seriesData.chapters)
                  .map(([chapNum, chapData]) => ({ chapter: chapNum, ...chapData }))
                  .filter((chap) => chap.groups && chap.groups.Big_herooooo)
                  .sort(
                    (a, b) =>
                      parseFloat(String(b.chapter).replace(",", ".")) -
                      parseFloat(String(a.chapter).replace(",", "."))
                  );
                const latestChapter = chaptersArray.length > 0 ? chaptersArray[0] : null;
              
                // Boutons
                let latestChapterButtonHtml = "";
                if (latestChapter) {
                  latestChapterButtonHtml = `<a href="/${seriesSlug}/${String(latestChapter.chapter)}" class="hero-cta-button">Dernier chapitre (Ch. ${latestChapter.chapter})</a>`;
                }
                let latestEpisodeButtonHtml = "";
                if (seriesData.episodes && seriesData.episodes.length > 0) {
                  const latestEpisode = [...seriesData.episodes].sort(
                    (a, b) => b.indice_ep - a.indice_ep
                  )[0];
                  if (latestEpisode) {
                    latestEpisodeButtonHtml = `<a href="/${seriesSlug}/episodes/${latestEpisode.indice_ep}" class="hero-cta-button-anime">Dernier épisode (Ep. ${latestEpisode.indice_ep})</a>`;
                  }
                }
              
                // Statut + pastille (desktop)
                let statusText = seriesData.release_status || "En cours";
                let statusDotClass = statusText.toLowerCase().includes("fini") ? "status-dot finished" : "status-dot";
                let statusHtml = `
                  <span class="status">
                    <span class="${statusDotClass}"></span>
                    ${statusText}
                  </span>
                `;
              
                // Bloc info desktop
                let latestInfoHtml = "";
                if (latestChapterButtonHtml || latestEpisodeButtonHtml) {
                  latestInfoHtml = `
                    <div class="hero-latest-info">
                      ${latestChapterButtonHtml}
                      ${latestEpisodeButtonHtml}
                      ${statusHtml}
                    </div>
                  `;
                }
              
                // Bloc info mobile (statut sous tags, boutons en bas)
                let mobileStatusHtml = `
                  <div class="hero-mobile-status">
                    <span class="status">
                      <span class="${statusDotClass}"></span>
                      ${statusText}
                    </span>
                  </div>
                `;
                let mobileActionsHtml = `
                  <div class="hero-mobile-actions">
                    ${latestChapterButtonHtml}
                    ${latestEpisodeButtonHtml}
                  </div>
                `;
              
                const backgroundImageUrl = seriesData.cover || "/img/placeholder_preview.png";
                const characterImageUrl = `/img/reco/${jsonFilename.replace(
                  ".json",
                  ".png"
                )}`;
                const description = seriesData.description
                  ? seriesData.description.replace(/"/g, "&quot;")
                  : "Aucune description.";
              
                const typeTag = seriesData.os
                  ? `<span class="tag" style="background-color: rgba(${heroColorRgb}, 0.25); border-color: rgba(${heroColorRgb}, 0.5); color: ${heroColor};">One-Shot</span>`
                  : `<span class="tag" style="background-color: rgba(${heroColorRgb}, 0.25); border-color: rgba(${heroColorRgb}, 0.5); color: ${heroColor};">Série</span>`;
              
                return `
                  <div class="hero-slide" style="--bg-image: url('${backgroundImageUrl}'); --hero-color: ${heroColor}; --hero-color-rgb: ${heroColorRgb};">
                    <div class="hero-slide-content">
                      <div class="hero-info">
                        <div class="hero-info-top">
                          <p class="recommended-title">Recommandé</p>
                          <a href="/${seriesSlug}" class="hero-title-link">
                            <h2 class="hero-series-title">${seriesData.title}</h2>
                          </a>
                          <div class="hero-tags">
                            ${typeTag}
                            ${(seriesData.tags || [])
                    .slice(0, 4)
                    .map((tag) => `<span class="tag">${tag}</span>`)
                    .join("")}
                          </div>
                          <div class="hero-mobile-status mobile-only">
                            ${mobileStatusHtml}
                          </div>
                          <p class="hero-description">${description}</p>
                        </div>
                        <div class="hero-actions">
                          ${latestInfoHtml}
                        </div>
                        <div class="hero-mobile-actions mobile-only">
                          ${mobileActionsHtml}
                        </div>
                      </div>
                      <div class="hero-image">
                        <img src="${characterImageUrl}" alt="${seriesData.title}" onerror="this.style.display='none'">
                      </div>
                    </div>
                  </div>
                `;
              }
              
              async function initHeroCarousel() {
                const track = qs(".hero-carousel-track");
                const navContainer = qs(".hero-carousel-nav");
                const nextBtn = qs(".hero-carousel-arrow.next");
                const prevBtn = qs(".hero-carousel-arrow.prev");
              
                if (!track || !navContainer || !nextBtn || !prevBtn) return;
              
                try {
                  const recommendedItems = await fetchData("/data/reco.json");
                  if (!recommendedItems || recommendedItems.length === 0)
                    throw new Error("reco.json est vide ou introuvable.");
              
                  const seriesDataPromises = recommendedItems.map(async (item) => {
                    const data = await fetchData(`/data/series/${item.file}`);
                    return { data, filename: item.file, color: item.color };
                  });
                  const recommendedSeries = await Promise.all(seriesDataPromises);
              
                  track.innerHTML = recommendedSeries.map(renderHeroSlide).join("");
                  navContainer.innerHTML = recommendedSeries
                    .map(
                      (_, index) => `<div class="hero-nav-dot" data-index="${index}"></div>`
                    )
                    .join("");
              
                  const slides = qsa(".hero-slide");
                  const dots = qsa(".hero-nav-dot");
                  if (slides.length <= 1) {
                    nextBtn.style.display = "none";
                    prevBtn.style.display = "none";
                    navContainer.style.display = "none";
                    if (slides.length === 1) slides[0].classList.add("active");
                    return;
                  }
              
                  let currentIndex = 0;
                  let autoPlayInterval = null;
              
                  function goToSlide(index) {
                    slides.forEach((slide) => slide.classList.remove("active"));
                    dots.forEach((dot) => dot.classList.remove("active"));
                    slides[index].classList.add("active");
                    dots[index].classList.add("active");
                  }
              
                  function next() {
                    currentIndex = (currentIndex + 1) % slides.length;
                    goToSlide(currentIndex);
                  }
              
                  function prev() {
                    currentIndex = (currentIndex - 1 + slides.length) % slides.length;
                    goToSlide(currentIndex);
                  }
              
                  function startAutoPlay() {
                    if (autoPlayInterval) clearInterval(autoPlayInterval);
                    autoPlayInterval = setInterval(next, 5000);
                  }
              
                  function stopAutoPlay() {
                    clearInterval(autoPlayInterval);
                  }
              
                  nextBtn.addEventListener("click", () => {
                    next();
                    stopAutoPlay();
                    startAutoPlay();
                  });
                  prevBtn.addEventListener("click", () => {
                    prev();
                    stopAutoPlay();
                    startAutoPlay();
                  });
                  navContainer.addEventListener("click", (e) => {
                    const dot = e.target.closest(".hero-nav-dot");
                    if (dot) {
                      currentIndex = parseInt(dot.dataset.index);
                      goToSlide(currentIndex);
                      stopAutoPlay();
                      startAutoPlay();
                    }
                  });
              
                  qs(".hero-carousel").addEventListener("mouseenter", stopAutoPlay);
                  qs(".hero-carousel").addEventListener("mouseleave", startAutoPlay);
              
                  goToSlide(0);
                  startAutoPlay();
                } catch (error) {
                  console.error("Erreur lors de l'initialisation du hero carousel:", error);
                  qs("#hero-section").innerHTML =
                    '<p style="text-align: center; padding: 2rem;">Impossible de charger les recommandations.</p>';
                }
              }
              
              // --- LOGIQUE EXISTANTE POUR LES GRILLES DE SÉRIES ---
              
              function renderSeriesCard(series) {
                if (!series || !series.chapters || !series.title || !series.cover) return "";
              
                const seriesSlug = slugify(series.title);
              
                const chaptersArray = Object.entries(series.chapters)
                  .map(([chapNum, chapData]) => ({
                    chapter: chapNum,
                    ...chapData,
                    last_updated_ts: parseDateToTimestamp(chapData.last_updated || 0),
                    url:
                      chapData.groups && chapData.groups.Big_herooooo !== ""
                        ? `/${seriesSlug}/${String(chapNum)}`
                        : null,
                  }))
                  .filter((chap) => chap.url)
                  .sort((a, b) => b.last_updated_ts - a.last_updated_ts);
              
                // Détermine si la série a un anime
                const hasAnime = series.episodes && series.episodes.length > 0;
              
                // Récupère le dernier chapitre
                const lastChapterUrl = chaptersArray.length > 0 ? chaptersArray[0].url : `/${seriesSlug}`;
                const lastChapterNum = chaptersArray.length > 0 ? chaptersArray[0].chapter : null;
              
                // Récupère le dernier épisode d'anime s'il existe
                let lastEpisodeUrl = null;
                let lastEpisodeNum = null;
                if (hasAnime && series.episodes.length > 0) {
                  const lastEpisode = [...series.episodes].sort(
                    (a, b) => b.indice_ep - a.indice_ep
                  )[0];
                  if (lastEpisode) {
                    lastEpisodeUrl = `/${seriesSlug}/episodes/${lastEpisode.indice_ep}`;
                    lastEpisodeNum = lastEpisode.indice_ep;
                  }
                }
              
                // Génère les tags
                let tagsHtml =
                  Array.isArray(series.tags) && series.tags.length > 0
                    ? `<div class="series-tags">${series.tags
                      .map((t) => `<span class="tag">${t}</span>`)
                      .join("")}</div>`
                    : "";
              
                const imageUrl = series.cover || "img/placeholder_preview.png";
              
                // Description pour le tooltip
                const description = series.description || "Pas de description disponible.";
              
                // Boutons d'action selon le nombre de boutons
                let actionsHtml = "";
                if (lastChapterNum && lastEpisodeNum) {
                  actionsHtml = `<div class="series-actions">
                    <a href="${lastChapterUrl}" class="series-action-btn">Ch. ${lastChapterNum}</a>
                    <a href="${lastEpisodeUrl}" class="series-action-btn">Ep. ${lastEpisodeNum}</a>
                  </div>`;
                } else if (lastChapterNum) {
                  actionsHtml = `<div class="series-actions">
                    <a href="${lastChapterUrl}" class="series-action-btn">Dernier chapitre (Ch. ${lastChapterNum})</a>
                  </div>`;
                } else if (lastEpisodeNum) {
                  actionsHtml = `<div class="series-actions">
                    <a href="${lastEpisodeUrl}" class="series-action-btn">Dernier épisode (Ep. ${lastEpisodeNum})</a>
                  </div>`;
                }
              
                // Nouvelle structure verticale interactive + data-description pour tooltip
                return `
                  <div class="series-card" style="background-image: url('${imageUrl}');" data-url="/${seriesSlug}" data-description="${description.replace(/"/g, '&quot;')}">
                    <div class="series-content">
                      <h3 class="series-title">${series.title}</h3>
                      <div class="series-extra">
                        ${tagsHtml}
                        ${actionsHtml}
                      </div>
                    </div>
                  </div>
                `;
              }
              
              // Modification de la fonction makeSeriesCardsClickable pour le nouveau design
              function makeSeriesCardsClickable() {
                qsa(".series-card").forEach((card) => {
                  // Gestion générale du clic sur la carte (sauf boutons)
                  card.addEventListener("click", (e) => {
                    // Ne pas déclencher si on clique sur un bouton spécifique
                    if (e.target.closest(".series-action-btn")) {
                      return;
                    }
              
                    const url = card.dataset.url;
                    if (url) window.location.href = url;
                  });
                });
              }
              
              // Tooltip description qui suit la souris après un délai
              function setupSeriesCardDescriptionTooltip() {
                let tooltip = document.querySelector('.series-tooltip-description');
                if (!tooltip) {
                  tooltip = document.createElement('div');
                  tooltip.className = 'series-tooltip-description';
                  document.body.appendChild(tooltip);
                }
                let showTimer = null;
                let activeCard = null;
                let lastMouseEvent = null;
              
                function showTooltip(card) {
                  tooltip.textContent = card.dataset.description || "Pas de description disponible.";
                  tooltip.classList.add('visible');
                  if (lastMouseEvent) {
                    positionTooltip(lastMouseEvent);
                  }
                }
              
                function hideTooltip() {
                  tooltip.classList.remove('visible');
                  tooltip.textContent = '';
                  activeCard = null;
                  if (showTimer) {
                    clearTimeout(showTimer);
                    showTimer = null;
                  }
                }
              
                function positionTooltip(e) {
                  const tooltipRect = tooltip.getBoundingClientRect();
                  let left = e.clientX + 24;
                  let top = e.clientY; // <-- Aligné en haut du curseur
                  if (left + tooltipRect.width > window.innerWidth - 8) {
                    left = window.innerWidth - tooltipRect.width - 8;
                  }
                  if (top < 8) top = 8;
                  if (top + tooltipRect.height > window.innerHeight - 8) {
                    top = window.innerHeight - tooltipRect.height - 8;
                  }
                  tooltip.style.left = left + "px";
                  tooltip.style.top = top + "px";
                }
              
                document.addEventListener('mousemove', (e) => {
                  lastMouseEvent = e;
                  if (activeCard && tooltip.classList.contains('visible')) {
                    positionTooltip(e);
                  }
                });
              
                qsa(".series-card").forEach(card => {
                  card.addEventListener('mouseenter', (e) => {
                    lastMouseEvent = e;
                    if (showTimer) clearTimeout(showTimer);
                    showTimer = setTimeout(() => {
                      activeCard = card;
                      showTooltip(card);
                    }, 600);
                  });
                  card.addEventListener('mousemove', (e) => {
                    lastMouseEvent = e;
                    // Désactive la tooltip si sur un bouton d'action
                    if (e.target.closest('.series-action-btn')) {
                      hideTooltip();
                      return;
                    }
                    if (activeCard === card && tooltip.classList.contains('visible')) {
                      positionTooltip(e);
                    }
                  });
                  card.addEventListener('mouseleave', () => {
                    hideTooltip();
                  });
                  card.addEventListener('mousedown', () => {
                    hideTooltip();
                  });
                  // Ajout : désactive la tooltip si on entre sur un bouton d'action
                  card.querySelectorAll('.series-action-btn').forEach(btn => {
                    btn.addEventListener('mouseenter', hideTooltip);
                    btn.addEventListener('mousemove', hideTooltip);
                  });
                });
              }
              
              export async function initHomepage() {
                const seriesGridOngoing = qs(".series-grid.on-going");
                const seriesGridOneShot = qs(".series-grid.one-shot");
              
                await initHeroCarousel();
              
                try {
                  const allSeries = await fetchAllSeriesData();
                  if (!Array.isArray(allSeries) || allSeries.length === 0) {
                    if (seriesGridOngoing)
                      seriesGridOngoing.innerHTML = "<p>Aucune série en cours.</p>";
                    if (seriesGridOneShot)
                      seriesGridOneShot.innerHTML = "<p>Aucun one-shot.</p>";
                    return;
                  }
              
                  if (seriesGridOngoing) {
                    const onGoingSeries = allSeries.filter((s) => s && !s.os);
                    seriesGridOngoing.innerHTML =
                      onGoingSeries.length > 0
                        ? onGoingSeries.map(renderSeriesCard).join("")
                        : "<p>Aucune série en cours.</p>";
                    // Les tags sont tous affichés, pas de limitVisibleTags
                  }
              
                  if (seriesGridOneShot) {
                    const oneShots = allSeries.filter((s) => s && s.os);
                    seriesGridOneShot.innerHTML =
                      oneShots.length > 0
                        ? oneShots.map(renderSeriesCard).join("")
                        : "<p>Aucun one-shot.</p>";
                    // Les tags sont tous affichés, pas de limitVisibleTags
                  }
              
                  makeSeriesCardsClickable();
              
                  setupSeriesCardDescriptionTooltip();
              
                } catch (error) {
                  console.error(
                    "🚨 Erreur lors de l'initialisation des grilles de séries:",
                    error
                  );
                  if (seriesGridOngoing)
                    seriesGridOngoing.innerHTML = "<p>Erreur chargement séries.</p>";
                  if (seriesGridOneShot)
                    seriesGridOneShot.innerHTML = "<p>Erreur chargement one-shots.</p>";
                }
              }
            ---------------------


            Fichier : presentation.js
            -------------------------
              // js/pages/presentation.js
              
              // Fonction pour créer un élément avec des classes et du contenu textuel (optionnel)
              function createElement(tag, classNames = [], textContent = null) {
                const element = document.createElement(tag);
                if (Array.isArray(classNames)) {
                  element.classList.add(...classNames);
                } else if (typeof classNames === 'string' && classNames.length > 0) {
                  element.classList.add(classNames);
                }
                if (textContent) {
                  element.textContent = textContent;
                }
                return element;
              }
              
              // Fonction pour créer un élément icône Font Awesome
              function createIconElement(iconClass) {
                const span = createElement('span', ['qa-icon-lined']);
                const icon = createElement('i');
                icon.className = iconClass; // Pour Font Awesome, on assigne directement className
                span.appendChild(icon);
                return span;
              }
              
              async function loadQAData() {
                try {
                  // Ajuste le chemin vers ton fichier JSON si nécessaire
                  const response = await fetch('../data/presentation-data.json'); // Si presentation-data.json est dans un dossier data/
                  // const response = await fetch('./presentation-data.json'); // Si presentation-data.json est à la racine du projet ou dans public/
                  if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                  }
                  const qaData = await response.json();
                  return qaData;
                } catch (error) {
                  console.error("Could not load Q&A data:", error);
                  return []; // Retourne un tableau vide en cas d'erreur pour éviter de planter la page
                }
              }
              
              function displayQAItems(qaData) {
                const container = document.getElementById('qaContainer');
                if (!container) {
                  console.error('QA container not found!');
                  return;
                }
                container.innerHTML = ''; // Vide le conteneur au cas où
              
                qaData.forEach(item => {
                  const qaItemLined = createElement('article', ['qa-item-lined']);
              
                  // Question Wrapper
                  const questionWrapper = createElement('div', ['qa-question-wrapper']);
                  
                  const iconElement = createIconElement(item.icon);
                  questionWrapper.appendChild(iconElement);
              
                  const questionContent = createElement('div', ['qa-question-content']);
                  const questionH3 = createElement('h3', ['qa-question-lined'], item.question);
                  const authorSpan = createElement('span', ['qa-question-author'], item.author);
                  
                  questionContent.appendChild(questionH3);
                  questionContent.appendChild(authorSpan);
                  questionWrapper.appendChild(questionContent);
              
                  // Answer Wrapper
                  const answerWrapper = createElement('div', ['qa-answer-wrapper']);
                  answerWrapper.innerHTML = item.answer_html; // Injecte le HTML directement
              
                  qaItemLined.appendChild(questionWrapper);
                  qaItemLined.appendChild(answerWrapper);
                  container.appendChild(qaItemLined);
                });
              }
              
              export async function initPresentationPage() {
                console.log("Initializing Presentation Page...");
                const qaData = await loadQAData();
                if (qaData && qaData.length > 0) {
                  displayQAItems(qaData);
                } else {
                  const container = document.getElementById('qaContainer');
                  if (container) {
                      container.innerHTML = '<p>Erreur lors du chargement des questions et réponses. Veuillez réessayer plus tard.</p>';
                  }
                }
              }
              
              // Si ce fichier est chargé directement et n'est pas appelé par index.js
              // document.addEventListener('DOMContentLoaded', initPresentationPage);
              // Sinon, assure-toi que index.js appelle bien initPresentationPage
            -------------------------


            Fichier : series-covers.js
            --------------------------
              import { fetchAllSeriesData } from '../utils/fetchUtils.js';
              import { slugify, qs } from '../utils/domUtils.js';
              
              let currentLightboxIndex = 0;
              let currentCoversData = [];
              
              function updateLightboxNavigation() {
                  const prevBtn = qs('#lightbox-modal .lightbox-prev');
                  const nextBtn = qs('#lightbox-modal .lightbox-next');
                  if (!prevBtn || !nextBtn) return;
              
                  if (currentCoversData.length > 1) {
                      prevBtn.style.display = 'block';
                      nextBtn.style.display = 'block';
                  } else {
                      prevBtn.style.display = 'none';
                      nextBtn.style.display = 'none';
                  }
              }
              
              function openLightbox(index) {
                  const overlay = qs('#lightbox-modal');
                  const imageElement = qs('#lightbox-img');
                  const captionElement = qs('#lightbox-caption-text');
              
                  if (!overlay || !imageElement || !captionElement) return;
                  
                  if (!currentCoversData || !currentCoversData[index]) return;
              
                  currentLightboxIndex = index;
                  const coverDetail = currentCoversData[index];
              
                  imageElement.src = coverDetail.url_hq;
                  imageElement.alt = `Couverture Volume ${coverDetail.volume || index + 1} (agrandie)`;
                  captionElement.textContent = `Volume ${coverDetail.volume || 'Couverture ' + (index + 1)}`;
                  
                  overlay.style.display = 'flex';
                  document.body.style.overflow = 'hidden';
                  updateLightboxNavigation();
              }
              
              function closeLightbox() {
                  const overlay = qs('#lightbox-modal');
                  if (overlay) {
                      overlay.style.display = 'none';
                      document.body.style.overflow = '';
                  }
              }
              
              function showNextImage() {
                  if (currentCoversData.length === 0) return;
                  currentLightboxIndex = (currentLightboxIndex + 1) % currentCoversData.length;
                  openLightbox(currentLightboxIndex);
              }
              
              function showPrevImage() {
                  if (currentCoversData.length === 0) return;
                  currentLightboxIndex = (currentLightboxIndex - 1 + currentCoversData.length) % currentCoversData.length;
                  openLightbox(currentLightboxIndex);
              }
              
              function setupLightboxControls() {
                  const closeBtn = qs('#lightbox-modal .lightbox-close');
                  const actualNextBtn = qs('#lightbox-modal .lightbox-next');
                  const actualPrevBtn = qs('#lightbox-modal .lightbox-prev');
                  const overlay = qs('#lightbox-modal');
              
                  if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
                  if (actualNextBtn) actualNextBtn.addEventListener('click', showNextImage);
                  if (actualPrevBtn) actualPrevBtn.addEventListener('click', showPrevImage);
                  if (overlay) overlay.addEventListener('click', (e) => { if (e.target === overlay) closeLightbox(); });
              
                  document.addEventListener('keydown', (e) => {
                      if (overlay && overlay.style.display !== 'none') {
                          if (e.key === 'Escape') closeLightbox();
                          if (currentCoversData.length > 1) {
                              if (e.key === 'ArrowRight') showNextImage();
                              if (e.key === 'ArrowLeft') showPrevImage();
                          }
                      }
                  });
              }
              
              function renderCoversGallery(seriesData) {
                  const galleryContainer = qs('.covers-grid');
                  const pageTitleElement = qs('.covers-gallery-title');
              
                  if (!galleryContainer || !pageTitleElement) return;
              
                  if (!seriesData || !Array.isArray(seriesData.covers_gallery) || seriesData.covers_gallery.length === 0) {
                      pageTitleElement.textContent = `Couvertures pour ${seriesData ? seriesData.title : 'série inconnue'}`;
                      galleryContainer.innerHTML = '<p class="no-covers">Aucune couverture disponible pour cette série.</p>';
                      currentCoversData = [];
                      return;
                  }
                  
                  currentCoversData = seriesData.covers_gallery.filter(
                      cover => cover && typeof cover.url_hq === 'string' && typeof cover.url_lq === 'string'
                  );
              
                  pageTitleElement.textContent = `Galerie des Couvertures : ${seriesData.title}`;
                  document.title = `BigSolo – Couvertures : ${seriesData.title}`;
              
                  galleryContainer.innerHTML = currentCoversData.map((coverDetail, index) => `
                      <div class="cover-item" data-index="${index}">
                          <img src="${coverDetail.url_lq}" alt="Couverture Volume ${coverDetail.volume || index + 1}" loading="lazy">
                          <div class="volume-caption-overlay">Volume ${coverDetail.volume || '?'}</div>
                      </div>
                  `).join('');
              
                  galleryContainer.querySelectorAll('.cover-item').forEach(item => {
                      item.addEventListener('click', () => {
                          const index = parseInt(item.dataset.index, 10);
                          if (!isNaN(index)) openLightbox(index);
                      });
                  });
              }
              
              export async function initSeriesCoversPage() {
                  const seriesCoversSectionGrid = qs("#covers-gallery-section .covers-grid");
                  if (!seriesCoversSectionGrid) return;
                  seriesCoversSectionGrid.innerHTML = '<p class="loading-message">Chargement des couvertures...</p>';
                  
                  const pathname = window.location.pathname;
                  const pathSegments = pathname.split('/').filter(Boolean);
                  let seriesSlug;
              
                  if (pathSegments.length === 2 && pathSegments[1] === 'cover') {
                      seriesSlug = pathSegments[0];
                  }
              
                  if (!seriesSlug) {
                      seriesCoversSectionGrid.innerHTML = "<p class='loading-message'>Identifiant de série non trouvé dans l'URL.</p>";
                      return;
                  }
              
                  try {
                      const allSeries = await fetchAllSeriesData();
                      const seriesData = allSeries.find(s => slugify(s.title) === seriesSlug);
              
                      if (seriesData) {
                          renderCoversGallery(seriesData);
                          setupLightboxControls();
                      } else {
                          seriesCoversSectionGrid.innerHTML = `<p class="loading-message">Série "${seriesSlug}" non trouvée.</p>`;
                          document.title = `BigSolo – Série non trouvée`;
                      }
                  } catch (error) {
                      console.error("🚨 Erreur lors de l'initialisation de la page des couvertures :", error);
                      seriesCoversSectionGrid.innerHTML = "<p class='loading-message'>Erreur de chargement des données.</p>";
                  }
              }
            --------------------------

            Dossier : series-detail/

                Fichier : AnimeView.js
                ----------------------
                  // --- File: js/pages/series-detail/AnimeView.js ---
                  
                  import { qs } from "../../utils/domUtils.js";
                  import { timeAgo, parseDateToTimestamp } from "../../utils/dateUtils.js";
                  import {
                    queueAction,
                    getLocalInteractionState,
                    setLocalInteractionState,
                  } from "../../utils/interactions.js";
                  import { renderSeriesInfo } from "./shared/infoRenderer.js";
                  import { renderActionButtons } from "./shared/actionButtons.js";
                  import { initListControls } from "./shared/listControls.js";
                  import { fetchStats } from "./shared/statsManager.js";
                  
                  let currentSeriesData = null;
                  let currentSeriesStats = null;
                  let viewContainer = null;
                  
                  /**
                   * Point d'entrée pour le rendu de la vue Anime.
                   * @param {HTMLElement} mainContainer - L'élément <main> de la page.
                   * @param {object} seriesData - Les données de la série.
                   */
                  export async function render(mainContainer, seriesData) {
                    console.log("[AnimeView] Début du rendu.");
                    currentSeriesData = seriesData;
                    viewContainer = mainContainer;
                  
                    const statsPromise = fetchStats(currentSeriesData.slug);
                  
                    renderSeriesInfo(viewContainer, currentSeriesData, {}, "anime");
                    renderActionButtons(viewContainer, currentSeriesData, "anime");
                  
                    currentSeriesStats = await statsPromise;
                  
                    renderSeriesInfo(
                      viewContainer,
                      currentSeriesData,
                      currentSeriesStats,
                      "anime"
                    );
                  
                    initListControls(viewContainer, handleFilterOrSortChange);
                  
                    displayEpisodeList({
                      sort: { type: "number", order: "desc" },
                      search: "",
                    });
                  }
                  
                  function handleFilterOrSortChange(controls) {
                    displayEpisodeList(controls);
                  }
                  
                  function displayEpisodeList({ sort, search }) {
                    const container = qs(".chapters-list-container", viewContainer);
                    if (!container) {
                      console.error("[AnimeView] Conteneur de liste d'épisodes introuvable.");
                      return;
                    }
                  
                    let episodes = currentSeriesData.episodes || [];
                  
                    if (search.trim()) {
                      const searchTerm = search.trim().toLowerCase();
                      episodes = episodes.filter(
                        (ep) =>
                          String(ep.indice_ep).toLowerCase().includes(searchTerm) ||
                          (ep.title_ep && ep.title_ep.toLowerCase().includes(searchTerm))
                      );
                    }
                  
                    episodes.sort((a, b) => {
                      if (sort.type === "date") {
                        const dateA = parseDateToTimestamp(a.date_ep);
                        const dateB = parseDateToTimestamp(b.date_ep);
                        return sort.order === "desc" ? dateB - dateA : dateA - dateB;
                      }
                      return sort.order === "desc"
                        ? b.indice_ep - a.indice_ep
                        : a.indice_ep - b.indice_ep;
                    });
                  
                    if (episodes.length === 0) {
                      container.innerHTML = `<p style="grid-column: 1 / -1; text-align: center; padding: 1rem;">Aucun épisode ne correspond à votre recherche.</p>`;
                    } else {
                      container.innerHTML = episodes.map((ep) => renderEpisodeItem(ep)).join("");
                    }
                  
                    attachEpisodeItemEventListeners(container);
                  }
                  
                  function renderEpisodeItem(episodeData) {
                    const seriesSlug = currentSeriesData.slug;
                    const episodeId = `ep-${episodeData.indice_ep}`;
                    const interactionKey = `interactions_${seriesSlug}_${episodeId}`;
                    const localState = getLocalInteractionState(interactionKey);
                    const isLiked = !!localState.liked;
                  
                    const episodeStats = currentSeriesStats?.[episodeId] || { likes: 0 };
                    let displayLikes = episodeStats.likes || 0;
                    if (isLiked) {
                      displayLikes++;
                    }
                  
                    // Note: La vue Anime n'a pas de compteur de vues ou de commentaires pour l'instant.
                    return `
                      <a href="/${seriesSlug}/episodes/${
                      episodeData.indice_ep
                    }" class="chapter-card-list-item" data-episode-id="${episodeData.indice_ep}">
                        <div class="chapter-card-list-top">
                          <div class="chapter-card-list-left">
                            <span class="chapter-card-list-number">Épisode ${
                              episodeData.indice_ep
                            }</span>
                          </div>
                        </div>
                        <div class="chapter-card-list-bottom">
                          <div class="chapter-card-list-left">
                            <span class="chapter-card-list-title">${
                              episodeData.title_ep || ""
                            }</span>
                          </div>
                          <div class="chapter-card-list-right">
                            <span class="chapter-card-list-likes${
                              isLiked ? " liked" : ""
                            }" data-base-likes="${episodeStats.likes || 0}">
                              <i class="fas fa-heart"></i>
                              <span class="likes-count">${displayLikes}</span>
                            </span>
                          </div>
                        </div>
                      </a>
                    `;
                  }
                  
                  function attachEpisodeItemEventListeners(container) {
                    container
                      .querySelectorAll(".chapter-card-list-likes")
                      .forEach((likeButton) => {
                        likeButton.addEventListener("click", (e) => {
                          e.preventDefault();
                          e.stopPropagation();
                  
                          const card = likeButton.closest(".chapter-card-list-item");
                          const episodeNum = card.dataset.episodeId;
                          const seriesSlug = currentSeriesData.slug;
                  
                          handleLikeToggle(seriesSlug, episodeNum, likeButton);
                        });
                      });
                  }
                  
                  function handleLikeToggle(seriesSlug, episodeNum, likeButton) {
                    const episodeId = `ep-${episodeNum}`; // Clé unique pour les épisodes
                    const interactionKey = `interactions_${seriesSlug}_${episodeId}`;
                    const localState = getLocalInteractionState(interactionKey);
                    const isLiked = !!localState.liked;
                  
                    likeButton.classList.toggle("liked", !isLiked);
                    const countSpan = likeButton.querySelector(".likes-count");
                    const baseLikes = parseInt(likeButton.dataset.baseLikes, 10) || 0;
                    countSpan.textContent = !isLiked ? baseLikes + 1 : baseLikes;
                  
                    localState.liked = !isLiked;
                    setLocalInteractionState(interactionKey, localState);
                  
                    queueAction(seriesSlug, {
                      type: !isLiked ? "like" : "unlike",
                      chapter: episodeId, // On envoie la clé unique
                    });
                  
                    console.log(
                      `[AnimeView] Action de like mise en file: ${
                        !isLiked ? "like" : "unlike"
                      } pour ép. ${episodeNum}`
                    );
                  }
                ----------------------


                Fichier : MangaView.js
                ----------------------
                  // --- File: js/pages/series-detail/MangaView.js ---
                  
                  import { qs } from "../../utils/domUtils.js";
                  import { timeAgo, parseDateToTimestamp } from "../../utils/dateUtils.js";
                  import { initMainScrollObserver } from "../../components/observer.js";
                  import {
                    queueAction,
                    getLocalInteractionState,
                    setLocalInteractionState,
                  } from "../../utils/interactions.js";
                  import { renderSeriesInfo } from "./shared/infoRenderer.js";
                  import { renderActionButtons } from "./shared/actionButtons.js";
                  import { initListControls } from "./shared/listControls.js";
                  import {
                    fetchStats,
                    preloadAllImgChestViewsOnce,
                    updateAllVisibleChapterViews,
                  } from "./shared/statsManager.js";
                  
                  let currentSeriesData = null;
                  let currentSeriesStats = null;
                  let viewContainer = null;
                  let resizeObserver = null; // Pour pouvoir le déconnecter plus tard
                  
                  /**
                   * Point d'entrée pour le rendu de la vue Manga.
                   * @param {HTMLElement} mainContainer - L'élément <main> de la page.
                   * @param {object} seriesData - Les données de la série.
                   */
                  export async function render(mainContainer, seriesData) {
                    console.log("[MangaView] Début du rendu.");
                    currentSeriesData = seriesData;
                    viewContainer = mainContainer;
                  
                    // Déconnecte l'ancien observer s'il existe pour éviter les doublons
                    if (resizeObserver) {
                      resizeObserver.disconnect();
                    }
                  
                    const statsPromise = fetchStats(currentSeriesData.slug);
                    renderSeriesInfo(viewContainer, currentSeriesData, {}, "manga");
                    renderActionButtons(viewContainer, currentSeriesData, "manga");
                  
                    currentSeriesStats = await statsPromise;
                  
                    renderSeriesInfo(
                      viewContainer,
                      currentSeriesData,
                      currentSeriesStats,
                      "manga"
                    );
                    initListControls(viewContainer, handleFilterOrSortChange);
                  
                    displayChapterList({
                      sort: { type: "number", order: "desc" },
                      search: "",
                    });
                  
                    setupResponsiveLayout(viewContainer);
                    preloadAllImgChestViewsOnce();
                  }
                  
                  /**
                   * Gère les changements de filtre ou de tri et met à jour la liste des chapitres.
                   * @param {object} controls - L'état actuel des contrôles { sort, search }.
                   */
                  function handleFilterOrSortChange(controls) {
                    displayChapterList(controls);
                  }
                  
                  /**
                   * Filtre, trie et affiche la liste des chapitres dans le DOM.
                   * @param {object} controls - L'état des contrôles { sort, search }.
                   */
                  function displayChapterList({ sort, search }) {
                    const container = qs(".chapters-list-container", viewContainer);
                    if (!container) {
                      console.error("[MangaView] Conteneur de liste de chapitres introuvable.");
                      return;
                    }
                  
                    let chapters = Object.entries(currentSeriesData.chapters || {}).map(
                      ([id, data]) => ({ id, ...data })
                    );
                  
                    if (search.trim()) {
                      const searchTerm = search.trim().toLowerCase();
                      chapters = chapters.filter(
                        (chap) =>
                          chap.id.toLowerCase().includes(searchTerm) ||
                          (chap.title && chap.title.toLowerCase().includes(searchTerm))
                      );
                    }
                  
                    chapters.sort((a, b) => {
                      if (sort.type === "date") {
                        const dateA = parseDateToTimestamp(a.last_updated);
                        const dateB = parseDateToTimestamp(b.last_updated);
                        return sort.order === "desc" ? dateB - dateA : dateA - dateB;
                      }
                      const numA = parseFloat(a.id);
                      const numB = parseFloat(b.id);
                      return sort.order === "desc" ? numB - numA : numA - numB;
                    });
                  
                    if (chapters.length === 0) {
                      container.innerHTML = `<p style="grid-column: 1 / -1; text-align: center; padding: 1rem;">Aucun chapitre ne correspond à votre recherche.</p>`;
                    } else {
                      container.innerHTML = chapters
                        .map((chap) => renderChapterItem(chap))
                        .join("");
                    }
                  
                    attachChapterItemEventListeners(container);
                    updateAllVisibleChapterViews();
                    initMainScrollObserver(".chapters-list-container .chapter-card-list-item");
                  }
                  
                  /**
                   * Crée le HTML pour un seul item de la liste de chapitres.
                   * @param {object} chapterData - Les données d'un chapitre.
                   * @returns {string} Le HTML de l'élément.
                   */
                  function renderChapterItem(chapterData) {
                    const seriesSlug = currentSeriesData.slug;
                    const interactionKey = `interactions_${seriesSlug}_${chapterData.id}`;
                    const localState = getLocalInteractionState(interactionKey);
                    const isLiked = !!localState.liked;
                  
                    const chapterStats = currentSeriesStats?.[chapterData.id] || {
                      likes: 0,
                      comments: [],
                    };
                    let displayLikes = chapterStats.likes || 0;
                    if (isLiked) {
                      displayLikes++;
                    }
                  
                    const serverCommentCount = Array.isArray(chapterStats.comments)
                      ? chapterStats.comments.length
                      : 0;
                    const displayComments = serverCommentCount;
                  
                    const imgchestId = chapterData.groups?.Big_herooooo?.split("/").pop() || "";
                  
                    const viewsHtml = imgchestId
                      ? `<span class="chapter-card-list-views detail-chapter-views" data-imgchest-id="${imgchestId}">
                           <i class="fas fa-eye"></i> ...
                         </span>`
                      : `<span class="chapter-card-list-views">
                           <i class="fas fa-eye-slash" title="Vues non disponibles"></i>
                         </span>`;
                  
                    return `
                      <a href="/${seriesSlug}/${
                      chapterData.id
                    }" class="chapter-card-list-item" data-chapter-id="${chapterData.id}">
                        <div class="chapter-card-list-top">
                          <div class="chapter-card-list-left">
                            <span class="chapter-card-list-number">Chapitre ${
                              chapterData.id
                            }</span>
                          </div>
                          <div class="chapter-card-list-right">
                            ${viewsHtml}
                          </div>
                        </div>
                        <div class="chapter-card-list-bottom">
                          <div class="chapter-card-list-left">
                            <span class="chapter-card-list-title">${
                              chapterData.title || ""
                            }</span>
                          </div>
                          <div class="chapter-card-list-right">
                            <span class="chapter-card-list-likes${
                              isLiked ? " liked" : ""
                            }" data-base-likes="${chapterStats.likes || 0}">
                              <i class="fas fa-heart"></i>
                              <span class="likes-count">${displayLikes}</span>
                            </span>
                            <span class="chapter-card-list-comments">
                              <i class="fas fa-comment"></i> ${displayComments}
                            </span>
                          </div>
                        </div>
                      </a>
                    `;
                  }
                  
                  /**
                   * Attache les écouteurs d'événements pour les items de la liste de chapitres.
                   * @param {HTMLElement} container - Le conteneur de la liste.
                   */
                  function attachChapterItemEventListeners(container) {
                    container
                      .querySelectorAll(".chapter-card-list-likes")
                      .forEach((likeButton) => {
                        likeButton.addEventListener("click", (e) => {
                          e.preventDefault();
                          e.stopPropagation();
                  
                          const card = likeButton.closest(".chapter-card-list-item");
                          const chapterId = card.dataset.chapterId;
                          const seriesSlug = currentSeriesData.slug;
                  
                          handleLikeToggle(seriesSlug, chapterId, likeButton);
                        });
                      });
                  }
                  
                  /**
                   * Gère la logique de like/unlike pour un chapitre.
                   * @param {string} seriesSlug
                   * @param {string} chapterId
                   * @param {HTMLElement} likeButton
                   */
                  function handleLikeToggle(seriesSlug, chapterId, likeButton) {
                    const interactionKey = `interactions_${seriesSlug}_${chapterId}`;
                    const localState = getLocalInteractionState(interactionKey);
                    const isLiked = !!localState.liked;
                  
                    likeButton.classList.toggle("liked", !isLiked);
                    const countSpan = likeButton.querySelector(".likes-count");
                    const baseLikes = parseInt(likeButton.dataset.baseLikes, 10) || 0;
                    countSpan.textContent = !isLiked ? baseLikes + 1 : baseLikes;
                  
                    localState.liked = !isLiked;
                    setLocalInteractionState(interactionKey, localState);
                  
                    queueAction(seriesSlug, {
                      type: !isLiked ? "like" : "unlike",
                      chapter: chapterId,
                    });
                  
                    console.log(
                      `[MangaView] Action de like mise en file: ${
                        !isLiked ? "like" : "unlike"
                      } pour chap. ${chapterId}`
                    );
                  }
                  
                  /**
                   * Configure la logique de déplacement des éléments pour le responsive.
                   * @param {HTMLElement} container - Le conteneur principal de la vue.
                   */
                  function setupResponsiveLayout(container) {
                    // 1. Identifier tous les éléments à déplacer et leurs parents/cibles
                    const elementsToMove = {
                      metadata: {
                        element: qs(".series-metadata-container", container),
                        desktopParent: qs(".hero-info-top", container),
                        mobileTarget: qs("#mobile-tags-target", container), // Les tags et le statut iront ici
                      },
                      actions: {
                        element: qs("#reading-actions-container", container),
                        desktopParent: qs(".hero-info-bottom", container),
                        mobileTarget: qs("#mobile-actions-target", container),
                      },
                      description: {
                        element: qs("#description-wrapper", container),
                        desktopParent: qs("#series-info-section", container),
                        mobileTarget: qs("#mobile-description-target", container), // Cible pour la description
                      },
                    };
                  
                    // Ajout d'une div "cible" pour la description si elle n'existe pas
                    if (!elementsToMove.description.mobileTarget) {
                      const descTarget = document.createElement("div");
                      descTarget.id = "mobile-description-target";
                      // Insérer après les autres cibles mobiles
                      qs(".mobile-only-targets", container).appendChild(descTarget);
                      elementsToMove.description.mobileTarget = descTarget;
                    }
                  
                    const updatePositions = () => {
                      const isMobile = window.innerWidth <= 768;
                  
                      for (const key in elementsToMove) {
                        const { element, desktopParent, mobileTarget } = elementsToMove[key];
                        if (!element || !desktopParent || !mobileTarget) {
                          console.warn(
                            `[Responsive] Element manquant pour la clé "${key}". Opération annulée.`
                          );
                          continue;
                        }
                  
                        if (isMobile) {
                          // Si on est en mobile et que l'élément n'est pas déjà dans la cible mobile
                          if (element.parentElement !== mobileTarget) {
                            mobileTarget.appendChild(element);
                          }
                        } else {
                          // Si on est en desktop et que l'élément n'est pas dans son parent desktop
                          if (element.parentElement !== desktopParent) {
                            // Pour la description, on la replace à la fin de la section info
                            if (key === "description") {
                              desktopParent.appendChild(element);
                            } else {
                              // Pour les autres, on les remet dans leur conteneur respectif
                              desktopParent.appendChild(element);
                            }
                          }
                        }
                      }
                    };
                  
                    // Créer un seul observer pour la page
                    resizeObserver = new ResizeObserver(updatePositions);
                    resizeObserver.observe(document.body);
                  
                    // Exécuter une fois au chargement
                    updatePositions();
                  }
                ----------------------


                Fichier : router.js
                -------------------
                  // --- File: js/pages/series-detail/router.js ---
                  
                  import { slugify } from "../../utils/domUtils.js";
                  
                  /**
                   * Gère le routage et l'affichage de la fiche série en fonction de l'URL.
                   * C'est le point d'entrée principal pour la page series-detail.
                   * @param {object} seriesData - Les données complètes de la série.
                   */
                  export async function handleRouteChange(seriesData) {
                    const main = document.getElementById("series-detail-main");
                    if (!main) {
                      console.error(
                        "[Router] Élément <main> #series-detail-main introuvable. Arrêt."
                      );
                      return;
                    }
                  
                    // Ajoute le slug aux données de la série pour un accès facile
                    if (!seriesData.slug) {
                      seriesData.slug = slugify(seriesData.title);
                    }
                  
                    // Affiche un état de chargement
                    main.innerHTML = '<p class="loading-message">Chargement de la vue...</p>';
                  
                    const path = window.location.pathname;
                    console.log(`[Router] Gestion de la route : ${path}`);
                  
                    // Détermine la vue à charger en fonction de l'URL
                    const isAnimeView = path.includes("/episodes");
                  
                    try {
                      // 1. Charger le template HTML de base (commun aux deux vues)
                      const response = await fetch("/templates/MangaList.html"); // On réutilise ce template car il est très similaire
                      if (!response.ok)
                        throw new Error(
                          "Impossible de charger le template de la page de détail."
                        );
                      const templateHtml = await response.text();
                      main.innerHTML = templateHtml;
                  
                      // 2. Appeler le module de rendu approprié
                      if (isAnimeView) {
                        console.log(
                          "[Router] Détection de la vue Anime. Chargement de AnimeView.js..."
                        );
                        const { render: renderAnimeView } = await import("./AnimeView.js");
                        await renderAnimeView(main, seriesData);
                      } else {
                        console.log(
                          "[Router] Détection de la vue Manga. Chargement de MangaView.js..."
                        );
                        const { render: renderMangaView } = await import("./MangaView.js");
                        await renderMangaView(main, seriesData);
                      }
                  
                      // 3. Gérer l'affichage des onglets Manga/Épisodes
                      const chaptersTab = main.querySelector(
                        '.chapter-tab-btn[data-tab="chapters"]'
                      );
                      const episodesTab = main.querySelector(
                        '.chapter-tab-btn[data-tab="episodes"]'
                      );
                  
                      if (chaptersTab && episodesTab) {
                        const hasAnime = seriesData.episodes && seriesData.episodes.length > 0;
                  
                        // N'afficher l'onglet Épisodes que si l'anime existe
                        episodesTab.style.display = hasAnime ? "flex" : "none";
                  
                        // Activer le bon onglet
                        chaptersTab.classList.toggle("active", !isAnimeView);
                        episodesTab.classList.toggle("active", isAnimeView);
                  
                        // Ajouter les liens de navigation
                        chaptersTab.href = `/${seriesData.slug}`;
                        episodesTab.href = `/${seriesData.slug}/episodes`;
                  
                        // Changer le libellé du tri si on est sur la vue anime
                        const sortBtn = main.querySelector(".sort-chapter-btn");
                        if (sortBtn && isAnimeView) {
                          sortBtn.parentElement.previousElementSibling.querySelector(
                            "input"
                          ).placeholder = "Rechercher un épisode...";
                        }
                      }
                  
                      // 4. Envoyer un événement pour que le header mette à jour sa navigation contextuelle
                      document.body.dispatchEvent(
                        new CustomEvent("routeChanged", { detail: { path } })
                      );
                    } catch (error) {
                      console.error("[Router] Erreur critique lors du rendu de la vue :", error);
                      main.innerHTML = `<p class="loading-message">Erreur lors du chargement de la page : ${error.message}</p>`;
                    }
                  }
                -------------------

                Dossier : AnimePlayer/

                    Fichier : events.js
                    -------------------
                      import { handleRouteChange } from "../router.js";
                      
                      function handlePlaylistClick(event, seriesData) {
                        const target = event.target.closest(".playlist-episode");
                        if (!target) return;
                        event.preventDefault();
                        const url = target.href;
                        history.pushState({}, "", url);
                        // On extrait l'épisode depuis l'URL
                        const episodeNumber = target.dataset.episodeId;
                        handleRouteChange(seriesData, episodeNumber);
                      }
                      
                      export function initEventListeners(viewElement, seriesData) {
                        const playlist = viewElement.querySelector("#playlist-container");
                        if (playlist) {
                          playlist.addEventListener("click", (e) => handlePlaylistClick(e, seriesData));
                        }
                      }
                    -------------------


                    Fichier : index.js
                    ------------------
                      import { renderPlayerUI } from "./ui.js";
                      import { initEventListeners } from "./events.js";
                      
                      export async function render(seriesData, episodeNumber) {
                        const response = await fetch("/templates/AnimePlayer.html");
                        const html = await response.text();
                        const view = document.createElement("div");
                        view.innerHTML = html;
                      
                        renderPlayerUI(view, seriesData, episodeNumber);
                        initEventListeners(view, seriesData);
                      
                        return view;
                      }
                    ------------------


                    Fichier : player.js
                    -------------------
                      // (Optionnel, à compléter selon tes besoins pour la gestion avancée du lecteur vidéo)
                      export function initPlayer(iframeElement) {
                        // Initialisation custom du lecteur si besoin
                      }
                    -------------------


                    Fichier : ui.js
                    ---------------
                      export function renderPlayerUI(view, seriesData, episodeNumber) {
                        const playerWrapper = view.querySelector("#video-player-wrapper");
                        const playlistContainer = view.querySelector("#playlist-container");
                        const titleElem = view.querySelector("#player-episode-title");
                      
                        const episodes = seriesData.episodes || [];
                        const currentEpisode = episodes.find((ep) => String(ep.indice_ep) === String(episodeNumber));
                        if (!currentEpisode) {
                          playerWrapper.innerHTML = "<p>Épisode non trouvé.</p>";
                          return;
                        }
                      
                        // Détermine l'URL d'intégration vidéo
                        let embedUrl = "";
                        if (currentEpisode.type === "vidmoly" && currentEpisode.id) {
                          embedUrl = `https://vidmoly.net/embed-${currentEpisode.id}.html`;
                        } else if (currentEpisode.type === "gdrive" && currentEpisode.id) {
                          embedUrl = `https://drive.google.com/file/d/${currentEpisode.id}/preview`;
                        }
                      
                        playerWrapper.innerHTML = embedUrl
                          ? `<iframe src="${embedUrl}" frameborder="0" allowfullscreen allow="autoplay; fullscreen; picture-in-picture"></iframe>`
                          : "<p>Format vidéo non supporté.</p>";
                      
                        if (titleElem) {
                          titleElem.textContent = `Épisode ${currentEpisode.indice_ep} : ${currentEpisode.title_ep || ""}`;
                        }
                      
                        // Playlist
                        if (playlistContainer) {
                          playlistContainer.innerHTML = episodes
                            .map(
                              (ep) => `<a href="/${seriesData.slug}/episodes/${ep.indice_ep}" class="playlist-episode${ep.indice_ep == episodeNumber ? " active" : ""}" data-episode-id="${ep.indice_ep}">
                                Ép. ${ep.indice_ep} ${ep.title_ep ? `: ${ep.title_ep}` : ""}
                              </a>`
                            )
                            .join("");
                        }
                      }
                    ---------------

                Dossier : MangaReader/

                    Fichier : data.js
                    -----------------
                      // --- File: js/pages/series-detail/MangaReader/data.js ---
                      
                      import { qs } from "../../../utils/domUtils.js";
                      import { loadGlobalConfig } from "../../../utils/fetchUtils.js";
                      import { state, domImages, setDomImages } from "./state.js";
                      import { goToSpread } from "./navigation.js";
                      
                      /**
                       * Calcule la disposition des planches (spreads) en fonction du mode de lecture.
                       */
                      export function calculateSpreads() {
                        state.spreads = [];
                        state.pageToSpreadMap = [];
                      
                        const images = domImages;
                      
                        if (state.settings.mode === "webtoon" || state.settings.mode === "single") {
                          state.pages.forEach((_, index) => {
                            state.spreads.push([index]);
                            state.pageToSpreadMap[index] = index;
                          });
                          return;
                        }
                      
                        if (state.settings.mode === "double") {
                          let i = 0;
                          if (state.settings.doublePageOffset && images[0]) {
                            state.spreads.push([0]);
                            state.pageToSpreadMap[0] = 0;
                            i = 1;
                          }
                          while (i < images.length) {
                            const currentImage = images[i];
                            const isLandscape =
                              currentImage.naturalWidth > 0 &&
                              currentImage.naturalWidth > currentImage.naturalHeight;
                      
                            if (isLandscape) {
                              state.spreads.push([i]);
                              state.pageToSpreadMap[i] = state.spreads.length - 1;
                              i++;
                            } else {
                              const nextImage = images[i + 1];
                              if (
                                nextImage &&
                                nextImage.naturalWidth > 0 &&
                                nextImage.naturalWidth <= nextImage.naturalHeight
                              ) {
                                state.spreads.push([i, i + 1]);
                                state.pageToSpreadMap[i] = state.pageToSpreadMap[i + 1] =
                                  state.spreads.length - 1;
                                i += 2;
                              } else {
                                state.spreads.push([i]);
                                state.pageToSpreadMap[i] = state.spreads.length - 1;
                                i++;
                              }
                            }
                          }
                        }
                      }
                      
                      /**
                       * Récupère la liste des pages du chapitre et attend leur chargement complet.
                       */
                      export async function fetchAndLoadPages(initialPageNumber = 1) {
                        const loadingMsgContainer = qs("#manga-reader-root .reader-viewer-container");
                        if (loadingMsgContainer) {
                          loadingMsgContainer.innerHTML = `<p id="reader-loading-msg">Chargement des informations...</p>`;
                        }
                        const loadingMsgElement = qs("#reader-loading-msg");
                      
                        try {
                          const CONFIG = await loadGlobalConfig();
                          const chapterId = state.currentChapter.groups.Big_herooooo.split("/").pop();
                          const apiUrl = `${CONFIG.URL_API_IMGCHEST}?id=${chapterId}`;
                          const pagesData = await fetch(apiUrl).then((res) => res.json());
                      
                          if (
                            pagesData.error ||
                            !Array.isArray(pagesData) ||
                            pagesData.length === 0
                          ) {
                            throw new Error(pagesData.error || "Aucune page retournée par l'API.");
                          }
                          state.pages = pagesData.map((p) => p.link);
                      
                          const newDomImages = state.pages.map((src) => {
                            const img = new Image();
                            img.draggable = false;
                            return img;
                          });
                          setDomImages(newDomImages);
                      
                          if (newDomImages.length === 0) {
                            throw new Error("Ce chapitre ne contient aucune page.");
                          }
                      
                          let loadedCount = 0;
                          if (loadingMsgElement)
                            loadingMsgElement.textContent = `Chargement des pages... (0 / ${newDomImages.length})`;
                      
                          const onAllImagesProcessed = () => {
                            calculateSpreads();
                            let finalInitialIndex = 0;
                            if (initialPageNumber === "last") {
                              finalInitialIndex = state.spreads.length - 1;
                            } else if (
                              typeof initialPageNumber === "number" &&
                              initialPageNumber > 0
                            ) {
                              const pageIndex = initialPageNumber - 1;
                              const targetSpreadIndex = state.pageToSpreadMap[pageIndex];
                              if (targetSpreadIndex !== undefined)
                                finalInitialIndex = targetSpreadIndex;
                            }
                            state.currentSpreadIndex = finalInitialIndex;
                            goToSpread(state.currentSpreadIndex, true);
                          };
                      
                          newDomImages.forEach((img, index) => {
                            const handleLoadOrError = () => {
                              loadedCount++;
                              if (loadingMsgElement)
                                loadingMsgElement.textContent = `Chargement des pages... (${loadedCount} / ${newDomImages.length})`;
                              if (loadedCount === newDomImages.length) {
                                onAllImagesProcessed();
                              }
                            };
                            img.onload = handleLoadOrError;
                            img.onerror = () => {
                              console.error(
                                `Erreur de chargement pour l'image: ${state.pages[index]}`
                              );
                              img.alt = "Erreur de chargement";
                              handleLoadOrError();
                            };
                            img.src = state.pages[index];
                          });
                        } catch (error) {
                          throw error; // Propage l'erreur pour qu'elle soit attrapée par reader.js
                        }
                      }
                    -----------------


                    Fichier : navigation.js
                    -----------------------
                      // --- File: js/pages/series-detail/MangaReader/navigation.js ---
                      
                      import { slugify } from "../../../utils/domUtils.js";
                      // ***** CORRECTION ICI *****
                      import { state, dom, domImages } from "./state.js";
                      import { render as renderViewer } from "./components/viewer.js";
                      
                      let urlUpdateTimeout = null;
                      
                      export function getInitialPageNumberFromUrl() {
                        if (window.location.hash === "#last") return "last";
                        const pathSegments = window.location.pathname.split("/").filter(Boolean);
                        if (pathSegments.length === 3) {
                          const pageNumber = parseInt(pathSegments[2], 10);
                          if (!isNaN(pageNumber) && pageNumber > 0) return pageNumber;
                        }
                        return 1;
                      }
                      
                      export function updateUrlForCurrentPage() {
                        clearTimeout(urlUpdateTimeout);
                        urlUpdateTimeout = setTimeout(() => {
                          const seriesSlug = slugify(state.seriesData.title);
                          const chapterNumber = state.currentChapter.number;
                          const currentSpread = state.spreads[state.currentSpreadIndex];
                          if (!currentSpread || currentSpread.length === 0) return;
                      
                          const firstPageIndexInSpread = currentSpread[0];
                          const pageNumberForUrl = firstPageIndexInSpread + 1;
                          const newPath = `/${seriesSlug}/${chapterNumber}/${pageNumberForUrl}`;
                      
                          if (window.location.pathname !== newPath) {
                            history.replaceState({ page: pageNumberForUrl }, "", newPath);
                          }
                        }, 150);
                      }
                      
                      export function goToSpread(spreadIndex, isInitializing = false) {
                        state.currentSpreadIndex = Math.max(
                          0,
                          Math.min(spreadIndex, state.spreads.length - 1)
                        );
                      
                        if (state.settings.mode === "webtoon") {
                          const pageIndex = state.spreads[state.currentSpreadIndex]?.[0];
                          if (pageIndex !== undefined && domImages[pageIndex]) {
                            const behavior = isInitializing ? "auto" : "smooth";
                            domImages[pageIndex].scrollIntoView({ behavior, block: "start" });
                          }
                        }
                      
                        renderViewer();
                        updateUIOnPageChange();
                      
                        if (!isInitializing && state.settings.mode !== "webtoon") {
                          dom.viewerContainer.scrollTop = 0;
                        }
                        updateUrlForCurrentPage();
                      }
                      
                      export function changeSpread(delta) {
                        const isLastSpread = state.currentSpreadIndex >= state.spreads.length - 1;
                        if (delta > 0 && isLastSpread) {
                          navigateToChapter(1);
                        } else if (delta < 0 && state.currentSpreadIndex === 0) {
                          navigateToChapter(-1, true);
                        } else {
                          goToSpread(state.currentSpreadIndex + delta);
                        }
                      }
                      
                      export function navigateToChapter(delta, goToLastPage = false) {
                        const currentChapterIndex = state.allChapterKeys.indexOf(
                          state.currentChapter.number
                        );
                        const nextChapterIndex = currentChapterIndex + delta;
                        if (nextChapterIndex >= 0 && nextChapterIndex < state.allChapterKeys.length) {
                          const nextChapterKey = state.allChapterKeys[nextChapterIndex];
                          let url = `/${slugify(state.seriesData.title)}/${nextChapterKey}`;
                          if (goToLastPage) url += "#last";
                          window.location.href = url;
                        } else {
                          const message =
                            delta > 0
                              ? "Vous êtes au dernier chapitre disponible."
                              : "Ceci est le premier chapitre.";
                          console.log(message);
                        }
                      }
                      
                      export function updateUIOnPageChange() {
                        const currentSpread = state.spreads[state.currentSpreadIndex] || [];
                        const firstPage = currentSpread.length > 0 ? currentSpread[0] + 1 : 0;
                        // La référence à 'dom' est maintenant correcte grâce à l'import
                        if (dom.pageCounter) {
                          dom.pageCounter.textContent = `Page ${firstPage} / ${state.pages.length}`;
                        }
                      }
                    -----------------------


                    Fichier : reader.js
                    -------------------
                      // --- File: js/pages/series-detail/MangaReader/reader.js ---
                      
                      import { qs, slugify } from "../../../utils/domUtils.js";
                      import { state, dom } from "./state.js";
                      import { fetchAndLoadPages } from "./data.js";
                      import {
                        getInitialPageNumberFromUrl,
                        updateUIOnPageChange,
                      } from "./navigation.js";
                      import { loadSettings, saveSettings } from "./settings.js";
                      import { fetchSeriesStats } from "../../../utils/interactions.js";
                      
                      // Importe les initialiseurs et les fonctions de mise à jour des composants
                      import {
                        init as initInfoSidebar,
                        updateChapterList,
                        updateCommentsSection,
                        updateGlobalLikeButton,
                        handleGlobalLike,
                      } from "./components/infoSidebar.js";
                      import { init as initSettingsSidebar } from "./components/settingsSidebar.js";
                      import { init as initViewer } from "./components/viewer.js";
                      
                      /**
                       * Point d'entrée principal pour initialiser le lecteur de manga.
                       */
                      export async function initMangaReader() {
                        const dataPlaceholder = qs("#reader-data-placeholder");
                        if (
                          !dataPlaceholder?.textContent ||
                          dataPlaceholder.textContent.includes("READER_DATA_PLACEHOLDER")
                        ) {
                          return handleError(
                            "Les données du lecteur n'ont pas été trouvées dans la page."
                          );
                        }
                      
                        try {
                          // 1. Initialisation de l'état global
                          const readerData = JSON.parse(dataPlaceholder.textContent);
                          state.seriesData = readerData.series;
                          state.currentChapter = {
                            ...readerData.series.chapters[readerData.chapterNumber],
                            number: readerData.chapterNumber,
                          };
                          state.allChapterKeys = Object.keys(readerData.series.chapters)
                            .filter((key) => readerData.series.chapters[key].groups?.Big_herooooo)
                            .sort((a, b) => parseFloat(a) - parseFloat(b));
                      
                          document.title = `${state.seriesData.title} - Ch. ${state.currentChapter.number} | BigSolo`;
                          saveReadingProgress();
                      
                          // 2. Chargement des paramètres utilisateur
                          loadSettings();
                      
                          // 3. Mise en place de la structure HTML de base
                          setupBaseLayout();
                      
                          // 4. Initialisation des composants UI (Sidebars, Viewer)
                          initInfoSidebar();
                          initSettingsSidebar();
                          initViewer();
                      
                          // 5. Chargement des stats et mise à jour de l'UI
                          const seriesSlug = slugify(state.seriesData.title);
                          const serverStats = await fetchSeriesStats(seriesSlug);
                          state.chapterStats = serverStats[state.currentChapter.number] || {
                            likes: 0,
                            comments: [],
                          };
                      
                          // Mettre à jour les composants qui dépendent des stats
                          updateChapterList();
                          updateCommentsSection();
                          updateGlobalLikeButton();
                      
                          // 6. Initialisation des événements globaux
                          initializeGlobalEvents();
                      
                          // 7. Chargement des images du manga
                          const initialPageNumber = getInitialPageNumberFromUrl();
                          await fetchAndLoadPages(initialPageNumber);
                        } catch (error) {
                          handleError(`Impossible de charger le lecteur : ${error.message}`);
                          console.error(error);
                        }
                      }
                      
                      /**
                       * Crée la structure HTML de base du lecteur.
                       */
                      function setupBaseLayout() {
                        dom.root = qs("#manga-reader-root");
                        dom.root.innerHTML = `
                              <div id="global-reader-controls">
                                  <button id="toggle-info-sidebar-btn" title="Informations"><i class="fas fa-info-circle"></i></button>
                                  <button id="toggle-settings-sidebar-btn" title="Paramètres"><i class="fas fa-cog"></i></button>
                                  <button id="toggle-chapters-like" title="J'aime ce chapitre"><i class="fas fa-heart"></i></button>
                                  <span id="live-page-counter"></span>
                              </div>
                              <div class="reader-layout-container">
                                  <aside id="info-sidebar" class="reader-sidebar"></aside>
                                  <aside id="settings-sidebar" class="reader-sidebar"></aside>
                                  <div class="reader-container">
                                      <div class="reader-viewer-container"><p style="color: var(--clr-text-sub);">Chargement des pages...</p></div>
                                  </div>
                              </div>`;
                      
                        // Stocke les références DOM globales
                        Object.assign(dom, {
                          infoSidebar: qs("#info-sidebar"),
                          settingsSidebar: qs("#settings-sidebar"),
                          viewerContainer: qs(".reader-viewer-container"),
                          toggleInfoBtn: qs("#toggle-info-sidebar-btn"),
                          toggleSettingsBtn: qs("#toggle-settings-sidebar-btn"),
                          toggleLikeBtn: qs("#toggle-chapters-like"),
                          pageCounter: qs("#live-page-counter"),
                        });
                      
                        // Applique l'état initial des sidebars
                        updateLayout();
                      }
                      
                      /**
                       * Gère l'ouverture/fermeture et le positionnement des sidebars.
                       */
                      function updateLayout() {
                        let infoWidth = 0;
                        let settingsWidth = 0;
                        const rootStyle = getComputedStyle(document.documentElement);
                        const infoWidthRem = parseFloat(
                          rootStyle.getPropertyValue("--sidebar-info-width")
                        );
                        const settingsWidthRem = parseFloat(
                          rootStyle.getPropertyValue("--sidebar-settings-width")
                        );
                        const baseFontSize = parseFloat(rootStyle.fontSize);
                      
                        if (state.settings.infoSidebarOpen && dom.infoSidebar) {
                          infoWidth = infoWidthRem * baseFontSize;
                          dom.infoSidebar.style.transform = "translateX(0)";
                        } else if (dom.infoSidebar) {
                          dom.infoSidebar.style.transform = "translateX(-100%)";
                        }
                      
                        if (state.settings.settingsSidebarOpen && dom.settingsSidebar) {
                          settingsWidth = settingsWidthRem * baseFontSize;
                          dom.settingsSidebar.style.transform = `translateX(${infoWidth}px)`;
                        } else if (dom.settingsSidebar) {
                          const totalOffset = infoWidth + settingsWidthRem * baseFontSize;
                          dom.settingsSidebar.style.transform = `translateX(-${totalOffset}px)`;
                        }
                      
                        const totalMargin = infoWidth + settingsWidth;
                        const readerContainer = dom.viewerContainer?.parentElement;
                        if (readerContainer) {
                          readerContainer.style.marginLeft = `${totalMargin}px`;
                        }
                      }
                      
                      /**
                       * Initialise les événements globaux du lecteur.
                       */
                      function initializeGlobalEvents() {
                        dom.toggleInfoBtn.addEventListener("click", () => {
                          state.settings.infoSidebarOpen = !state.settings.infoSidebarOpen;
                          dom.toggleInfoBtn.classList.toggle(
                            "active",
                            state.settings.infoSidebarOpen
                          );
                          saveSettings();
                          updateLayout();
                        });
                      
                        dom.toggleSettingsBtn.addEventListener("click", () => {
                          state.settings.settingsSidebarOpen = !state.settings.settingsSidebarOpen;
                          dom.toggleSettingsBtn.classList.toggle(
                            "active",
                            state.settings.settingsSidebarOpen
                          );
                          saveSettings();
                          updateLayout();
                        });
                      
                        dom.toggleLikeBtn.addEventListener("click", handleGlobalLike);
                      
                        document.addEventListener("keydown", handleKeyDown);
                        dom.viewerContainer.addEventListener("scroll", handleWebtoonScroll, {
                          passive: true,
                        });
                      }
                      
                      function handleKeyDown(e) {
                        if (e.target.tagName === "TEXTAREA") return; // Ne pas naviguer si on écrit un commentaire
                      
                        const { mode, direction } = state.settings;
                        if (mode === "webtoon") return;
                      
                        // Importation dynamique pour éviter une dépendance cyclique
                        import("./navigation.js").then(({ changeSpread }) => {
                          if (e.key === "ArrowRight") changeSpread(direction === "ltr" ? 1 : -1);
                          if (e.key === "ArrowLeft") changeSpread(direction === "ltr" ? -1 : 1);
                        });
                      }
                      
                      let scrollTimeout = null;
                      function handleWebtoonScroll() {
                        if (state.settings.mode !== "webtoon") return;
                        if (scrollTimeout) window.cancelAnimationFrame(scrollTimeout);
                      
                        scrollTimeout = window.requestAnimationFrame(() => {
                          const triggerPoint = window.innerHeight * 0.4;
                          let closestImageIndex = -1;
                          let minDistance = Infinity;
                      
                          qsa(".reader-viewer-container img").forEach((img, index) => {
                            const rect = img.getBoundingClientRect();
                            if (rect.bottom > 0 && rect.top < window.innerHeight) {
                              const distance = Math.abs(rect.top - triggerPoint);
                              if (distance < minDistance) {
                                minDistance = distance;
                                closestImageIndex = index;
                              }
                            }
                          });
                      
                          if (closestImageIndex !== -1) {
                            const newSpreadIndex = state.pageToSpreadMap[closestImageIndex];
                            if (
                              newSpreadIndex !== undefined &&
                              newSpreadIndex !== state.currentSpreadIndex
                            ) {
                              state.currentSpreadIndex = newSpreadIndex;
                              updateUIOnPageChange();
                            }
                          }
                        });
                      }
                      
                      /**
                       * Sauvegarde la progression de lecture dans le localStorage.
                       */
                      function saveReadingProgress() {
                        const seriesSlug = slugify(state.seriesData.title);
                        const chapterNumber = state.currentChapter.number;
                        if (seriesSlug && chapterNumber) {
                          try {
                            localStorage.setItem(`reading-progress-${seriesSlug}`, chapterNumber);
                            console.log(
                              `[Reader] Progression sauvegardée : ${seriesSlug} -> Ch. ${chapterNumber}`
                            );
                          } catch (e) {
                            console.warn(
                              "[Reader] Erreur lors de la sauvegarde de la progression:",
                              e
                            );
                          }
                        }
                      }
                      
                      /**
                       * Affiche un message d'erreur dans le lecteur.
                       * @param {string} message
                       */
                      function handleError(message) {
                        console.error(message);
                        const root = qs("#manga-reader-root");
                        if (root) {
                          root.innerHTML = `<p style="padding: 2rem; text-align: center; color: var(--clr-text-sub);">${message}</p>`;
                        }
                      }
                    -------------------


                    Fichier : settings.js
                    ---------------------
                      // --- File: js/pages/series-detail/MangaReader/settings.js ---
                      
                      import { state } from "./state.js";
                      
                      // Configuration centralisée des options de paramètres.
                      export const settingsConfig = {
                        mode: {
                          options: [
                            { value: "single", text: "Simple", icon: "fas fa-file" },
                            { value: "double", text: "Double", icon: "fas fa-book-open" },
                            { value: "webtoon", text: "Webtoon", icon: "fas fa-scroll" },
                          ],
                        },
                        fit: {
                          options: [
                            { value: "height", text: "Hauteur", icon: "fas fa-arrows-alt-v" },
                            { value: "width", text: "Largeur", icon: "fas fa-arrows-alt-h" },
                            { value: "custom", text: "Personnalisé", icon: "fas fa-ruler-combined" },
                          ],
                        },
                        direction: {
                          options: [
                            { value: "ltr", text: "Gauche à Droite" },
                            { value: "rtl", text: "Droite à Gauche" },
                          ],
                        },
                      };
                      
                      /**
                       * Charge les paramètres de l'utilisateur depuis le localStorage.
                       */
                      export function loadSettings() {
                        const saved = localStorage.getItem("bigsolo_reader_settings_v6");
                        if (saved) {
                          try {
                            Object.assign(state.settings, JSON.parse(saved));
                            console.log("Paramètres du lecteur chargés :", state.settings);
                          } catch (e) {
                            console.error("Impossible de charger les paramètres du lecteur.", e);
                          }
                        }
                      }
                      
                      /**
                       * Sauvegarde les paramètres actuels de l'utilisateur dans le localStorage.
                       */
                      export function saveSettings() {
                        try {
                          localStorage.setItem(
                            "bigsolo_reader_settings_v6",
                            JSON.stringify(state.settings)
                          );
                        } catch (e) {
                          console.error("Erreur lors de la sauvegarde des paramètres:", e);
                        }
                      }
                    ---------------------


                    Fichier : state.js
                    ------------------
                      // --- File: js/pages/series-detail/MangaReader/state.js ---
                      
                      // L'état global du lecteur, exporté pour être modifiable par les autres modules.
                      export let state = {
                        seriesData: null,
                        currentChapter: null,
                        allChapterKeys: [],
                        pages: [],
                        spreads: [],
                        pageToSpreadMap: [],
                        currentSpreadIndex: 0,
                        chapterStats: { likes: 0, comments: [] },
                        settings: {
                          // État des options principales
                          mode: "double", // 'single', 'double', 'webtoon'
                          fit: "width", // 'height', 'width', 'custom'
                      
                          // État des options secondaires
                          doublePageOffset: true,
                          direction: "rtl", // 'ltr', 'rtl'
                          stretch: false,
                          limitWidth: true,
                          limitHeight: false,
                      
                          // Valeurs des sliders
                          customMaxWidth: 1200,
                          customMaxHeight: 1080,
                      
                          // État de l'UI
                          infoSidebarOpen: true,
                          settingsSidebarOpen: false,
                        },
                      };
                      
                      // Les références aux éléments du DOM, centralisées ici.
                      export const dom = {};
                      
                      // Les éléments <img> des pages, pour le préchargement et l'affichage.
                      export let domImages = [];
                      
                      // Fonction pour mettre à jour la liste des images
                      export function setDomImages(images) {
                        domImages = images;
                      }
                    ------------------


                    Fichier : ui.js
                    ---------------
                    ---------------

                    Dossier : components/

                        Fichier : infoSidebar.js
                        ------------------------
                          // --- File: js/pages/series-detail/MangaReader/components/infoSidebar.js ---
                          
                          import { qs, qsa, slugify } from "../../../../utils/domUtils.js";
                          import { timeAgo } from "../../../../utils/dateUtils.js";
                          import { state, dom } from "../state.js";
                          import { assignUserIdentityForChapter } from "../../../../utils/usernameGenerator.js";
                          import {
                            queueAction,
                            getLocalInteractionState,
                            setLocalInteractionState,
                            addPendingComment,
                          } from "../../../../utils/interactions.js";
                          
                          /**
                           * Initialise le composant de la sidebar d'informations.
                           */
                          export function init() {
                            console.log("[InfoSidebar] Initialisation.");
                            render();
                            attachEventListeners();
                          }
                          
                          /**
                           * Gère le rendu HTML de la sidebar d'informations.
                           */
                          function render() {
                            if (!dom.infoSidebar) return;
                          
                            const seriesSlug = slugify(state.seriesData.title);
                          
                            dom.infoSidebar.innerHTML = `
                                  <div class="sidebar-content-wrapper">
                                      <div id="info-series-link-group" class="control-group">
                                          <a id="info-series-link" href="/${seriesSlug}">
                                              <i class="fas fa-arrow-left"></i> ${state.seriesData.title}
                                          </a>
                                      </div>
                                      <div id="info-chapters-group" class="control-group">
                                          <h4 class="group-title">Chapitres</h4>
                                          <div class="chapter-list-wrapper"><div class="chapter-list"><p>Chargement...</p></div></div>
                                      </div>
                                      <div id="info-comments-group" class="control-group">
                                          <h4 class="group-title">Commentaires</h4>
                                          <div class="add-comment-box">
                                              <textarea id="comment-textarea" placeholder="Ajouter un commentaire..." rows="1"></textarea>
                                              <div class="add-comment-actions"><button id="comment-send-btn" class="send-btn">Envoyer <i class="fas fa-paper-plane"></i></button></div>
                                          </div>
                                          <div id="comments-list">
                                              <p>Chargement...</p>
                                          </div>
                                      </div>
                                  </div>`;
                          
                            // Met à jour les références DOM spécifiques à cette sidebar
                            dom.chapterList = qs(".chapter-list", dom.infoSidebar);
                            dom.commentsList = qs("#comments-list", dom.infoSidebar);
                            dom.commentTextarea = qs("#comment-textarea", dom.infoSidebar);
                            dom.commentSendBtn = qs("#comment-send-btn", dom.infoSidebar);
                          }
                          
                          /**
                           * Attache tous les écouteurs d'événements pour la sidebar d'informations.
                           */
                          function attachEventListeners() {
                            // Clic sur un chapitre dans la liste
                            if (dom.chapterList) {
                              dom.chapterList.addEventListener("click", (e) => {
                                const link = e.target.closest("a");
                                if (link) {
                                  e.preventDefault(); // Empêche le comportement par défaut du lien dans tous les cas
                                  const chapterId = link.dataset.chapterId;
                                  if (chapterId && chapterId !== state.currentChapter.number) {
                                    const seriesSlug = slugify(state.seriesData.title);
                                    window.location.href = `/${seriesSlug}/${chapterId}`;
                                  }
                                }
                          
                                // Clic sur le bouton/zone de like dans les stats du chapitre
                                if (e.target.closest(".chapter-stats-details")) {
                                  handleGlobalLike();
                                }
                              });
                            }
                          
                            // Envoi d'un commentaire
                            if (dom.commentSendBtn) {
                              dom.commentSendBtn.addEventListener("click", handleCommentSubmit);
                            }
                          
                            // Redimensionnement automatique du textarea
                            if (dom.commentTextarea) {
                              dom.commentTextarea.addEventListener("input", () => {
                                dom.commentTextarea.style.height = "auto";
                                const newHeight = Math.min(dom.commentTextarea.scrollHeight, 120);
                                dom.commentTextarea.style.height = `${newHeight}px`;
                              });
                            }
                          
                            // Likes sur les commentaires
                            if (dom.commentsList) {
                              dom.commentsList.addEventListener("click", handleCommentLike);
                            }
                          }
                          
                          /**
                           * Met à jour la liste des chapitres affichée dans la sidebar.
                           */
                          export function updateChapterList() {
                            if (!dom.chapterList) return;
                          
                            const sortedChapters = state.allChapterKeys
                              .slice()
                              .sort((a, b) => parseFloat(b) - parseFloat(a));
                          
                            dom.chapterList.innerHTML = sortedChapters
                              .map((key) => {
                                const chapterTitle = state.seriesData.chapters[key].title || "";
                                const truncatedTitle =
                                  chapterTitle.length > 28
                                    ? chapterTitle.substring(0, 25) + "..."
                                    : chapterTitle;
                                const isActive = key === state.currentChapter.number;
                          
                                return `
                                      <a href="#" data-chapter-id="${key}" class="${
                                  isActive ? "active" : ""
                                }" title="${chapterTitle}">
                                          <div class="chapter-info-main">
                                              <span class="chapter-number">${key}</span>
                                              <span class="chapter-title">${truncatedTitle}</span>
                                          </div>
                                          ${isActive ? renderChapterStats() : ""}
                                      </a>`;
                              })
                              .join("");
                          
                            const activeLink = qs("a.active", dom.chapterList);
                            if (activeLink) {
                              activeLink.scrollIntoView({ behavior: "smooth", block: "center" });
                            }
                          }
                          
                          /**
                           * Gère la soumission d'un nouveau commentaire.
                           */
                          async function handleCommentSubmit() {
                            const commentText = dom.commentTextarea.value.trim();
                            if (commentText.length === 0) return;
                          
                            const seriesSlug = slugify(state.seriesData.title);
                            const chapterNumber = state.currentChapter.number;
                            const interactionKey = `interactions_${seriesSlug}_${chapterNumber}`;
                          
                            const userIdentity = await assignUserIdentityForChapter(interactionKey);
                            const newComment = {
                              id: `${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
                              username: userIdentity.username,
                              avatarUrl: userIdentity.avatarUrl,
                              comment: commentText,
                              timestamp: Date.now(),
                              likes: 0,
                            };
                          
                            addPendingComment(interactionKey, newComment);
                            // Ajout optimiste au début de la liste de commentaires dans l'état
                            state.chapterStats.comments.unshift(newComment);
                          
                            queueAction(seriesSlug, {
                              type: "add_comment",
                              chapter: chapterNumber,
                              payload: newComment,
                            });
                          
                            dom.commentTextarea.value = "";
                            dom.commentTextarea.style.height = "auto";
                          
                            updateCommentsSection(); // Re-render la section commentaires
                            updateChapterList(); // Re-render la liste des chapitres pour mettre à jour le compteur de commentaires
                          }
                          
                          /**
                           * Gère le clic sur le bouton "J'aime" d'un commentaire.
                           * @param {MouseEvent} e
                           */
                          function handleCommentLike(e) {
                            const likeBtn = e.target.closest(".comment-like-action");
                            if (!likeBtn) return;
                          
                            const commentItem = likeBtn.closest(".comment-item");
                            const commentId = commentItem?.dataset.commentId;
                            if (!commentId) return;
                          
                            const seriesSlug = slugify(state.seriesData.title);
                            const chapterNumber = state.currentChapter.number;
                            const interactionKey = `interactions_${seriesSlug}_${chapterNumber}`;
                            let localState = getLocalInteractionState(interactionKey);
                            if (!localState.likedComments) localState.likedComments = [];
                          
                            const isLiked = localState.likedComments.includes(commentId);
                          
                            // Mise à jour de l'état local
                            if (isLiked) {
                              localState.likedComments = localState.likedComments.filter(
                                (id) => id !== commentId
                              );
                            } else {
                              localState.likedComments.push(commentId);
                            }
                            setLocalInteractionState(interactionKey, localState);
                          
                            // Mise en file d'attente de l'action
                            queueAction(seriesSlug, {
                              type: isLiked ? "unlike_comment" : "like_comment",
                              chapter: chapterNumber,
                              payload: { commentId },
                            });
                          
                            // Mise à jour optimiste de l'UI
                            updateCommentsSection();
                          }
                          
                          /**
                           * Met à jour toute la section des commentaires (liste et formulaire).
                           */
                          export function updateCommentsSection() {
                            if (!dom.commentsList) return;
                          
                            const seriesSlug = slugify(state.seriesData.title);
                            const chapterNumber = state.currentChapter.number;
                            const interactionKey = `interactions_${seriesSlug}_${chapterNumber}`;
                            const localState = getLocalInteractionState(interactionKey);
                            const likedComments = new Set(localState.likedComments || []);
                            const pendingComments = localState.pendingComments || [];
                            const serverComments = state.chapterStats.comments || [];
                          
                            // Fusionner les commentaires du serveur et les commentaires en attente (sans doublons)
                            const serverCommentIds = new Set(serverComments.map((c) => c.id));
                            const allComments = [
                              ...pendingComments.filter((pc) => !serverCommentIds.has(pc.id)),
                              ...serverComments,
                            ].sort((a, b) => b.timestamp - a.timestamp);
                          
                            if (allComments.length > 0) {
                              dom.commentsList.innerHTML = allComments
                                .map((comment) => {
                                  const isLiked = likedComments.has(comment.id);
                                  // Trouve le commentaire correspondant dans l'état pour obtenir le nombre de likes de base
                                  const originalComment = state.chapterStats.comments.find(
                                    (c) => c.id === comment.id
                                  );
                                  let baseLikes = originalComment?.likes || 0;
                                  let displayLikes = isLiked ? baseLikes + 1 : baseLikes;
                          
                                  return `
                                          <div class="comment-item" data-comment-id="${comment.id}">
                                              <div class="comment-header">
                                                  <div class="user">
                                                      <div class="user-pic"><img src="${
                                                        comment.avatarUrl || "/img/profil.png"
                                                      }" alt="Avatar"></div>
                                                      <div class="user-info">
                                                          <span class="username">${
                                                            comment.username || "Visiteur"
                                                          }</span>
                                                          <span class="timestamp">${timeAgo(
                                                            comment.timestamp
                                                          )}</span>
                                                      </div>
                                                  </div>
                                                  <button class="comment-like-action${
                                                    isLiked ? " liked" : ""
                                                  }" title="Aimer le commentaire">
                                                      <i class="fas fa-heart"></i><span>${displayLikes}</span>
                                                  </button>
                                              </div>
                                              <p class="comment-content">${comment.comment}</p>
                                          </div>`;
                                })
                                .join("");
                            } else {
                              dom.commentsList.innerHTML = `<p style="font-size: 0.9rem; color: var(--clr-text-sub);">Aucun commentaire.</p>`;
                            }
                          
                            const hasPending = pendingComments.length > 0;
                            dom.commentSendBtn.disabled = hasPending;
                            dom.commentTextarea.readOnly = hasPending;
                            if (hasPending) {
                              dom.commentTextarea.value =
                                "Un seul commentaire par chapitre est autorisé.";
                              dom.commentTextarea.style.opacity = "0.7";
                            } else {
                              dom.commentTextarea.value = "";
                              dom.commentTextarea.style.opacity = "1";
                            }
                          }
                          
                          /**
                           * Génère le HTML pour les statistiques du chapitre actif dans la liste.
                           * @returns {string} Le HTML des statistiques.
                           */
                          function renderChapterStats() {
                            const seriesSlug = slugify(state.seriesData.title);
                            const chapterNumber = state.currentChapter.number;
                            const interactionKey = `interactions_${seriesSlug}_${chapterNumber}`;
                            const localState = getLocalInteractionState(interactionKey);
                            const isLiked = !!localState.liked;
                          
                            let baseLikes = state.chapterStats.likes || 0;
                            let displayLikes = isLiked ? baseLikes + 1 : baseLikes;
                          
                            const serverCommentCount = Array.isArray(state.chapterStats.comments)
                              ? state.chapterStats.comments.length
                              : 0;
                            const pendingCommentCount = (localState.pendingComments || []).length;
                            const displayComments = serverCommentCount + pendingCommentCount;
                          
                            return `
                                  <div class="chapter-stats-details">
                                      <span title="J'aime ce chapitre">
                                          <i class="fas fa-heart${isLiked ? " liked" : ""}"></i>
                                          <span class="chapter-likes-count${
                                            isLiked ? " liked" : ""
                                          }">${displayLikes}</span>
                                      </span>
                                      <span title="Commentaires"><i class="fas fa-comment"></i> ${displayComments}</span>
                                      <span title="Date de sortie"><i class="fas fa-clock"></i> ${timeAgo(
                                        state.currentChapter.last_updated
                                      )}</span>
                                  </div>`;
                          }
                          
                          /**
                           * Gère la logique de like/unlike pour le chapitre actuel.
                           * Cette fonction est appelée par le bouton global ET par le bouton dans la liste.
                           */
                          export function handleGlobalLike() {
                            const seriesSlug = slugify(state.seriesData.title);
                            const chapterNumber = state.currentChapter.number;
                            const interactionKey = `interactions_${seriesSlug}_${chapterNumber}`;
                            let localState = getLocalInteractionState(interactionKey);
                            const isLiked = !!localState.liked;
                          
                            // Mise à jour de l'état local
                            localState.liked = !isLiked;
                            setLocalInteractionState(interactionKey, localState);
                          
                            // Mise en file d'attente
                            queueAction(seriesSlug, {
                              type: !isLiked ? "like" : "unlike",
                              chapter: chapterNumber,
                            });
                          
                            // Mise à jour de TOUTE l'UI concernée
                            updateGlobalLikeButton();
                            updateChapterList(); // Re-render la liste pour mettre à jour les stats du chapitre actif
                          }
                          
                          /**
                           * Met à jour l'état visuel du bouton "J'aime" global.
                           */
                          export function updateGlobalLikeButton() {
                            const seriesSlug = slugify(state.seriesData.title);
                            const chapterNumber = state.currentChapter.number;
                            const interactionKey = `interactions_${seriesSlug}_${chapterNumber}`;
                            const isLiked = !!getLocalInteractionState(interactionKey).liked;
                          
                            if (dom.toggleLikeBtn) {
                              dom.toggleLikeBtn.classList.toggle("liked", isLiked);
                            }
                          }
                        ------------------------


                        Fichier : settingsSidebar.js
                        ----------------------------
                          // --- File: js/pages/series-detail/MangaReader/components/settingsSidebar.js ---
                          
                          import { qs, qsa } from "../../../../utils/domUtils.js";
                          import { state, dom } from "../state.js";
                          import { saveSettings, settingsConfig } from "../settings.js";
                          import { calculateSpreads } from "../data.js";
                          import { render as renderViewer } from "./viewer.js";
                          
                          /**
                           * Initialise le composant de la sidebar des paramètres.
                           */
                          export function init() {
                            console.log("[SettingsSidebar] Initialisation.");
                            render();
                            attachEventListeners();
                            updateAllUI();
                          }
                          
                          /**
                           * Gère le rendu HTML de la sidebar des paramètres.
                           */
                          function render() {
                            if (!dom.settingsSidebar) return;
                          
                            dom.settingsSidebar.innerHTML = `
                                  <div class="sidebar-content-wrapper">
                                      <div id="settings-mode-group" class="control-group">
                                          <h4 class="group-title">Mode de lecture</h4>
                                          <button class="main-setting-btn" data-setting="mode"></button>
                                          <div class="options-panel" id="mode-options-panel">
                                              <button class="secondary-toggle-btn" data-sub-setting="doublePageOffset"><i class="check-icon far fa-square"></i> Décalage double page</button>
                                              <button class="secondary-toggle-btn" data-sub-setting="direction"></button>
                                          </div>
                                      </div>
                                      <div id="settings-fit-group" class="control-group">
                                          <h4 class="group-title">Ajustement</h4>
                                          <button class="main-setting-btn" data-setting="fit"></button>
                                          <div class="options-panel" id="fit-options-panel">
                                              <button class="secondary-toggle-btn" data-sub-setting="stretch"><i class="check-icon far fa-square"></i> Étirer les petites pages</button>
                                              <div class="slider-control" data-sub-setting="limitWidth">
                                                  <div class="slider-header">
                                                      <i class="check-icon far fa-square"></i>
                                                      <span class="slider-label">Limiter la largeur</span>
                                                  </div>
                                                  <div class="slider-body">
                                                      <div class="PB-range-slider-div">
                                                          <input type="range" min="400" max="3000" class="PB-range-slider" step="10" disabled>
                                                          <p class="PB-range-slidervalue">1200px</p>
                                                      </div>
                                                  </div>
                                              </div>
                                              <div class="slider-control" data-sub-setting="limitHeight">
                                                  <div class="slider-header">
                                                      <i class="check-icon far fa-square"></i>
                                                      <span class="slider-label">Limiter la hauteur</span>
                                                  </div>
                                                  <div class="slider-body">
                                                      <div class="PB-range-slider-div">
                                                          <input type="range" min="400" max="3000" class="PB-range-slider" step="10" disabled>
                                                          <p class="PB-range-slidervalue">1080px</p>
                                                      </div>
                                                  </div>
                                              </div>
                                          </div>
                                      </div>
                                  </div>`;
                          }
                          
                          /**
                           * Attache tous les écouteurs d'événements pour les contrôles des paramètres.
                           */
                          function attachEventListeners() {
                            qsa(".main-setting-btn", dom.settingsSidebar).forEach((btn) => {
                              btn.addEventListener("click", () => {
                                const settingName = btn.dataset.setting;
                                const config = settingsConfig[settingName];
                                const currentValue = state.settings[settingName];
                                const currentIndex = config.options.findIndex(
                                  (opt) => opt.value === currentValue
                                );
                                const nextIndex = (currentIndex + 1) % config.options.length;
                                state.settings[settingName] = config.options[nextIndex].value;
                          
                                if (settingName === "mode") {
                                  calculateSpreads();
                                }
                                renderViewer();
                                saveSettings();
                                updateAllUI();
                              });
                            });
                          
                            qsa(".secondary-toggle-btn", dom.settingsSidebar).forEach((btn) => {
                              btn.addEventListener("click", () => {
                                const subSetting = btn.dataset.subSetting;
                                if (subSetting === "direction") {
                                  state.settings.direction =
                                    state.settings.direction === "ltr" ? "rtl" : "ltr";
                                } else {
                                  state.settings[subSetting] = !state.settings[subSetting];
                                }
                          
                                if (subSetting === "doublePageOffset") {
                                  calculateSpreads();
                                }
                                renderViewer();
                                saveSettings();
                                updateAllUI();
                              });
                            });
                          
                            qsa(".slider-control", dom.settingsSidebar).forEach((control) => {
                              const header = control.querySelector(".slider-header");
                              const slider = control.querySelector(".PB-range-slider");
                              const valueDisplay = control.querySelector(".PB-range-slidervalue");
                              const settingName = control.dataset.subSetting;
                              const valueSettingName =
                                settingName === "limitWidth" ? "customMaxWidth" : "customMaxHeight";
                          
                              if (header) {
                                header.addEventListener("click", () => {
                                  state.settings[settingName] = !state.settings[settingName];
                                  saveSettings();
                                  updateAllUI();
                                });
                              }
                          
                              if (slider && valueDisplay) {
                                slider.addEventListener("input", () => {
                                  const newValue = slider.value;
                                  valueDisplay.textContent = `${newValue}px`;
                                  state.settings[valueSettingName] = parseInt(newValue, 10);
                                  renderViewer();
                                });
                                slider.addEventListener("change", saveSettings);
                                slider.addEventListener("keydown", (e) => {
                                  if (
                                    ["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown"].includes(e.key)
                                  ) {
                                    e.stopPropagation(); // Empêche la navigation par flèches quand on utilise le slider
                                  }
                                });
                              }
                            });
                          }
                          
                          /**
                           * Met à jour toute l'interface des paramètres pour refléter l'état actuel.
                           */
                          function updateAllUI() {
                            console.log("[SettingsSidebar] Mise à jour de l'UI des paramètres.");
                            // Met à jour les boutons principaux (Mode, Ajustement)
                            qsa(".main-setting-btn", dom.settingsSidebar).forEach((btn) => {
                              const settingName = btn.dataset.setting;
                              const config = settingsConfig[settingName];
                              const currentOption = config.options.find(
                                (opt) => opt.value === state.settings[settingName]
                              );
                              if (currentOption) {
                                btn.innerHTML = `<i class="icon ${currentOption.icon}"></i> <span class="text">${currentOption.text}</span>`;
                              }
                            });
                          
                            // Met à jour les panneaux secondaires
                            const { mode, fit } = state.settings;
                            qs(
                              '[data-sub-setting="doublePageOffset"]',
                              dom.settingsSidebar
                            ).classList.toggle("disabled", mode !== "double");
                            qs('[data-sub-setting="direction"]', dom.settingsSidebar).classList.toggle(
                              "disabled",
                              mode === "webtoon"
                            );
                            qs('[data-sub-setting="stretch"]', dom.settingsSidebar).classList.toggle(
                              "disabled",
                              fit !== "custom"
                            );
                            qsa(".slider-control", dom.settingsSidebar).forEach((control) => {
                              control.classList.toggle("disabled", fit !== "custom");
                            });
                          
                            // Met à jour les toggles secondaires et sliders
                            qsa(".secondary-toggle-btn", dom.settingsSidebar).forEach((btn) => {
                              const subSetting = btn.dataset.subSetting;
                              if (subSetting === "direction") {
                                const dirOption = settingsConfig.direction.options.find(
                                  (opt) => opt.value === state.settings.direction
                                );
                                btn.innerHTML = `<i class="check-icon fas fa-sync-alt"></i> <span class="text-content">${
                                  dirOption ? dirOption.text : ""
                                }</span>`;
                              } else {
                                const isActive = state.settings[subSetting];
                                btn.classList.toggle("active", isActive);
                                btn.querySelector(".check-icon").className = `check-icon ${
                                  isActive ? "fas fa-check-square" : "far fa-square"
                                }`;
                              }
                            });
                          
                            qsa(".slider-control", dom.settingsSidebar).forEach((control) => {
                              const settingName = control.dataset.subSetting;
                              const isActive =
                                state.settings[settingName] && !control.classList.contains("disabled");
                              control.classList.toggle("active", isActive);
                          
                              const sliderInput = control.querySelector(".PB-range-slider");
                              if (sliderInput) sliderInput.disabled = !isActive;
                          
                              const valueSettingName =
                                settingName === "limitWidth" ? "customMaxWidth" : "customMaxHeight";
                              const value =
                                state.settings[valueSettingName] ||
                                (valueSettingName === "customMaxWidth" ? 1200 : 1080);
                          
                              if (sliderInput) sliderInput.value = value;
                              const valueSpan = control.querySelector(".PB-range-slidervalue");
                              if (valueSpan) valueSpan.textContent = `${value}px`;
                            });
                          }
                        ----------------------------


                        Fichier : viewer.js
                        -------------------
                          // --- File: js/pages/series-detail/MangaReader/components/viewer.js ---
                          
                          import { qs } from "../../../../utils/domUtils.js";
                          import { state, dom, domImages } from "../state.js";
                          import { changeSpread } from "../navigation.js";
                          
                          /**
                           * Initialise le composant de la visionneuse d'images.
                           */
                          export function init() {
                            console.log("[ViewerComponent] Initialisation.");
                            if (dom.viewerContainer) {
                              dom.viewerContainer.addEventListener("click", handleViewerClick);
                            }
                          }
                          
                          /**
                           * Gère le rendu des images dans la visionneuse en fonction de l'état actuel.
                           */
                          export function render() {
                            console.log(
                              "[ViewerComponent] Rendu des images pour la planche :",
                              state.currentSpreadIndex
                            );
                            const viewer = document.createElement("div");
                            const {
                              mode,
                              fit,
                              direction,
                              stretch,
                              limitWidth,
                              customMaxWidth,
                              limitHeight,
                              customMaxHeight,
                            } = state.settings;
                          
                            viewer.className = `reader-viewer ${mode}-mode fit-${fit} ${direction}-mode`;
                            if (stretch) viewer.classList.add("stretch");
                          
                            // Applique max-width au conteneur UNIQUEMENT si nécessaire
                            if (fit === "custom") {
                              viewer.style.maxWidth = limitWidth ? `${customMaxWidth}px` : "none";
                            } else {
                              viewer.style.maxWidth = ""; // On retire le style en ligne pour laisser le CSS gérer
                            }
                          
                            let imagesToRender = [];
                            if (mode === "webtoon") {
                              imagesToRender = domImages.filter(Boolean);
                            } else {
                              const currentSpread = state.spreads[state.currentSpreadIndex] || [];
                              imagesToRender = currentSpread
                                .map((pageIndex) => domImages[pageIndex])
                                .filter(Boolean);
                            }
                          
                            imagesToRender.forEach((img) => {
                              const imgClone = img.cloneNode(true);
                              // Applique les styles en ligne QUE si le mode est "Personnalisé"
                              if (fit === "custom") {
                                imgClone.style.maxHeight = limitHeight ? `${customMaxHeight}px` : "none";
                              }
                              if (mode === "double" && imagesToRender.length === 1) {
                                const isLandscape = imgClone.naturalWidth > imgClone.naturalHeight;
                                if (!isLandscape) {
                                  imgClone.classList.add("single-page-spread");
                                }
                              }
                              viewer.appendChild(imgClone);
                            });
                          
                            dom.viewerContainer.innerHTML = "";
                            dom.viewerContainer.appendChild(viewer);
                          }
                          
                          /**
                           * Gère les clics sur la visionneuse pour la navigation.
                           * @param {MouseEvent} e
                           */
                          function handleViewerClick(e) {
                            if (state.settings.mode === "webtoon") return;
                            const rect = dom.viewerContainer.getBoundingClientRect();
                            const zone = (e.clientX - rect.left) / rect.width;
                            const direction = state.settings.direction;
                            if (zone < 0.35) {
                              changeSpread(direction === "ltr" ? -1 : 1);
                            } else if (zone > 0.65) {
                              changeSpread(direction === "ltr" ? 1 : -1);
                            }
                          }
                        -------------------

                Dossier : shared/

                    Fichier : actionButtons.js
                    --------------------------
                      // --- File: js/pages/series-detail/shared/actionButtons.js ---
                      
                      import { qs } from "../../../utils/domUtils.js";
                      
                      /**
                       * Affiche les boutons d'action de lecture/visionnage.
                       * @param {HTMLElement} viewContainer - Le conteneur principal de la vue.
                       * @param {object} seriesData - Les données de la série.
                       * @param {'manga' | 'anime'} viewType - Le type de vue.
                       */
                      export function renderActionButtons(viewContainer, seriesData, viewType) {
                        console.log(`[ActionButtons] Rendu des boutons pour la vue : ${viewType}`);
                        const actionsDiv = qs("#reading-actions-container", viewContainer);
                        if (!actionsDiv) {
                          console.warn(
                            "[ActionButtons] Conteneur #reading-actions-container introuvable."
                          );
                          return;
                        }
                      
                        // Nettoie les anciens boutons (sauf le conteneur de notation)
                        Array.from(actionsDiv.children).forEach((child) => {
                          if (child.id !== "series-rating-container") {
                            child.remove();
                          }
                        });
                      
                        const seriesSlug = seriesData.slug;
                        const localKey = `reading-progress-${seriesSlug}`;
                        const savedProgress = localStorage.getItem(localKey);
                      
                        const items =
                          viewType === "manga" ? seriesData.chapters : seriesData.episodes;
                        const itemKeys = Object.keys(items || {});
                        if (itemKeys.length === 0) {
                          console.log(
                            "[ActionButtons] Aucun chapitre/épisode à afficher, pas de boutons."
                          );
                          return;
                        }
                      
                        // Trier pour trouver le dernier
                        itemKeys.sort((a, b) => {
                          const numA = viewType === "manga" ? parseFloat(a) : items[a].indice_ep;
                          const numB = viewType === "manga" ? parseFloat(b) : items[b].indice_ep;
                          return numB - numA;
                        });
                        const lastItemKey = itemKeys[0];
                      
                        const labels = {
                          manga: { singular: "chapitre", plural: "chapitres", prefix: "Ch." },
                          anime: { singular: "épisode", plural: "épisodes", prefix: "Ep." },
                        };
                        const currentLabels = labels[viewType];
                        const urlPath = viewType === "manga" ? "" : "/episodes";
                      
                        const lastItemLabel = `${currentLabels.prefix} ${lastItemKey}`;
                      
                        if (!savedProgress) {
                          // Cas 1: Jamais lu
                          const lastBtn = createButton(
                            `Dernier ${currentLabels.singular} (${lastItemLabel})`,
                            `/${seriesSlug}${urlPath}/${lastItemKey}`
                          );
                          actionsDiv.appendChild(lastBtn);
                          console.log(`[ActionButtons] Affichage: Dernier ${currentLabels.singular}`);
                        } else {
                          // Cas 2: A déjà une progression
                          const isUpToDate = savedProgress.toString() === lastItemKey.toString();
                          if (isUpToDate) {
                            // Cas 2a: À jour
                            const upToDateBtn = createDisabledButton("À jour");
                            actionsDiv.appendChild(upToDateBtn);
                            console.log("[ActionButtons] Affichage: À jour");
                          } else {
                            // Cas 2b: Pas à jour
                            // ***** CORRECTION ICI : L'ORDRE EST INVERSÉ *****
                            const lastBtn = createButton(
                              `Dernier ${currentLabels.singular} (${lastItemLabel})`,
                              `/${seriesSlug}${urlPath}/${lastItemKey}`
                            );
                            const continueLabel = `${currentLabels.prefix} ${savedProgress}`;
                            const continueBtn = createButton(
                              `Continuer (${continueLabel})`,
                              `/${seriesSlug}${urlPath}/${savedProgress}`,
                              true
                            );
                      
                            actionsDiv.appendChild(lastBtn); // Dernier chapitre en premier
                            actionsDiv.appendChild(continueBtn); // Continuer en second
                            console.log(
                              `[ActionButtons] Affichage: Dernier ${currentLabels.singular} + Continuer`
                            );
                          }
                        }
                      }
                      
                      function createButton(text, href, isContinue = false) {
                        const btn = document.createElement("a");
                        btn.href = href;
                        btn.className = "detail-action-btn";
                        if (isContinue) {
                          btn.classList.add("detail-action-btn--continue");
                        }
                        btn.textContent = text;
                        return btn;
                      }
                      
                      function createDisabledButton(text) {
                        const btn = document.createElement("span");
                        btn.className = "detail-action-btn detail-action-btn--disabled";
                        btn.textContent = text;
                        return btn;
                      }
                    --------------------------


                    Fichier : infoRenderer.js
                    -------------------------
                      // --- File: js/pages/series-detail/shared/infoRenderer.js ---
                      
                      import { qs } from "../../../utils/domUtils.js";
                      import {
                        getLocalSeriesRating,
                        setLocalSeriesRating,
                      } from "../../../utils/interactions.js";
                      
                      /**
                       * Affiche l'ensemble des informations principales de la série (partie haute).
                       * @param {HTMLElement} viewContainer - L'élément conteneur principal de la vue.
                       * @param {object} seriesData - Les données complètes de la série.
                       * @param {object} seriesStats - Les statistiques d'interaction de la série.
                       * @param {'manga' | 'anime'} viewType - Le type de vue à rendre ('manga' ou 'anime').
                       */
                      export function renderSeriesInfo(
                        viewContainer,
                        seriesData,
                        seriesStats,
                        viewType
                      ) {
                        console.log(
                          `[InfoRenderer] Rendu des informations pour la vue : ${viewType}`
                        );
                      
                        renderBannerAndCover(viewContainer, seriesData, viewType);
                        renderTitlesAndTags(viewContainer, seriesData, viewType);
                        renderCreatorInfo(viewContainer, seriesData, viewType);
                        renderDescription(viewContainer, seriesData);
                        renderRatingComponent(viewContainer, seriesData, seriesStats);
                      }
                      
                      // --- Fonctions de rendu spécifiques ---
                      
                      function renderBannerAndCover(container, seriesData, viewType) {
                        const banner = qs("#hero-banner-section", container);
                        const coverImg = qs(".detail-cover", container);
                        const animeData = seriesData.anime?.[0];
                      
                        const coverUrl =
                          viewType === "anime" && animeData?.cover_an
                            ? animeData.cover_an
                            : seriesData.cover;
                      
                        if (banner) {
                          banner.style.setProperty("--hero-banner-bg", `url('${coverUrl}')`);
                        }
                        if (coverImg) {
                          coverImg.src = coverUrl || "";
                          coverImg.alt = `Couverture de ${seriesData.title}`;
                        }
                      }
                      
                      function renderTitlesAndTags(container, seriesData, viewType) {
                        const animeData = seriesData.anime?.[0];
                        const data = viewType === "anime" ? animeData : seriesData;
                      
                        const jpTitleElem = qs(".detail-jp-title", container);
                        if (jpTitleElem) jpTitleElem.textContent = seriesData.jp_title || "";
                      
                        const titleElem = qs(".detail-title", container);
                        if (titleElem) titleElem.textContent = seriesData.title || "";
                      
                        const tagsDiv = qs(".detail-tags", container);
                        if (tagsDiv) {
                          tagsDiv.innerHTML = (data.tags || [])
                            .map((tag) => `<span class="detail-tag">${tag}</span>`)
                            .join("");
                        }
                      
                        const statusElem = qs(".status-indicator", container);
                        if (statusElem) {
                          const statusText = data.release_status || data.status_an || "?";
                          const isFinished = statusText.toLowerCase().includes("fini");
                          statusElem.innerHTML = `<span class="status-dot${
                            isFinished ? " finished" : ""
                          }"></span>${statusText}`;
                        }
                      
                        const yearElem = qs(".release-year", container);
                        if (yearElem)
                          yearElem.textContent = data.release_year || data.date_start_an || "?";
                      }
                      
                      function renderCreatorInfo(container, seriesData, viewType) {
                        const metaElem = qs(".detail-meta.detail-creator-info", container);
                        if (!metaElem) return;
                      
                        if (viewType === "anime") {
                          const studio = seriesData.anime?.[0]?.studios_an?.join(", ") || "?";
                          metaElem.innerHTML = `Studio : ${studio}`;
                        } else {
                          if (
                            seriesData.author &&
                            seriesData.artist &&
                            seriesData.author === seriesData.artist
                          ) {
                            metaElem.innerHTML = `Auteur & Artiste : ${seriesData.author}`;
                          } else {
                            metaElem.innerHTML = `Auteur : ${
                              seriesData.author || "?"
                            }<span class="creator-separator"></span>Dessinateur : ${
                              seriesData.artist || "?"
                            }`;
                          }
                        }
                      }
                      
                      function renderDescription(container, seriesData) {
                        const descElem = qs(".detail-description", container);
                        if (descElem) {
                          descElem.textContent =
                            seriesData.description || "Aucune description disponible.";
                        }
                        // Logique du bouton "Afficher plus" (pour les infos supplémentaires)
                        const btnRow = qs(".series-see-more-row", container);
                        const btn = qs(".series-see-more-btn", container);
                        const moreInfos = qs(".series-more-infos", container);
                        if (!btn || !moreInfos || !btnRow) return;
                      
                        const altTitles = (seriesData.alternative_titles || []).join(", ");
                        moreInfos.innerHTML = `
                          <div><strong>Type :</strong> ${seriesData.manga_type || "?"}</div>
                          <div><strong>Magazine :</strong> ${seriesData.magazine || "?"}</div>
                          <div><strong>Titres alternatifs :</strong> ${altTitles || "—"}</div>
                        `;
                        btn.addEventListener(
                          "click",
                          () => {
                            btnRow.classList.add("hide");
                            moreInfos.style.display = "block";
                          },
                          { once: true }
                        );
                      }
                      
                      function renderRatingComponent(container, seriesData, seriesStats) {
                        const ratingContainer = qs("#series-rating-container", container);
                        if (!ratingContainer) {
                          console.warn(
                            "[InfoRenderer] Conteneur de notation #series-rating-container introuvable."
                          );
                          return;
                        }
                      
                        const seriesSlug = seriesData.slug; // Le slug est ajouté dans le routeur
                        const serverRating = seriesStats?.stats?.ratings || { average: 0, count: 0 };
                        const userRating = getLocalSeriesRating(seriesSlug);
                      
                        // Injecte le HTML du composant
                        ratingContainer.innerHTML = `
                              <button id="series-rating-btn" class="detail-action-btn detail-action-btn--rate" type="button" data-slug="${seriesSlug}">
                                  <i class="fa-solid fa-star rating-star"></i>
                                  <span class="series-rating-average">...</span>
                              </button>
                              <div id="series-rating-tooltip" class="series-rating-tooltip"></div>
                              <div id="series-rating-menu" class="series-rating-menu">
                                  <ul>
                                      ${[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
                                        .map(
                                          (score) =>
                                            `<li data-score="${score}">(${score}) ${getRatingLabel(
                                              score
                                            )}</li>`
                                        )
                                        .join("")}
                                      <li data-score="remove" class="remove-rating">Retirer la note</li>
                                  </ul>
                              </div>
                          `;
                      
                        // Initialise le composant avec sa logique interne
                        setupRatingComponentLogic(seriesSlug, serverRating, userRating);
                      }
                      
                      function getRatingLabel(score) {
                        const labels = {
                          10: "Chef-d'œuvre",
                          9: "Excellent",
                          8: "Très bon",
                          7: "Bon",
                          6: "Correct",
                          5: "Moyen",
                          4: "Mauvais",
                          3: "Très mauvais",
                          2: "Horrible",
                          1: "Affligeant",
                        };
                        return labels[score] || "";
                      }
                      
                      function setupRatingComponentLogic(
                        seriesSlug,
                        serverRating,
                        initialUserRating
                      ) {
                        const btn = qs("#series-rating-btn");
                        const tooltip = qs("#series-rating-tooltip");
                        const menu = qs("#series-rating-menu");
                        const avgSpan = qs(".series-rating-average", btn);
                      
                        let currentServerRating = { ...serverRating };
                        let currentUserRating = initialUserRating;
                      
                        function updateDisplay() {
                          let totalVotes = currentServerRating.count || 0;
                          let totalScore = (currentServerRating.average || 0) * totalVotes;
                      
                          if (currentUserRating !== null) {
                            totalVotes++;
                            totalScore += currentUserRating;
                          }
                      
                          const displayAvg = totalVotes > 0 ? totalScore / totalVotes : 0;
                      
                          avgSpan.textContent = (Math.round(displayAvg * 10) / 10).toLocaleString(
                            "fr-FR",
                            { minimumFractionDigits: 1, maximumFractionDigits: 1 }
                          );
                          tooltip.textContent = `${totalVotes} vote${totalVotes > 1 ? "s" : ""}`;
                          btn.classList.toggle("accent", currentUserRating !== null);
                        }
                      
                        // Événements du composant
                        btn.addEventListener("mouseenter", (e) => {
                          tooltip.classList.add("visible");
                          positionTooltip(e);
                        });
                        btn.addEventListener("mousemove", positionTooltip);
                        btn.addEventListener("mouseleave", () => tooltip.classList.remove("visible"));
                      
                        function positionTooltip(e) {
                          const tRect = tooltip.getBoundingClientRect();
                          let left = e.clientX + 16;
                          let top = e.clientY - 18;
                          if (left + tRect.width > window.innerWidth - 8)
                            left = window.innerWidth - tRect.width - 8;
                          if (top < 8) top = 8;
                          tooltip.style.left = `${left}px`;
                          tooltip.style.top = `${top}px`;
                        }
                      
                        let menuOpen = false;
                        btn.addEventListener("click", (e) => {
                          e.stopPropagation();
                          menuOpen = !menuOpen;
                          // ***** CORRECTION ICI *****
                          menu.classList.toggle("visible", menuOpen);
                          if (menuOpen) {
                            const rect = btn.getBoundingClientRect();
                            menu.style.top = `${rect.bottom + 6}px`;
                            menu.style.left = `${rect.left}px`;
                          }
                        });
                      
                        document.addEventListener("click", (e) => {
                          if (menuOpen && !menu.contains(e.target)) {
                            menuOpen = false;
                            // ***** CORRECTION ICI *****
                            menu.classList.remove("visible");
                          }
                        });
                      
                        menu.querySelectorAll("li[data-score]").forEach((li) => {
                          li.addEventListener("click", () => {
                            const scoreValue = li.dataset.score;
                      
                            if (scoreValue === "remove") {
                              currentUserRating = null;
                            } else {
                              currentUserRating = parseInt(scoreValue, 10);
                            }
                      
                            setLocalSeriesRating(seriesSlug, currentUserRating);
                            updateDisplay();
                            menuOpen = false;
                            // ***** CORRECTION ICI *****
                            menu.classList.remove("visible");
                          });
                        });
                      
                        // Affichage initial
                        updateDisplay();
                      }
                    -------------------------


                    Fichier : listControls.js
                    -------------------------
                      // --- File: js/pages/series-detail/shared/listControls.js ---
                      
                      import { qs } from "../../../utils/domUtils.js";
                      
                      let currentSort = { type: "number", order: "desc" };
                      let currentSearch = "";
                      
                      /**
                       * Initialise les contrôles de recherche et de tri pour une liste.
                       * @param {HTMLElement} viewContainer - Le conteneur principal de la vue.
                       * @param {function} onUpdate - La fonction callback à appeler quand un filtre ou un tri change.
                       */
                      export function initListControls(viewContainer, onUpdate) {
                        console.log("[ListControls] Initialisation des contrôles.");
                        const searchInput = qs('.search-chapter input[type="text"]', viewContainer);
                        const sortBtn = qs(".sort-chapter-btn", viewContainer);
                      
                        if (!searchInput || !sortBtn) {
                          console.warn("[ListControls] Éléments de recherche ou de tri non trouvés.");
                          return;
                        }
                      
                        // Réinitialiser l'état au cas où
                        currentSort = { type: "number", order: "desc" };
                        currentSearch = "";
                        searchInput.value = "";
                        updateSortButtonText(sortBtn);
                      
                        // Écouteur pour la recherche
                        searchInput.addEventListener("input", (e) => {
                          currentSearch = e.target.value;
                          console.log(`[ListControls] Recherche mise à jour : "${currentSearch}"`);
                          onUpdate({ sort: currentSort, search: currentSearch });
                        });
                      
                        // Écouteur pour le tri
                        sortBtn.addEventListener("click", () => {
                          // Cycle de tri: num desc -> num asc -> date desc -> date asc -> ...
                          if (currentSort.type === "number" && currentSort.order === "desc") {
                            currentSort = { type: "number", order: "asc" };
                          } else if (currentSort.type === "number" && currentSort.order === "asc") {
                            currentSort = { type: "date", order: "desc" };
                          } else if (currentSort.type === "date" && currentSort.order === "desc") {
                            currentSort = { type: "date", order: "asc" };
                          } else {
                            currentSort = { type: "number", order: "desc" };
                          }
                      
                          updateSortButtonText(sortBtn);
                          console.log("[ListControls] Tri mis à jour :", currentSort);
                          onUpdate({ sort: currentSort, search: currentSearch });
                        });
                      }
                      
                      function updateSortButtonText(btn) {
                        let txt = "";
                        if (currentSort.type === "date") {
                          txt = currentSort.order === "desc" ? "Date (récent)" : "Date (ancien)";
                        } else {
                          txt =
                            currentSort.order === "desc"
                              ? "Numéro (décroissant)"
                              : "Numéro (croissant)";
                        }
                        btn.innerHTML = `<i class="fas fa-sort"></i> ${txt}`;
                      }
                    -------------------------


                    Fichier : statsManager.js
                    -------------------------
                      // --- File: js/pages/series-detail/shared/statsManager.js ---
                      
                      import { qsa } from "../../../utils/domUtils.js";
                      
                      // Cache en mémoire pour éviter de refaire les appels API pendant la session
                      let seriesStatsCache = new Map();
                      let imgChestPostViewsCache = new Map();
                      let isLoadingImgChestViews = false;
                      let allImgChestViewsPreloadedAttempted = false;
                      
                      /**
                       * Récupère les statistiques d'interaction (likes, commentaires) pour une série donnée.
                       * @param {string} seriesSlug - Le slug de la série.
                       * @returns {Promise<object>} Un objet contenant les statistiques de la série.
                       */
                      export async function fetchStats(seriesSlug) {
                        console.log(
                          `[StatsManager] Appel de fetchStats pour le slug : ${seriesSlug}`
                        );
                        if (seriesStatsCache.has(seriesSlug)) {
                          console.log(`[StatsManager] Cache HIT pour les stats de ${seriesSlug}.`);
                          return seriesStatsCache.get(seriesSlug);
                        }
                      
                        console.log(
                          `[StatsManager] Cache MISS. Fetching /api/series-stats pour ${seriesSlug}...`
                        );
                        try {
                          const response = await fetch(
                            `/api/series-stats?slug=${seriesSlug}&t=${Date.now()}`
                          );
                          if (!response.ok) throw new Error(`Erreur HTTP ${response.status}`);
                          const data = await response.json();
                          seriesStatsCache.set(seriesSlug, data);
                          console.log(
                            `[StatsManager] Stats pour ${seriesSlug} récupérées et mises en cache.`,
                            data
                          );
                          return data;
                        } catch (error) {
                          console.error(
                            `[StatsManager] Impossible de récupérer les stats pour ${seriesSlug}:`,
                            error
                          );
                          return {}; // Retourne un objet vide en cas d'erreur pour ne pas bloquer le rendu.
                        }
                      }
                      
                      /**
                       * Précharge en une seule fois toutes les données de vues depuis l'API proxyfiée d'ImgChest.
                       */
                      export async function preloadAllImgChestViewsOnce() {
                        if (allImgChestViewsPreloadedAttempted || isLoadingImgChestViews) {
                          return;
                        }
                        isLoadingImgChestViews = true;
                        console.log(
                          "[StatsManager/ImgChest] Démarrage du préchargement des vues ImgChest..."
                        );
                        try {
                          const response = await fetch("/api/imgchest-get-all-pages");
                          if (!response.ok)
                            throw new Error(`Proxy request failed: ${response.status}`);
                          const data = await response.json();
                          if (Array.isArray(data.posts)) {
                            data.posts.forEach((post) => {
                              if (post.id && typeof post.views !== "undefined") {
                                imgChestPostViewsCache.set(post.id, post.views);
                              }
                            });
                            console.log(
                              `[StatsManager/ImgChest] Cache rempli avec ${imgChestPostViewsCache.size} posts.`
                            );
                          }
                          allImgChestViewsPreloadedAttempted = true;
                          updateAllVisibleChapterViews(); // Mettre à jour les vues déjà affichées
                        } catch (error) {
                          console.error(
                            "[StatsManager/ImgChest] Erreur lors du préchargement des vues:",
                            error
                          );
                        } finally {
                          isLoadingImgChestViews = false;
                        }
                      }
                      
                      /**
                       * Met à jour le compteur de vues pour tous les chapitres visibles sur la page.
                       */
                      export function updateAllVisibleChapterViews() {
                        console.log(
                          "[StatsManager/ImgChest] Mise à jour des compteurs de vues sur la page."
                        );
                        qsa(".detail-chapter-views[data-imgchest-id]").forEach((viewElement) => {
                          const postId = viewElement.dataset.imgchestId;
                          if (imgChestPostViewsCache.has(postId)) {
                            const views = imgChestPostViewsCache.get(postId);
                            viewElement.innerHTML = `<i class="fas fa-eye"></i> ${views.toLocaleString(
                              "fr-FR"
                            )}`;
                          } else if (allImgChestViewsPreloadedAttempted && !isLoadingImgChestViews) {
                            viewElement.innerHTML = `<i class="fas fa-eye-slash" title="Vues non disponibles"></i>`;
                          }
                        });
                      }
                    -------------------------

        Dossier : utils/

            Fichier : dateUtils.js
            ----------------------
              // js/utils/dateUtils.js
              
              export function parseDateToTimestamp(dateInput) {
                if (dateInput === null || typeof dateInput === 'undefined' || dateInput === "") return NaN;
              
                let timestamp;
              
                if (typeof dateInput === 'string') {
                  // Essayer de le convertir en nombre d'abord (pour les timestamps Unix en string)
                  const numericValue = parseInt(dateInput, 10);
                  if (!isNaN(numericValue) && String(numericValue) === dateInput) { // S'assure que c'est bien une chaîne de chiffres
                      // Supposé être un timestamp en secondes si c'est une chaîne
                      timestamp = numericValue * 1000;
                  } else {
                    // Sinon, essayer de parser comme format YYYY-MM-DD HH:MM:SS
                    const parts = dateInput.split(" ");
                    const dateParts = parts[0].split("-");
                    const timeParts = parts[1] ? parts[1].split(":") : ["00", "00", "00"];
              
                    if (dateParts.length === 3) {
                      timestamp = Date.UTC(
                        parseInt(dateParts[0], 10),
                        parseInt(dateParts[1], 10) - 1,
                        parseInt(dateParts[2], 10),
                        parseInt(timeParts[0] || "0", 10),
                        parseInt(timeParts[1] || "0", 10),
                        parseInt(timeParts[2] || "0", 10)
                      );
                    } else {
                      timestamp = NaN;
                    }
                  }
                } else if (typeof dateInput === 'number') {
                  // Si c'est un nombre, on suppose que c'est déjà un timestamp.
                  // Si c'est des secondes (comme de Cubari), multiplier par 1000.
                  timestamp = dateInput < 30000000000 ? dateInput * 1000 : dateInput; // Augmenté le seuil pour les timestamps futurs
                } else {
                  timestamp = NaN;
                }
                return timestamp;
              }
              
              // ... timeAgo et formatDateForGallery restent inchangés pour l'instant ...
              // Mais ils dépendent de la correction de parseDateToTimestamp.
              // Vérifie que formatDateForGallery utilise bien le bon timestamp pour les dates de colos.json
              // colos.json a des dates comme "2025-04-24 00:00:00", ce qui devrait être bien géré par la partie YYYY-MM-DD.
              export function timeAgo(dateInput) {
                const timestamp = parseDateToTimestamp(dateInput);
                if (isNaN(timestamp)) {
                  // console.warn("timeAgo: Invalid date input, resulted in NaN timestamp:", dateInput);
                  return "Date inconnue";
                }
              
                const now = Date.now();
                const diff = now - timestamp;
              
                const seconds = Math.round(diff / 1000);
                const minutes = Math.round(seconds / 60);
                const hours = Math.round(minutes / 60);
                const days = Math.round(hours / 24);
                // const weeks = Math.round(days / 7);
              
                if (seconds < 5) return "à l’instant";
                if (seconds < 60) return `${seconds} sec`;
                if (minutes < 60) return `${minutes} min`;
                if (hours < 24) return `${hours} h`;
                if (days < 7) return `${days} j`;
                
                return new Date(timestamp).toLocaleDateString("fr-FR", {
                  day: '2-digit',
                  month: '2-digit',
                  year: 'numeric',
                });
              }
              
              export function formatDateForGallery(dateInput) { // Renommé dateInput pour clarté
                if (dateInput === null || typeof dateInput === 'undefined' || dateInput === "") return "Date inconnue";
                const timestamp = parseDateToTimestamp(dateInput);
                if (isNaN(timestamp)) {
                  // console.warn("formatDateForGallery: Invalid date input, resulted in NaN timestamp:", dateInput);
                  return "Date invalide";
                }
                return new Date(timestamp).toLocaleDateString('fr-FR', {
                  day: '2-digit',
                  month: '2-digit',
                  year: 'numeric',
                });
              }
            ----------------------


            Fichier : domUtils.js
            ---------------------
              // js/utils/domUtils.js
              
              /**
               * Charge un composant HTML depuis une URL et l'insère dans un placeholder.
               * @param {HTMLElement} placeholder - L'élément où insérer le HTML.
               * @param {string} url - L'URL du fichier HTML à charger.
               */
              export async function loadComponent(placeholder, url) {
                if (placeholder) {
                  try {
                    const response = await fetch(url);
                    if (response.ok) {
                      placeholder.innerHTML = await response.text();
                    } else {
                      console.error(`Failed to load component ${url}:`, response.status);
                      placeholder.innerHTML = `<p>Erreur de chargement du composant: ${url}.</p>`;
                    }
                  } catch (error) {
                    console.error(`Error loading component ${url}:`, error);
                    placeholder.innerHTML = `<p>Erreur de chargement du composant: ${url}.</p>`;
                  }
                }
              }
              
              /**
               * Crée un slug à partir d'un texte.
               * @param {string} text - Le texte à slugifier.
               * @returns {string} Le slug.
               */
              export function slugify(text) {
                if (!text) return "";
                return text.toString()
                  .normalize("NFD")                 // Sépare les caractères de leurs accents (ex: "é" -> "e" + "´")
                  .replace(/[\u0300-\u036f]/g, "") // Supprime les accents et diacritiques
                  .toLowerCase()
                  .trim()
                  .replace(/[\s\u3000]+/g, "_")   // Remplace les espaces (normaux et idéographiques) par un underscore
                  .replace(/[^\w-]+/g, "")          // Supprime les caractères non autorisés
                  .replace(/--+/g, "_");            // Nettoie les tirets multiples
              }
              
              /**
               * Ajoute un badge "NOUVEAU" si la date est récente.
               * @param {string|number} dateInput - La date de publication.
               * @param {function} parseDateToTimestampFn - La fonction pour parser la date en timestamp.
               * @returns {string} Le HTML du badge ou une chaîne vide.
               */
              export function maybeNewBadge(dateInput, parseDateToTimestampFn) {
                const timestamp = parseDateToTimestampFn(dateInput);
                if (isNaN(timestamp)) return "";
                // 3 jours en millisecondes
                return (Date.now() - timestamp < 3 * 24 * 60 * 60 * 1000) ? '<span class="new-badge">NOUVEAU</span>' : "";
              }
              
              /**
               * Helper pour querySelector
               * @param {string} selector
               * @param {Document|Element} [context=document]
               * @returns {Element|null}
               */
              export function qs(selector, context = document) {
                return context.querySelector(selector);
              }
              
              /**
               * Helper pour querySelectorAll
               * @param {string} selector
               * @param {Document|Element} [context=document]
               * @returns {NodeListOf<Element>}
               */
              export function qsa(selector, context = document) {
                return context.querySelectorAll(selector);
              }
              
              /**
               * Limite le nombre de tags visibles dans un conteneur et ajoute un tag "..." ou "+N" si nécessaire.
               * @param {HTMLElement} tagsContainer - L'élément conteneur des tags (ex: .series-tags).
               * @param {number} [maxVisibleTags=3] - Le nombre maximum de tags à afficher avant le tag "suite".
               * @param {string} [moreTagType="plusN"] - Type de tag "suite" : "ellipsis" pour "..." ou "plusN" pour "+N".
               */
              export function limitVisibleTags(tagsContainer, maxVisibleTags = 3, moreTagType = "plusN") {
                if (!tagsContainer) return;
              
                // Sélectionne uniquement les tags qui ne sont PAS déjà un tag "more"
                const tags = Array.from(tagsContainer.querySelectorAll('.tag:not(.tag-more)'));
              
                // Supprimer un éventuel ancien tag "more" avant de recalculer
                const existingMoreTag = tagsContainer.querySelector('.tag.tag-more');
                if (existingMoreTag) {
                  existingMoreTag.remove();
                }
              
                // Rendre tous les tags potentiellement visibles avant de décider lesquels cacher
                // (utile si cette fonction est appelée plusieurs fois avec des maxVisibleTags différents)
                tags.forEach(tag => {
                  tag.style.display = ''; // Réinitialise à la valeur par défaut (flex item, inline-block, etc.)
                });
              
                if (tags.length > maxVisibleTags) {
                  // Cacher les tags excédentaires
                  for (let i = maxVisibleTags; i < tags.length; i++) {
                    tags[i].style.display = 'none';
                  }
              
                  // Créer et ajouter le tag "suite"
                  const moreTag = document.createElement('span');
                  moreTag.classList.add('tag', 'tag-more');
              
                  if (moreTagType === "ellipsis") {
                    moreTag.textContent = '...';
                  } else { // Par défaut "plusN"
                    const hiddenCount = tags.length - maxVisibleTags;
                    moreTag.textContent = `+${hiddenCount}`;
                    moreTag.title = `${hiddenCount} tag(s) supplémentaire(s)`;
                  }
              
                  tagsContainer.appendChild(moreTag);
                }
                // Pas besoin de 'else' pour remettre display='', car on l'a fait au début pour tous les tags réels.
              }
            ---------------------


            Fichier : fetchUtils.js
            -----------------------
              // js/utils/fetchUtils.js
              import { slugify } from './domUtils.js'; // Assurez-vous que slugify est bien importé
              
              let CONFIG_CACHE = null;
              
              /**
               * Fonction de fetch générique avec gestion des erreurs.
               * @param {string} url - L'URL à fetch.
               * @param {object} [options={}] - Options pour fetch.
               * @returns {Promise<any>} Les données JSON parsées ou le texte brut en cas d'erreur de parsing JSON.
               */
              export async function fetchData(url, options = {}) {
                const fetchOptions = { method: 'GET', ...options };
                
                try {
                  const response = await fetch(url, fetchOptions);
                  if (!response.ok) {
                    let errorBody = "No error body.";
                    try {
                      errorBody = await response.text();
                    } catch (textError) {
                      console.warn("Could not read error response body as text.", textError);
                    }
                    throw new Error(`HTTP error! status: ${response.status} for ${url}. Body: ${errorBody.substring(0, 200)}`);
                  }
              
                  const responseText = await response.text();
                  try {
                    return JSON.parse(responseText);
                  } catch (jsonError) {
                    console.warn(`Response from ${url} was not valid JSON. Content: "${responseText.substring(0, 100)}..."`, jsonError);
                    throw new Error(`Failed to parse JSON from ${url}. Content: ${responseText.substring(0, 100)}`);
                  }
              
                } catch (error) {
                  console.error(`Could not fetch or process data from ${url}:`, error);
                  throw error;
                }
              }
              
              /**
               * Charge la configuration globale du site (config.json).
               * @returns {Promise<object>} La configuration.
               */
              export async function loadGlobalConfig() {
                if (CONFIG_CACHE) {
                  return CONFIG_CACHE;
                }
                const localConfigPath = '/data/config.json';
                try {
                  const config = await fetchData(localConfigPath);
                  CONFIG_CACHE = config;
                  return CONFIG_CACHE;
                } catch (error) {
                  console.error(`FATAL: Failed to load global configuration from ${localConfigPath}. Error:`, error);
                  CONFIG_CACHE = { ENV: "ERROR_FALLBACK" };
                  throw new Error(`Critical: Could not load global configuration from ${localConfigPath}.`);
                }
              }
              
              // --- NOUVELLE FONCTION OPTIMISÉE ---
              /**
               * Récupère les données d'UNE SEULE série en se basant sur son slug.
               * @param {string} slug - Le slug de la série à trouver (ex: "kaoru_hana_wa_rin_to_saku").
               * @returns {Promise<object|null>} L'objet de la série ou null si non trouvée.
               */
              export async function fetchSeriesDataBySlug(slug) {
                  const config = await loadGlobalConfig();
                  let foundFile;
              
                  if (config.ENV === "LOCAL_DEV") {
                      const localFiles = config.LOCAL_SERIES_FILES || [];
                      const foundFilename = localFiles.find(filename => slugify(filename.replace('.json', '')) === slug);
                      if (foundFilename) {
                          foundFile = {
                              path: `/data/series/${foundFilename}`,
                              name: foundFilename
                          };
                      }
                  } else {
                      const contents = await fetchData(config.URL_GIT_CUBARI);
                      if (Array.isArray(contents)) {
                          const foundGithubFile = contents.find(file => file.name.endsWith('.json') && slugify(file.name.replace('.json', '')) === slug);
                          if (foundGithubFile) {
                              foundFile = {
                                  path: foundGithubFile.download_url,
                                  name: foundGithubFile.name
                              };
                          }
                      }
                  }
              
                  if (foundFile) {
                      try {
                          const serie = await fetchData(foundFile.path);
                          const rawGithubFileUrl = `${config.URL_RAW_JSON_GITHUB}${foundFile.name}`;
                          const base64Url = serie.cubari_gist_id ? serie.cubari_gist_id : btoa(rawGithubFileUrl);
                          return { ...serie, base64Url };
                      } catch (error) {
                          console.error(`Error loading the specific series file ${foundFile.name}:`, error);
                          return null;
                      }
                  }
              
                  console.warn(`Series with slug "${slug}" not found.`);
                  return null;
              }
              
              
              /**
               * Récupère TOUTES les données des séries. Utile pour la page d'accueil.
               * @returns {Promise<Array<object>>} Un tableau d'objets série.
               */
              export async function fetchAllSeriesData() {
                const config = await loadGlobalConfig();
                let seriesPromises = [];
              
                if (config.ENV === "LOCAL_DEV" && Array.isArray(config.LOCAL_SERIES_FILES)) {
                  seriesPromises = config.LOCAL_SERIES_FILES.map(async (filename) => {
                    const localSeriesPath = `/data/series/${filename}`;
                    try {
                      const serie = await fetchData(localSeriesPath);
                      const rawGithubFileUrl = `${config.URL_RAW_JSON_GITHUB}${filename}`;
                      const base64Url = serie.cubari_gist_id ? serie.cubari_gist_id : btoa(rawGithubFileUrl);
                      return { ...serie, base64Url };
                    } catch (error) {
                      console.error(`Error loading local series file ${localSeriesPath}:`, error);
                      return null;
                    }
                  });
                } else {
                  // ... (la logique de production reste la même)
                  try {
                    const contents = await fetchData(config.URL_GIT_CUBARI);
                    if (!Array.isArray(contents)) return [];
                    seriesPromises = contents
                      .filter(file => file.name.endsWith(".json") && file.type === 'file')
                      .map(async (file) => {
                        try {
                          const serie = await fetchData(file.download_url);
                          const rawGithubFileUrl = `${config.URL_RAW_JSON_GITHUB}${file.name}`;
                          const base64Url = serie.cubari_gist_id ? serie.cubari_gist_id : btoa(rawGithubFileUrl);
                          return { ...serie, base64Url };
                        } catch (error) {
                          console.error(`Error loading series ${file.name}:`, error);
                          return null;
                        }
                      });
                  } catch (error) {
                    console.error("Error fetching GitHub file list:", error);
                    return [];
                  }
                }
              
                const allSeriesResults = await Promise.all(seriesPromises);
                return allSeriesResults.filter(s => s && typeof s === 'object' && s.title && s.chapters);
              }
            -----------------------


            Fichier : interactions.js
            -------------------------
              // --- Gestion des notes utilisateur (rating) ---
              const RATING_KEY_PREFIX = "series_rating_";
              
              /**
               * Récupère la note locale de l'utilisateur pour une série
               */
              export function getLocalSeriesRating(seriesSlug) {
                const key = RATING_KEY_PREFIX + seriesSlug;
                const val = localStorage.getItem(key);
                if (!val) return null;
                const parsed = parseFloat(val);
                return isNaN(parsed) ? null : parsed;
              }
              
              /**
               * Définit/modifie la note locale de l'utilisateur pour une série
               * (et ajoute l'action à la file d'attente, en supprimant l'ancienne si besoin)
               */
              export function setLocalSeriesRating(seriesSlug, value) {
                const key = RATING_KEY_PREFIX + seriesSlug;
                const old = getLocalSeriesRating(seriesSlug);
                localStorage.setItem(key, value);
                // Ajoute à la file d'attente une action unique (remplace l'ancienne si présente)
                let queue = getActionQueue();
                if (!queue[seriesSlug]) queue[seriesSlug] = [];
                // Supprime toute ancienne action de type 'rate'
                queue[seriesSlug] = queue[seriesSlug].filter((a) => a.type !== "rate");
                queue[seriesSlug].push({ type: "rate", value });
                saveActionQueue(queue);
                console.log(
                  `[interactions.js] setLocalSeriesRating: ${seriesSlug} = ${value} (old: ${old})`
                );
              }
              
              /**
               * Supprime la note locale (si besoin)
               */
              export function removeLocalSeriesRating(seriesSlug) {
                const key = RATING_KEY_PREFIX + seriesSlug;
                localStorage.removeItem(key);
                let queue = getActionQueue();
                if (queue[seriesSlug]) {
                  queue[seriesSlug] = queue[seriesSlug].filter((a) => a.type !== "rate");
                  saveActionQueue(queue);
                }
                console.log(`[interactions.js] removeLocalSeriesRating: ${seriesSlug}`);
              }
              // js/utils/interactions.js
              
              const ACTION_QUEUE_KEY = "bigsolo_action_queue";
              
              // --- DÉBUT DE LA LOGIQUE DE DÉTECTION DE NAVIGATION ---
              
              // Ce drapeau nous aidera à savoir si l'utilisateur clique sur un lien
              // interne au site ou s'il quitte vraiment le site.
              let isInternalNavigation = false;
              
              // Log au chargement du module (utile si ce fichier est chargé au début)
              console.log(
                "[DEBUG][interactions.js][MODULE LOAD] bigsolo_action_queue =",
                localStorage.getItem("bigsolo_action_queue")
              );
              console.log(
                "[DEBUG][interactions.js][MODULE LOAD] bigsolo_internal_nav =",
                sessionStorage.getItem("bigsolo_internal_nav")
              );
              
              // On ajoute un écouteur d'événements sur l'ensemble du document pour intercepter
              // tous les clics. Le 'true' final (phase de capture) assure qu'il s'exécute
              // avant que le navigateur ne commence à suivre le lien.
              document.addEventListener(
                "click",
                (event) => {
                  // On vérifie si la cible du clic est un lien <a> ou est à l'intérieur d'un lien.
                  const link = event.target.closest("a");
              
                  // Si ce n'est pas un lien ou qu'il n'a pas de destination (href), on ne fait rien.
                  if (!link || !link.href) {
                    return;
                  }
              
                  // C'est la vérification clé : on compare le nom de domaine du lien cliqué
                  // avec le nom de domaine de la page actuelle. Si c'est le même, c'est une navigation interne.
                  if (link.hostname === window.location.hostname) {
                    // --- LOGS DEBUG SESSIONSTORAGE ---
                    console.log(
                      "[DEBUG][interactions.js][CLICK] Avant setItem, bigsolo_internal_nav =",
                      sessionStorage.getItem("bigsolo_internal_nav")
                    );
                    sessionStorage.setItem("bigsolo_internal_nav", "1");
                    console.log(
                      "[DEBUG][interactions.js][CLICK] Après setItem, bigsolo_internal_nav =",
                      sessionStorage.getItem("bigsolo_internal_nav")
                    );
                    // On lève le drapeau pour indiquer une navigation interne.
                    isInternalNavigation = true;
                    console.log(
                      "[DEBUG][interactions.js] Navigation interne détectée (clic sur lien):",
                      link.href
                    );
              
                    // Par sécurité, on remet le drapeau à false après un court instant.
                    // Cela gère le cas où la navigation serait annulée (ex: Ctrl+clic pour ouvrir dans un nouvel onglet).
                    setTimeout(() => {
                      isInternalNavigation = false;
                      console.log(
                        "[DEBUG][interactions.js] isInternalNavigation reset à false (timeout)"
                      );
                    }, 500);
                  }
                },
                true
              );
              
              // --- FIN DE LA LOGIQUE DE DÉTECTION ---
              
              // --- Gestion de la file d'attente (inchangée) ---
              
              function getActionQueue() {
                try {
                  const queue = localStorage.getItem(ACTION_QUEUE_KEY);
                  return queue ? JSON.parse(queue) : {};
                } catch (e) {
                  return {};
                }
              }
              
              function saveActionQueue(queue) {
                try {
                  localStorage.setItem(ACTION_QUEUE_KEY, JSON.stringify(queue));
                } catch (e) {
                  console.error(
                    "Impossible de sauvegarder la file d'attente des actions.",
                    e
                  );
                }
              }
              
              export function queueAction(seriesSlug, action) {
                const queue = getActionQueue();
                if (!queue[seriesSlug]) {
                  queue[seriesSlug] = [];
                }
                queue[seriesSlug].push(action);
                saveActionQueue(queue);
              }
              
              // --- Logique d'envoi de la file d'attente (MODIFIÉE) ---
              
              function sendActionQueue() {
                console.log("[DEBUG][interactions.js][sendActionQueue] START");
                console.log(
                  "[DEBUG][interactions.js][sendActionQueue] bigsolo_action_queue =",
                  localStorage.getItem("bigsolo_action_queue")
                );
                console.log(
                  "[DEBUG][interactions.js][sendActionQueue] bigsolo_internal_nav =",
                  sessionStorage.getItem("bigsolo_internal_nav")
                );
              
                if (sessionStorage.getItem("bigsolo_internal_nav") === "1") {
                  sessionStorage.removeItem("bigsolo_internal_nav");
                  console.log(
                    "[DEBUG][interactions.js] Navigation interne détectée via sessionStorage, annulation de l'envoi."
                  );
                  return;
                }
              
                console.log(
                  "[DEBUG][interactions.js] sendActionQueue appelé. isInternalNavigation =",
                  isInternalNavigation
                );
                // On vérifie le drapeau AVANT de faire quoi que ce soit.
                // Si c'est une navigation interne (SPA), on arrête tout.
                if (isInternalNavigation) {
                  console.log(
                    "[DEBUG][interactions.js] Annulation de l'envoi (navigation interne détectée)"
                  );
                  return;
                }
              
                const queue = getActionQueue();
                const seriesSlugs = Object.keys(queue);
              
                if (seriesSlugs.length === 0) {
                  console.log(
                    "[DEBUG][interactions.js] File d'attente vide, rien à envoyer."
                  );
                  return;
                }
              
                for (const seriesSlug of seriesSlugs) {
                  const actions = queue[seriesSlug];
                  if (actions.length > 0) {
                    try {
                      const currentQueue = getActionQueue();
                      console.log(
                        `[DEBUG][interactions.js][sendActionQueue] Suppression de la file pour ${seriesSlug}, état avant suppression:`,
                        JSON.stringify(currentQueue)
                      );
                      const blob = new Blob([JSON.stringify({ seriesSlug, actions })], {
                        type: "application/json",
                      });
                      console.log(
                        "[DEBUG][interactions.js][sendActionQueue] Appel navigator.sendBeacon pour",
                        seriesSlug,
                        actions
                      );
                      const beaconResult = navigator.sendBeacon("/api/log-action", blob);
                      console.log(
                        "[DEBUG][interactions.js][sendActionQueue] sendBeacon result:",
                        beaconResult
                      );
                      delete currentQueue[seriesSlug];
                      saveActionQueue(currentQueue);
                      console.log(
                        `[DEBUG][interactions.js][sendActionQueue] Etat après suppression:`,
                        localStorage.getItem("bigsolo_action_queue")
                      );
                      if (
                        localStorage.getItem("bigsolo_action_queue") !== "{}" &&
                        localStorage.getItem("bigsolo_action_queue") !== null
                      ) {
                        console.warn(
                          "[DEBUG][interactions.js][sendActionQueue] ATTENTION: File d'attente non vide après suppression !"
                        );
                      }
                      console.log(
                        `[DEBUG][interactions.js] File d'attente pour ${seriesSlug} supprimée du localStorage.`
                      );
                    } catch (error) {
                      console.warn(
                        "[DEBUG][interactions.js] Erreur lors de l'envoi de la file d'attente :",
                        error
                      );
                    }
                  }
                }
                // Log final pour vérifier l'état du localStorage après suppression
                console.log(
                  "[DEBUG][interactions.js] queue après suppression :",
                  getActionQueue()
                );
              }
              
              // L'envoi ne se fait QUE lors d'un vrai pagehide (fermeture/refresh)
              window.addEventListener("pagehide", (event) => {
                console.log(
                  "[DEBUG][interactions.js][pagehide] event pagehide déclenché. Persisted:",
                  event.persisted
                );
                sendActionQueue();
              });
              
              // --- AJOUT : test avec beforeunload ---
              window.addEventListener("beforeunload", (event) => {
                console.log("[DEBUG][interactions.js][beforeunload] event déclenché");
                sendActionQueue();
              });
              
              // --- Gestion de l'état local de l'utilisateur (inchangée) ---
              
              export function getLocalInteractionState(key) {
                try {
                  return JSON.parse(localStorage.getItem(key) || "{}");
                } catch (e) {
                  return {};
                }
              }
              
              export function setLocalInteractionState(key, value) {
                try {
                  localStorage.setItem(key, JSON.stringify(value));
                } catch (e) {
                  console.error("Impossible de sauvegarder l'état local.", e);
                }
              }
              
              export function addPendingComment(interactionKey, comment) {
                const localState = getLocalInteractionState(interactionKey);
                if (!localState.pendingComments) {
                  localState.pendingComments = [];
                }
                localState.pendingComments.push(comment);
                localState.hasCommented = true;
                setLocalInteractionState(interactionKey, localState);
              }
              
              // --- Récupération des données (inchangée) ---
              
              let seriesStatsCache = new Map();
              
              export async function fetchSeriesStats(seriesSlug) {
                if (seriesStatsCache.has(seriesSlug)) {
                  return seriesStatsCache.get(seriesSlug);
                }
                try {
                  const response = await fetch(
                    `/api/series-stats?slug=${seriesSlug}&t=${Date.now()}`
                  );
                  if (!response.ok) throw new Error(`Erreur HTTP ${response.status}`);
                  const data = await response.json();
                  seriesStatsCache.set(seriesSlug, data);
                  return data;
                } catch (error) {
                  console.error(
                    `Impossible de récupérer les stats pour ${seriesSlug}:`,
                    error
                  );
                  return {};
                }
              }
            -------------------------


            Fichier : usernameGenerator.js
            ------------------------------
              // js/utils/usernameGenerator.js
              import { fetchData } from "./fetchUtils.js";
              
              let avatarsCache = null;
              
              async function getAvatars() {
                if (avatarsCache) {
                  return avatarsCache;
                }
                try {
                  const avatarList = await fetchData("/data/avatars.json");
                  if (!Array.isArray(avatarList) || avatarList.length === 0) {
                    throw new Error("La liste d'avatars est vide ou invalide.");
                  }
                  avatarsCache = avatarList;
                  return avatarsCache;
                } catch (error) {
                  console.error("Impossible de charger la liste des avatars:", error);
                  return []; // Retourne une liste vide en cas d'erreur
                }
              }
              
              function getLocalUserIdentity(key) {
                try {
                  const stored = localStorage.getItem(key);
                  return stored ? JSON.parse(stored) : null;
                } catch (e) {
                  return null;
                }
              }
              
              function setLocalUserIdentity(key, identity) {
                try {
                  localStorage.setItem(key, JSON.stringify(identity));
                } catch (e) {
                  console.error("Impossible de sauvegarder l'identité de l'utilisateur.", e);
                }
              }
              
              /**
               * Attribue une identité (pseudo + avatar) à un utilisateur pour un chapitre spécifique.
               * Si une identité existe déjà dans le localStorage pour cette clé, elle est retournée.
               * Sinon, une nouvelle identité est créée, sauvegardée et retournée.
               * @param {string} interactionKey - La clé unique pour le chapitre (ex: "interactions_serie_chapitre").
               * @returns {Promise<{username: string, avatarUrl: string}>} L'identité de l'utilisateur.
               */
              export async function assignUserIdentityForChapter(interactionKey) {
                const identityKey = `identity_${interactionKey}`;
              
                // 1. Vérifier si une identité existe déjà
                const existingIdentity = getLocalUserIdentity(identityKey);
                if (existingIdentity) {
                  return existingIdentity;
                }
              
                // 2. Si non, en créer une nouvelle
                const avatars = await getAvatars();
                if (avatars.length === 0) {
                  // Solution de repli si les avatars ne peuvent pas être chargés
                  return {
                    username: "Visiteur Anonyme",
                    avatarUrl: "/img/profil.png",
                  };
                }
              
                // 3. Choisir un avatar au hasard
                const randomAvatarFilename =
                  avatars[Math.floor(Math.random() * avatars.length)];
              
                // 4. Créer le pseudo et l'URL de l'image
                const username = randomAvatarFilename
                  .replace(".jpg", "")
                  .replace(".png", "")
                  .replace(/_/g, " ");
                const avatarUrl = `/img/profilpicture/${randomAvatarFilename}`;
              
                const newIdentity = { username, avatarUrl };
              
                // 5. Sauvegarder la nouvelle identité dans le localStorage
                setLocalUserIdentity(identityKey, newIdentity);
              
                return newIdentity;
              }
            ------------------------------

    Dossier : templates/

        Fichier : AnimeList.html
        ------------------------
          <div class="anime-list-view">
            <h2>Épisodes</h2>
            <div id="episodes-container" class="episodes-grid"></div>
          </div>
        ------------------------


        Fichier : AnimePlayer.html
        --------------------------
          <div class="anime-player-view">
            <div class="player-container">
              <div id="video-player-wrapper"></div>
            </div>
            <div class="player-info">
              <h2 id="player-episode-title"></h2>
            </div>
            <div class="episodes-playlist">
              <h3>Épisodes</h3>
              <div id="playlist-container"></div>
            </div>
          </div>
        --------------------------


        Fichier : MangaList.html
        ------------------------
          <!-- --- File: templates/MangaList.html --- -->
          
          <!-- 1. Bannière -->
          <section id="hero-banner-section" class="full-width">
            <div class="hero-banner-overlay"></div>
          </section>
          
          <!-- 2. Infos principales & Description -->
          <section id="series-info-section">
            <div class="major-container">
              <div class="detail-cover-wrapper">
                <img class="detail-cover" src="" alt="Couverture" />
              </div>
              <div class="hero-info-text-container">
                <div class="hero-info-top">
                  <div class="hero-titles">
                    <h2 class="detail-jp-title"></h2>
                    <h1 class="detail-title"></h1>
                  </div>
                  <div class="series-metadata-container">
                    <div class="detail-tags"></div>
                    <div class="series-status-year">
                      <span class="status-indicator"
                        ><span class="status-dot"></span
                      ></span>
                      <span class="year-separator">-</span>
                      <span class="release-year"></span>
                    </div>
                  </div>
                </div>
                <div class="hero-info-bottom">
                  <div class="hero-creator-info">
                    <p class="detail-meta detail-creator-info"></p>
                  </div>
                  <div id="reading-actions-container">
                    <div id="series-rating-container">
                      <!-- Le composant de notation sera injecté ici par le JS -->
                    </div>
                    <!-- Les autres boutons d'action seront ajoutés ici par le JS -->
                  </div>
                </div>
              </div>
            </div>
          
            <!-- Conteneurs "cibles" pour le JS en vue mobile (vides sur desktop) -->
            <div class="mobile-only-targets">
              <div id="mobile-tags-target"></div>
              <div id="mobile-status-target"></div>
              <div id="mobile-actions-target"></div>
            </div>
          
            <div id="description-wrapper">
              <p class="detail-description"></p>
              <div class="series-see-more-row">
                <button class="series-see-more-btn" type="button">
                  <i class="fa-solid fa-arrow-down"></i>
                  <span class="see-more-label">Afficher plus</span>
                  <i class="fa-solid fa-arrow-down"></i>
                </button>
              </div>
              <div class="series-more-infos" style="display: none">
                <!-- Le JS injectera ici les infos supplémentaires -->
              </div>
            </div>
          </section>
          
          <!-- 3. Liste des chapitres (nouvelle structure) -->
          <section class="series-chapters-list">
            <div class="chapters-list-header">
              <div class="chapter-switch-tabs">
                <button class="chapter-tab-btn active" data-tab="chapters">
                  Chapitres
                </button>
                <button class="chapter-tab-btn" data-tab="episodes">Épisodes</button>
              </div>
              <div class="chapter-header-actions">
                <div class="search-chapter">
                  <input type="text" placeholder="Rechercher un chapitre..." />
                </div>
                <div class="sort-chapter">
                  <button class="sort-chapter-btn">
                    <i class="fas fa-sort"></i> Trier
                  </button>
                </div>
              </div>
            </div>
            <div class="chapters-list-container">
              <!-- Les cartes chapitres seront injectées ici par le JS -->
            </div>
          </section>
        ------------------------


        Fichier : MangaReader.html
        --------------------------
          <!-- --- File: templates/MangaReader.html --- -->
          
          <!DOCTYPE html>
          <html lang="fr">
            <head>
              <script>
                (function () {
                  try {
                    var theme = localStorage.getItem("mv-theme");
                    var prefersDark = window.matchMedia(
                      "(prefers-color-scheme: dark)"
                    ).matches;
                    var htmlEl = document.documentElement;
                    if (theme === "dark" || (!theme && prefersDark)) {
                      htmlEl.classList.add("dark");
                    } else {
                      htmlEl.classList.remove("dark");
                    }
                  } catch (e) {}
                })();
              </script>
              <meta charset="UTF-8" />
          
              <!-- ↓↓↓ SECTION GÉRÉE PAR LE MIDDLEWARE ↓↓↓ -->
              <meta property="og:type" content="website" />
              <meta name="twitter:card" content="summary_large_image" />
              <!-- DYNAMIC_OG_TAGS_PLACEHOLDER -->
              <!-- ↑↑↑ FIN DE LA SECTION ↑↑↑ -->
          
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <link rel="preconnect" href="https://fonts.googleapis.com" />
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
              <link
                href="https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap"
                rel="stylesheet"
              />
              <link rel="icon" type="image/png" href="/img/icon.png" />
              <link
                rel="stylesheet"
                href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
                integrity="sha512-Avb2QiuDEEvB4bZJYdft2mNjVShBftLdPG8FJ0V7irTLQ8Uo0qcPxh4Plq7G5tGm0rU+1SPhVotteLpBERwTkw=="
                crossorigin="anonymous"
                referrerpolicy="no-referrer"
              />
          
              <link rel="stylesheet" href="/css/style.css" />
              <link rel="stylesheet" href="/css/components/header.css" />
              <link rel="stylesheet" href="/css/components/mobile-menu.css" />
              <link rel="stylesheet" href="/css/components/reader.css" />
              <link rel="stylesheet" href="/css/layout.css" />
              <script src="/js/theme-init.js"></script>
            </head>
          
            <body id="readerpage">
              <header id="main-header"></header>
              <div class="mobile-menu-overlay" id="main-mobile-menu-overlay"></div>
          
              <main id="manga-reader-root">
                <!-- Le JS va générer la structure complète du lecteur ici -->
                <p style="padding: 3rem; text-align: center; color: var(--clr-text-sub)">
                  Initialisation du lecteur...
                </p>
              </main>
          
              <script id="reader-data-placeholder" type="application/json">
                <!-- READER_DATA_PLACEHOLDER -->
              </script>
              <script src="/js/index.js" type="module"></script>
            </body>
          </html>
        --------------------------

